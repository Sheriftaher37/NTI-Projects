
WATER_LEVELS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  00000c10  2**0
                  ALLOC
  2 .stab         00001068  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006b4  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c3 05 	call	0xb86	; 0xb86 <main>
  74:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
static u8 ADC_u8ISRSource;

u8 ADC_u8BusyState = IDLE;

void ADC_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/*set voltage refrence selection*/

	ADMUX &= 0b0011111;
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 71       	andi	r24, 0x1F	; 31
  90:	8c 93       	st	X, r24
	ADMUX|= ADC_Refrence_Seletion;
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 67       	ori	r24, 0x7F	; 127
  9e:	8c 93       	st	X, r24

	/*set left agdjust result*/
#if (ADC_Resolution == Eight_Bits)
	SET_BIT(ADMUX,ADMUX_ADLAR);
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8c 93       	st	X, r24
#else
#error "set resolution error"
#endif

	/*set prescaler*/
	ADCSRA &= 0b11111000;
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 7f       	andi	r24, 0xF8	; 248
  ba:	8c 93       	st	X, r24
	ADCSRA |= ADC_Prescaler;
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	8c 93       	st	X, r24

	/*set conversion mode*/
#if (ADC_Conversion == Single_conversion)
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	8c 93       	st	X, r24
#else
#error	"Converion set error"
#endif

	/*enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_u8StartConversion_Synch>:

u8 ADC_u8StartConversion_Synch(u8 Copy_u8Channel,u8* Copy_pu8Reading)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	28 97       	sbiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	8e 83       	std	Y+6, r24	; 0x06
 102:	78 87       	std	Y+8, r23	; 0x08
 104:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
 106:	1a 82       	std	Y+2, r1	; 0x02
 108:	1b 82       	std	Y+3, r1	; 0x03
 10a:	1c 82       	std	Y+4, r1	; 0x04
 10c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
 10e:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
 110:	80 91 69 00 	lds	r24, 0x0069
 114:	88 23       	and	r24, r24
 116:	09 f0       	breq	.+2      	; 0x11a <ADC_u8StartConversion_Synch+0x2e>
 118:	63 c0       	rjmp	.+198    	; 0x1e0 <ADC_u8StartConversion_Synch+0xf4>
	{
		/*ADC is now busy*/
		ADC_u8BusyState = BUSY;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 69 00 	sts	0x0069, r24
		/*clear theMUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
 120:	a7 e2       	ldi	r26, 0x27	; 39
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e7 e2       	ldi	r30, 0x27	; 39
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 7e       	andi	r24, 0xE0	; 224
 12c:	8c 93       	st	X, r24

		/*set the required channel into the MUX bits*/
		ADMUX |= Copy_u8Channel;
 12e:	a7 e2       	ldi	r26, 0x27	; 39
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e2       	ldi	r30, 0x27	; 39
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	8e 81       	ldd	r24, Y+6	; 0x06
 13a:	89 2b       	or	r24, r25
 13c:	8c 93       	st	X, r24

#if (ADC_Conversion == Single_conversion)
		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
 13e:	a6 e2       	ldi	r26, 0x26	; 38
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e6 e2       	ldi	r30, 0x26	; 38
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	8c 93       	st	X, r24
 14c:	0b c0       	rjmp	.+22     	; 0x164 <ADC_u8StartConversion_Synch+0x78>

		/*polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	9b 81       	ldd	r25, Y+3	; 0x03
 152:	ac 81       	ldd	r26, Y+4	; 0x04
 154:	bd 81       	ldd	r27, Y+5	; 0x05
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	a1 1d       	adc	r26, r1
 15a:	b1 1d       	adc	r27, r1
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	9b 83       	std	Y+3, r25	; 0x03
 160:	ac 83       	std	Y+4, r26	; 0x04
 162:	bd 83       	std	Y+5, r27	; 0x05
#if (ADC_Conversion == Single_conversion)
		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
 164:	e6 e2       	ldi	r30, 0x26	; 38
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 95       	swap	r24
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	81 70       	andi	r24, 0x01	; 1
 174:	90 70       	andi	r25, 0x00	; 0
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	61 f4       	brne	.+24     	; 0x192 <ADC_u8StartConversion_Synch+0xa6>
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	9b 81       	ldd	r25, Y+3	; 0x03
 17e:	ac 81       	ldd	r26, Y+4	; 0x04
 180:	bd 81       	ldd	r27, Y+5	; 0x05
 182:	88 38       	cpi	r24, 0x88	; 136
 184:	23 e1       	ldi	r18, 0x13	; 19
 186:	92 07       	cpc	r25, r18
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	a2 07       	cpc	r26, r18
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	b2 07       	cpc	r27, r18
 190:	f1 f6       	brne	.-68     	; 0x14e <ADC_u8StartConversion_Synch+0x62>
		{
			Local_u32Counter++;
		}
		if (Local_u32Counter== ADC_u32TIMEOUT)
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	ac 81       	ldd	r26, Y+4	; 0x04
 198:	bd 81       	ldd	r27, Y+5	; 0x05
 19a:	88 38       	cpi	r24, 0x88	; 136
 19c:	23 e1       	ldi	r18, 0x13	; 19
 19e:	92 07       	cpc	r25, r18
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	a2 07       	cpc	r26, r18
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	b2 07       	cpc	r27, r18
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <ADC_u8StartConversion_Synch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <ADC_u8StartConversion_Synch+0xe2>
		}
		else
		{
			/*Loop is broken because flag is raised*/
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
 1b0:	a6 e2       	ldi	r26, 0x26	; 38
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e6 e2       	ldi	r30, 0x26	; 38
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8c 93       	st	X, r24

			/*return the reading*/
			/*ADC is finishied, return it to IDLE*/
#if 	(ADC_Resolution == Eight_Bits)
			*Copy_pu8Reading= ADCH;
 1be:	e5 e2       	ldi	r30, 0x25	; 37
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	ef 81       	ldd	r30, Y+7	; 0x07
 1c6:	f8 85       	ldd	r31, Y+8	; 0x08
 1c8:	80 83       	st	Z, r24
			ADC_u8BusyState = IDLE;
 1ca:	10 92 69 00 	sts	0x0069, r1
#endif

		/*return the reading*/
		/*ADC is finishied, return it to IDLE*/
#if 	(ADC_Resolution == Eight_Bits)
		*Copy_pu8Reading= ADCH;
 1ce:	e5 e2       	ldi	r30, 0x25	; 37
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	ef 81       	ldd	r30, Y+7	; 0x07
 1d6:	f8 85       	ldd	r31, Y+8	; 0x08
 1d8:	80 83       	st	Z, r24
		ADC_u8BusyState = IDLE;
 1da:	10 92 69 00 	sts	0x0069, r1
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <ADC_u8StartConversion_Synch+0xf8>
#error "Resolution error"
#endif
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNCTION;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 1e6:	28 96       	adiw	r28, 0x08	; 8
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	08 95       	ret

000001f8 <ADC_u8StartConversion_A_Synch>:

u8 ADC_u8StartConversion_A_Synch(u8 Copy_u8Channel,u8* Copy_pu8Reading,void (*Copy_pvNotificationFunc)(void))
{
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <ADC_u8StartConversion_A_Synch+0x6>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <ADC_u8StartConversion_A_Synch+0x8>
 200:	00 d0       	rcall	.+0      	; 0x202 <ADC_u8StartConversion_A_Synch+0xa>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	8a 83       	std	Y+2, r24	; 0x02
 208:	7c 83       	std	Y+4, r23	; 0x04
 20a:	6b 83       	std	Y+3, r22	; 0x03
 20c:	5e 83       	std	Y+6, r21	; 0x06
 20e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
 210:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
 212:	80 91 69 00 	lds	r24, 0x0069
 216:	88 23       	and	r24, r24
 218:	d1 f5       	brne	.+116    	; 0x28e <ADC_u8StartConversion_A_Synch+0x96>
	{
		if ((Copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	9c 81       	ldd	r25, Y+4	; 0x04
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	21 f0       	breq	.+8      	; 0x22a <ADC_u8StartConversion_A_Synch+0x32>
 222:	8d 81       	ldd	r24, Y+5	; 0x05
 224:	9e 81       	ldd	r25, Y+6	; 0x06
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	19 f4       	brne	.+6      	; 0x230 <ADC_u8StartConversion_A_Synch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	31 c0       	rjmp	.+98     	; 0x292 <ADC_u8StartConversion_A_Synch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being IDLE*/
			ADC_u8BusyState=BUSY;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 69 00 	sts	0x0069, r24

			/*make ISR source: Single channel asynchronous*/
			ADC_u8ISRSource = SINGLE_CHANNEL_ASYNCH;
 236:	10 92 6b 00 	sts	0x006B, r1

			/*initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	90 93 61 00 	sts	0x0061, r25
 242:	80 93 60 00 	sts	0x0060, r24

			/*initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
 246:	8d 81       	ldd	r24, Y+5	; 0x05
 248:	9e 81       	ldd	r25, Y+6	; 0x06
 24a:	90 93 63 00 	sts	0x0063, r25
 24e:	80 93 62 00 	sts	0x0062, r24

			/*clear theMUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
 252:	a7 e2       	ldi	r26, 0x27	; 39
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e7 e2       	ldi	r30, 0x27	; 39
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 7e       	andi	r24, 0xE0	; 224
 25e:	8c 93       	st	X, r24

			/*set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
 260:	a7 e2       	ldi	r26, 0x27	; 39
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e7 e2       	ldi	r30, 0x27	; 39
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	90 81       	ld	r25, Z
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	89 2b       	or	r24, r25
 26e:	8c 93       	st	X, r24
#if (ADC_Conversion == Single_conversion)
			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 270:	a6 e2       	ldi	r26, 0x26	; 38
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	e6 e2       	ldi	r30, 0x26	; 38
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8c 93       	st	X, r24
#endif
			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 27e:	a6 e2       	ldi	r26, 0x26	; 38
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	e6 e2       	ldi	r30, 0x26	; 38
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	8c 93       	st	X, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <ADC_u8StartConversion_A_Synch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNCTION;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 292:	89 81       	ldd	r24, Y+1	; 0x01
}
 294:	26 96       	adiw	r28, 0x06	; 6
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <ADC_u8StartChainAsynch+0x6>
 2ac:	0f 92       	push	r0
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	9b 83       	std	Y+3, r25	; 0x03
 2b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 2b6:	19 82       	std	Y+1, r1	; 0x01

	/*check NULL pointer*/
	if(Copy_Chain == NULL)
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	9b 81       	ldd	r25, Y+3	; 0x03
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	19 f4       	brne	.+6      	; 0x2c6 <ADC_u8StartChainAsynch+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	55 c0       	rjmp	.+170    	; 0x370 <ADC_u8StartChainAsynch+0xca>
	}
	else
	{
		if(ADC_u8BusyState==IDLE)
 2c6:	80 91 69 00 	lds	r24, 0x0069
 2ca:	88 23       	and	r24, r24
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <ADC_u8StartChainAsynch+0x2a>
 2ce:	4e c0       	rjmp	.+156    	; 0x36c <ADC_u8StartChainAsynch+0xc6>
		{
			/*make ADC Busy*/
			ADC_u8BusyState= BUSY;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 69 00 	sts	0x0069, r24

			/*make ISR source: chain Asynchronus*/
			ADC_u8ISRSource = CHAIN_ASYNCH;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 6b 00 	sts	0x006B, r24

			/*Initialize chain channel array*/
			ADC_pu8ChainChannelArr=Copy_Chain->Channel;
 2dc:	ea 81       	ldd	r30, Y+2	; 0x02
 2de:	fb 81       	ldd	r31, Y+3	; 0x03
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	90 93 65 00 	sts	0x0065, r25
 2e8:	80 93 64 00 	sts	0x0064, r24

			/*Initialize result array*/
			ADC_pu16ChainResultArr=Copy_Chain->Result;
 2ec:	ea 81       	ldd	r30, Y+2	; 0x02
 2ee:	fb 81       	ldd	r31, Y+3	; 0x03
 2f0:	82 81       	ldd	r24, Z+2	; 0x02
 2f2:	93 81       	ldd	r25, Z+3	; 0x03
 2f4:	90 93 67 00 	sts	0x0067, r25
 2f8:	80 93 66 00 	sts	0x0066, r24

			/*Initialize chain Size*/
			ADC_u8ChainSize=Copy_Chain->Size;
 2fc:	ea 81       	ldd	r30, Y+2	; 0x02
 2fe:	fb 81       	ldd	r31, Y+3	; 0x03
 300:	84 81       	ldd	r24, Z+4	; 0x04
 302:	80 93 6a 00 	sts	0x006A, r24

			/*Initialize Notification Function*/
			ADC_pvCallBackNotificationFunc= Copy_Chain->NotificationFunc;
 306:	ea 81       	ldd	r30, Y+2	; 0x02
 308:	fb 81       	ldd	r31, Y+3	; 0x03
 30a:	85 81       	ldd	r24, Z+5	; 0x05
 30c:	96 81       	ldd	r25, Z+6	; 0x06
 30e:	90 93 63 00 	sts	0x0063, r25
 312:	80 93 62 00 	sts	0x0062, r24

			/*Initialize Current Conversion Index*/
			ADC_u8ChainConversionIndex=0;
 316:	10 92 68 00 	sts	0x0068, r1

			/*Set required channel (First channel)*/
			ADMUX &= 0b11100000;
 31a:	a7 e2       	ldi	r26, 0x27	; 39
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e7 e2       	ldi	r30, 0x27	; 39
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	80 7e       	andi	r24, 0xE0	; 224
 326:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
 328:	a7 e2       	ldi	r26, 0x27	; 39
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e7 e2       	ldi	r30, 0x27	; 39
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	40 81       	ld	r20, Z
 332:	20 91 64 00 	lds	r18, 0x0064
 336:	30 91 65 00 	lds	r19, 0x0065
 33a:	80 91 68 00 	lds	r24, 0x0068
 33e:	88 2f       	mov	r24, r24
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	e8 0f       	add	r30, r24
 346:	f9 1f       	adc	r31, r25
 348:	80 81       	ld	r24, Z
 34a:	84 2b       	or	r24, r20
 34c:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 34e:	a6 e2       	ldi	r26, 0x26	; 38
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e6 e2       	ldi	r30, 0x26	; 38
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	8c 93       	st	X, r24

			/*Enable conversion complete interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 35c:	a6 e2       	ldi	r26, 0x26	; 38
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e6 e2       	ldi	r30, 0x26	; 38
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	88 60       	ori	r24, 0x08	; 8
 368:	8c 93       	st	X, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <ADC_u8StartChainAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState=BUSY_FUNCTION;
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorState;
 370:	89 81       	ldd	r24, Y+1	; 0x01
}
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <__vector_16>:

void __vector_16 (void)     __attribute__((signal));
void __vector_16 (void)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
 3a8:	80 91 6b 00 	lds	r24, 0x006B
 3ac:	88 23       	and	r24, r24
 3ae:	b9 f4       	brne	.+46     	; 0x3de <__vector_16+0x60>
	{
		/*read ADC result*/
#if 	(ADC_Resolution == Eight_Bits)
		*ADC_pu8Reading= ADCH;
 3b0:	a0 91 60 00 	lds	r26, 0x0060
 3b4:	b0 91 61 00 	lds	r27, 0x0061
 3b8:	e5 e2       	ldi	r30, 0x25	; 37
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8c 93       	st	X, r24
#else
#error "Resolution error"
#endif

		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
 3c0:	10 92 69 00 	sts	0x0069, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
 3c4:	e0 91 62 00 	lds	r30, 0x0062
 3c8:	f0 91 63 00 	lds	r31, 0x0063
 3cc:	09 95       	icall

		/*disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
 3ce:	a6 e2       	ldi	r26, 0x26	; 38
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e6 e2       	ldi	r30, 0x26	; 38
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	87 7f       	andi	r24, 0xF7	; 247
 3da:	8c 93       	st	X, r24
 3dc:	55 c0       	rjmp	.+170    	; 0x488 <__vector_16+0x10a>
	}
	else if(ADC_u8ISRSource == CHAIN_ASYNCH) /*ISR source is chain */
 3de:	80 91 6b 00 	lds	r24, 0x006B
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <__vector_16+0x6a>
 3e6:	50 c0       	rjmp	.+160    	; 0x488 <__vector_16+0x10a>
	{
		/*Read the current conversion*/

#if 	(ADC_Resolution == Eight_Bits)
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex]= ADCH;
 3e8:	20 91 66 00 	lds	r18, 0x0066
 3ec:	30 91 67 00 	lds	r19, 0x0067
 3f0:	80 91 68 00 	lds	r24, 0x0068
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	d9 01       	movw	r26, r18
 3fe:	a8 0f       	add	r26, r24
 400:	b9 1f       	adc	r27, r25
 402:	e5 e2       	ldi	r30, 0x25	; 37
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	88 2f       	mov	r24, r24
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	9c 93       	st	X, r25
 410:	8e 93       	st	-X, r24
#else
#error "Resolution error"
#endif

		/*increment chain index*/
		ADC_u8ChainConversionIndex++;
 412:	80 91 68 00 	lds	r24, 0x0068
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	80 93 68 00 	sts	0x0068, r24

		/*Check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
 41c:	90 91 68 00 	lds	r25, 0x0068
 420:	80 91 6a 00 	lds	r24, 0x006A
 424:	98 17       	cp	r25, r24
 426:	79 f4       	brne	.+30     	; 0x446 <__vector_16+0xc8>
		{
			/*chain is finished*/
			/*ADC is now IDLE*/
			ADC_u8BusyState=IDLE;
 428:	10 92 69 00 	sts	0x0069, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
 42c:	e0 91 62 00 	lds	r30, 0x0062
 430:	f0 91 63 00 	lds	r31, 0x0063
 434:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
 436:	a6 e2       	ldi	r26, 0x26	; 38
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e6 e2       	ldi	r30, 0x26	; 38
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	87 7f       	andi	r24, 0xF7	; 247
 442:	8c 93       	st	X, r24
 444:	21 c0       	rjmp	.+66     	; 0x488 <__vector_16+0x10a>
		}
		else
		{
			/*chain is not finished*/
			/*set new required channel*/
			ADMUX &= 0b11100000;
 446:	a7 e2       	ldi	r26, 0x27	; 39
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e7 e2       	ldi	r30, 0x27	; 39
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	80 7e       	andi	r24, 0xE0	; 224
 452:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
 454:	a7 e2       	ldi	r26, 0x27	; 39
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	e7 e2       	ldi	r30, 0x27	; 39
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	40 81       	ld	r20, Z
 45e:	20 91 64 00 	lds	r18, 0x0064
 462:	30 91 65 00 	lds	r19, 0x0065
 466:	80 91 68 00 	lds	r24, 0x0068
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	e8 0f       	add	r30, r24
 472:	f9 1f       	adc	r31, r25
 474:	80 81       	ld	r24, Z
 476:	84 2b       	or	r24, r20
 478:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 47a:	a6 e2       	ldi	r26, 0x26	; 38
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e6 e2       	ldi	r30, 0x26	; 38
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 64       	ori	r24, 0x40	; 64
 486:	8c 93       	st	X, r24
		}

	}
}
 488:	cf 91       	pop	r28
 48a:	df 91       	pop	r29
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 4ae:	df 93       	push	r29
 4b0:	cf 93       	push	r28
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	28 97       	sbiw	r28, 0x08	; 8
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	8a 83       	std	Y+2, r24	; 0x02
 4c4:	6b 83       	std	Y+3, r22	; 0x03
 4c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 4c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	88 30       	cpi	r24, 0x08	; 8
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <DIO_u8SetPinValue+0x24>
 4d0:	f4 c0       	rjmp	.+488    	; 0x6ba <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 4d2:	8c 81       	ldd	r24, Y+4	; 0x04
 4d4:	88 23       	and	r24, r24
 4d6:	09 f0       	breq	.+2      	; 0x4da <DIO_u8SetPinValue+0x2c>
 4d8:	77 c0       	rjmp	.+238    	; 0x5c8 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	38 87       	std	Y+8, r19	; 0x08
 4e2:	2f 83       	std	Y+7, r18	; 0x07
 4e4:	8f 81       	ldd	r24, Y+7	; 0x07
 4e6:	98 85       	ldd	r25, Y+8	; 0x08
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	91 05       	cpc	r25, r1
 4ec:	59 f1       	breq	.+86     	; 0x544 <DIO_u8SetPinValue+0x96>
 4ee:	2f 81       	ldd	r18, Y+7	; 0x07
 4f0:	38 85       	ldd	r19, Y+8	; 0x08
 4f2:	22 30       	cpi	r18, 0x02	; 2
 4f4:	31 05       	cpc	r19, r1
 4f6:	2c f4       	brge	.+10     	; 0x502 <DIO_u8SetPinValue+0x54>
 4f8:	8f 81       	ldd	r24, Y+7	; 0x07
 4fa:	98 85       	ldd	r25, Y+8	; 0x08
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	69 f0       	breq	.+26     	; 0x51a <DIO_u8SetPinValue+0x6c>
 500:	60 c0       	rjmp	.+192    	; 0x5c2 <DIO_u8SetPinValue+0x114>
 502:	2f 81       	ldd	r18, Y+7	; 0x07
 504:	38 85       	ldd	r19, Y+8	; 0x08
 506:	22 30       	cpi	r18, 0x02	; 2
 508:	31 05       	cpc	r19, r1
 50a:	89 f1       	breq	.+98     	; 0x56e <DIO_u8SetPinValue+0xc0>
 50c:	8f 81       	ldd	r24, Y+7	; 0x07
 50e:	98 85       	ldd	r25, Y+8	; 0x08
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	91 05       	cpc	r25, r1
 514:	09 f4       	brne	.+2      	; 0x518 <DIO_u8SetPinValue+0x6a>
 516:	40 c0       	rjmp	.+128    	; 0x598 <DIO_u8SetPinValue+0xea>
 518:	54 c0       	rjmp	.+168    	; 0x5c2 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 51a:	ab e3       	ldi	r26, 0x3B	; 59
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	eb e3       	ldi	r30, 0x3B	; 59
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8SetPinValue+0x8a>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8SetPinValue+0x86>
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	8c 93       	st	X, r24
 542:	bd c0       	rjmp	.+378    	; 0x6be <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 544:	a8 e3       	ldi	r26, 0x38	; 56
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e8 e3       	ldi	r30, 0x38	; 56
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_u8SetPinValue+0xb4>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_u8SetPinValue+0xb0>
 566:	80 95       	com	r24
 568:	84 23       	and	r24, r20
 56a:	8c 93       	st	X, r24
 56c:	a8 c0       	rjmp	.+336    	; 0x6be <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 56e:	a5 e3       	ldi	r26, 0x35	; 53
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e5 e3       	ldi	r30, 0x35	; 53
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	48 2f       	mov	r20, r24
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 2e       	mov	r0, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_u8SetPinValue+0xde>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_u8SetPinValue+0xda>
 590:	80 95       	com	r24
 592:	84 23       	and	r24, r20
 594:	8c 93       	st	X, r24
 596:	93 c0       	rjmp	.+294    	; 0x6be <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 598:	a2 e3       	ldi	r26, 0x32	; 50
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e2 e3       	ldi	r30, 0x32	; 50
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	48 2f       	mov	r20, r24
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 2e       	mov	r0, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8SetPinValue+0x108>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	0a 94       	dec	r0
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8SetPinValue+0x104>
 5ba:	80 95       	com	r24
 5bc:	84 23       	and	r24, r20
 5be:	8c 93       	st	X, r24
 5c0:	7e c0       	rjmp	.+252    	; 0x6be <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	89 83       	std	Y+1, r24	; 0x01
 5c6:	7b c0       	rjmp	.+246    	; 0x6be <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
 5c8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	09 f0       	breq	.+2      	; 0x5d0 <DIO_u8SetPinValue+0x122>
 5ce:	72 c0       	rjmp	.+228    	; 0x6b4 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	3e 83       	std	Y+6, r19	; 0x06
 5d8:	2d 83       	std	Y+5, r18	; 0x05
 5da:	8d 81       	ldd	r24, Y+5	; 0x05
 5dc:	9e 81       	ldd	r25, Y+6	; 0x06
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	91 05       	cpc	r25, r1
 5e2:	49 f1       	breq	.+82     	; 0x636 <DIO_u8SetPinValue+0x188>
 5e4:	2d 81       	ldd	r18, Y+5	; 0x05
 5e6:	3e 81       	ldd	r19, Y+6	; 0x06
 5e8:	22 30       	cpi	r18, 0x02	; 2
 5ea:	31 05       	cpc	r19, r1
 5ec:	2c f4       	brge	.+10     	; 0x5f8 <DIO_u8SetPinValue+0x14a>
 5ee:	8d 81       	ldd	r24, Y+5	; 0x05
 5f0:	9e 81       	ldd	r25, Y+6	; 0x06
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	61 f0       	breq	.+24     	; 0x60e <DIO_u8SetPinValue+0x160>
 5f6:	5b c0       	rjmp	.+182    	; 0x6ae <DIO_u8SetPinValue+0x200>
 5f8:	2d 81       	ldd	r18, Y+5	; 0x05
 5fa:	3e 81       	ldd	r19, Y+6	; 0x06
 5fc:	22 30       	cpi	r18, 0x02	; 2
 5fe:	31 05       	cpc	r19, r1
 600:	71 f1       	breq	.+92     	; 0x65e <DIO_u8SetPinValue+0x1b0>
 602:	8d 81       	ldd	r24, Y+5	; 0x05
 604:	9e 81       	ldd	r25, Y+6	; 0x06
 606:	83 30       	cpi	r24, 0x03	; 3
 608:	91 05       	cpc	r25, r1
 60a:	e9 f1       	breq	.+122    	; 0x686 <DIO_u8SetPinValue+0x1d8>
 60c:	50 c0       	rjmp	.+160    	; 0x6ae <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 60e:	ab e3       	ldi	r26, 0x3B	; 59
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	eb e3       	ldi	r30, 0x3B	; 59
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	48 2f       	mov	r20, r24
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 2e       	mov	r0, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_u8SetPinValue+0x17e>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_u8SetPinValue+0x17a>
 630:	84 2b       	or	r24, r20
 632:	8c 93       	st	X, r24
 634:	44 c0       	rjmp	.+136    	; 0x6be <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 636:	a8 e3       	ldi	r26, 0x38	; 56
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e8 e3       	ldi	r30, 0x38	; 56
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	48 2f       	mov	r20, r24
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 2e       	mov	r0, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_u8SetPinValue+0x1a6>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_u8SetPinValue+0x1a2>
 658:	84 2b       	or	r24, r20
 65a:	8c 93       	st	X, r24
 65c:	30 c0       	rjmp	.+96     	; 0x6be <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 65e:	a5 e3       	ldi	r26, 0x35	; 53
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e5 e3       	ldi	r30, 0x35	; 53
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 2e       	mov	r0, r18
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_u8SetPinValue+0x1ce>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_u8SetPinValue+0x1ca>
 680:	84 2b       	or	r24, r20
 682:	8c 93       	st	X, r24
 684:	1c c0       	rjmp	.+56     	; 0x6be <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 686:	a2 e3       	ldi	r26, 0x32	; 50
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e2 e3       	ldi	r30, 0x32	; 50
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 2e       	mov	r0, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8SetPinValue+0x1f6>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_u8SetPinValue+0x1f2>
 6a8:	84 2b       	or	r24, r20
 6aa:	8c 93       	st	X, r24
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	89 83       	std	Y+1, r24	; 0x01
 6b2:	05 c0       	rjmp	.+10     	; 0x6be <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
 6be:	89 81       	ldd	r24, Y+1	; 0x01
}
 6c0:	28 96       	adiw	r28, 0x08	; 8
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 6d2:	df 93       	push	r29
 6d4:	cf 93       	push	r28
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <DIO_u8SetPortValue+0x6>
 6d8:	00 d0       	rcall	.+0      	; 0x6da <DIO_u8SetPortValue+0x8>
 6da:	0f 92       	push	r0
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	8a 83       	std	Y+2, r24	; 0x02
 6e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 6e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	84 30       	cpi	r24, 0x04	; 4
 6ea:	a8 f5       	brcc	.+106    	; 0x756 <DIO_u8SetPortValue+0x84>
	{
		switch(Copy_u8Port)
 6ec:	8a 81       	ldd	r24, Y+2	; 0x02
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	3d 83       	std	Y+5, r19	; 0x05
 6f4:	2c 83       	std	Y+4, r18	; 0x04
 6f6:	8c 81       	ldd	r24, Y+4	; 0x04
 6f8:	9d 81       	ldd	r25, Y+5	; 0x05
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	91 05       	cpc	r25, r1
 6fe:	d1 f0       	breq	.+52     	; 0x734 <DIO_u8SetPortValue+0x62>
 700:	2c 81       	ldd	r18, Y+4	; 0x04
 702:	3d 81       	ldd	r19, Y+5	; 0x05
 704:	22 30       	cpi	r18, 0x02	; 2
 706:	31 05       	cpc	r19, r1
 708:	2c f4       	brge	.+10     	; 0x714 <DIO_u8SetPortValue+0x42>
 70a:	8c 81       	ldd	r24, Y+4	; 0x04
 70c:	9d 81       	ldd	r25, Y+5	; 0x05
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	61 f0       	breq	.+24     	; 0x72a <DIO_u8SetPortValue+0x58>
 712:	1f c0       	rjmp	.+62     	; 0x752 <DIO_u8SetPortValue+0x80>
 714:	2c 81       	ldd	r18, Y+4	; 0x04
 716:	3d 81       	ldd	r19, Y+5	; 0x05
 718:	22 30       	cpi	r18, 0x02	; 2
 71a:	31 05       	cpc	r19, r1
 71c:	81 f0       	breq	.+32     	; 0x73e <DIO_u8SetPortValue+0x6c>
 71e:	8c 81       	ldd	r24, Y+4	; 0x04
 720:	9d 81       	ldd	r25, Y+5	; 0x05
 722:	83 30       	cpi	r24, 0x03	; 3
 724:	91 05       	cpc	r25, r1
 726:	81 f0       	breq	.+32     	; 0x748 <DIO_u8SetPortValue+0x76>
 728:	14 c0       	rjmp	.+40     	; 0x752 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 72a:	eb e3       	ldi	r30, 0x3B	; 59
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	80 83       	st	Z, r24
 732:	11 c0       	rjmp	.+34     	; 0x756 <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 734:	e8 e3       	ldi	r30, 0x38	; 56
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	80 83       	st	Z, r24
 73c:	0c c0       	rjmp	.+24     	; 0x756 <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 73e:	e5 e3       	ldi	r30, 0x35	; 53
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	80 83       	st	Z, r24
 746:	07 c0       	rjmp	.+14     	; 0x756 <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 748:	e2 e3       	ldi	r30, 0x32	; 50
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	80 83       	st	Z, r24
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_u8SetPortValue+0x84>
		default: Local_u8ErrorState=1; break;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
 756:	89 81       	ldd	r24, Y+1	; 0x01
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	27 97       	sbiw	r28, 0x07	; 7
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	8a 83       	std	Y+2, r24	; 0x02
 77e:	6b 83       	std	Y+3, r22	; 0x03
 780:	5d 83       	std	Y+5, r21	; 0x05
 782:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 784:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7))
 786:	8c 81       	ldd	r24, Y+4	; 0x04
 788:	9d 81       	ldd	r25, Y+5	; 0x05
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	09 f4       	brne	.+2      	; 0x790 <DIO_u8GetPinValue+0x28>
 78e:	78 c0       	rjmp	.+240    	; 0x880 <__stack+0x21>
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	88 30       	cpi	r24, 0x08	; 8
 794:	08 f0       	brcs	.+2      	; 0x798 <DIO_u8GetPinValue+0x30>
 796:	74 c0       	rjmp	.+232    	; 0x880 <__stack+0x21>
	{
		switch(Copy_u8Port)
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	3f 83       	std	Y+7, r19	; 0x07
 7a0:	2e 83       	std	Y+6, r18	; 0x06
 7a2:	4e 81       	ldd	r20, Y+6	; 0x06
 7a4:	5f 81       	ldd	r21, Y+7	; 0x07
 7a6:	41 30       	cpi	r20, 0x01	; 1
 7a8:	51 05       	cpc	r21, r1
 7aa:	59 f1       	breq	.+86     	; 0x802 <DIO_u8GetPinValue+0x9a>
 7ac:	8e 81       	ldd	r24, Y+6	; 0x06
 7ae:	9f 81       	ldd	r25, Y+7	; 0x07
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	91 05       	cpc	r25, r1
 7b4:	34 f4       	brge	.+12     	; 0x7c2 <DIO_u8GetPinValue+0x5a>
 7b6:	2e 81       	ldd	r18, Y+6	; 0x06
 7b8:	3f 81       	ldd	r19, Y+7	; 0x07
 7ba:	21 15       	cp	r18, r1
 7bc:	31 05       	cpc	r19, r1
 7be:	69 f0       	breq	.+26     	; 0x7da <DIO_u8GetPinValue+0x72>
 7c0:	5c c0       	rjmp	.+184    	; 0x87a <__stack+0x1b>
 7c2:	4e 81       	ldd	r20, Y+6	; 0x06
 7c4:	5f 81       	ldd	r21, Y+7	; 0x07
 7c6:	42 30       	cpi	r20, 0x02	; 2
 7c8:	51 05       	cpc	r21, r1
 7ca:	79 f1       	breq	.+94     	; 0x82a <DIO_u8GetPinValue+0xc2>
 7cc:	8e 81       	ldd	r24, Y+6	; 0x06
 7ce:	9f 81       	ldd	r25, Y+7	; 0x07
 7d0:	83 30       	cpi	r24, 0x03	; 3
 7d2:	91 05       	cpc	r25, r1
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <DIO_u8GetPinValue+0x70>
 7d6:	3d c0       	rjmp	.+122    	; 0x852 <DIO_u8GetPinValue+0xea>
 7d8:	50 c0       	rjmp	.+160    	; 0x87a <__stack+0x1b>
		{
		case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 7da:	e9 e3       	ldi	r30, 0x39	; 57
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	a9 01       	movw	r20, r18
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_u8GetPinValue+0x8a>
 7ee:	55 95       	asr	r21
 7f0:	47 95       	ror	r20
 7f2:	8a 95       	dec	r24
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_u8GetPinValue+0x86>
 7f6:	ca 01       	movw	r24, r20
 7f8:	81 70       	andi	r24, 0x01	; 1
 7fa:	ec 81       	ldd	r30, Y+4	; 0x04
 7fc:	fd 81       	ldd	r31, Y+5	; 0x05
 7fe:	80 83       	st	Z, r24
 800:	41 c0       	rjmp	.+130    	; 0x884 <__stack+0x25>
		case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 802:	e6 e3       	ldi	r30, 0x36	; 54
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	88 2f       	mov	r24, r24
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	a9 01       	movw	r20, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_u8GetPinValue+0xb2>
 816:	55 95       	asr	r21
 818:	47 95       	ror	r20
 81a:	8a 95       	dec	r24
 81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_u8GetPinValue+0xae>
 81e:	ca 01       	movw	r24, r20
 820:	81 70       	andi	r24, 0x01	; 1
 822:	ec 81       	ldd	r30, Y+4	; 0x04
 824:	fd 81       	ldd	r31, Y+5	; 0x05
 826:	80 83       	st	Z, r24
 828:	2d c0       	rjmp	.+90     	; 0x884 <__stack+0x25>
		case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 82a:	e3 e3       	ldi	r30, 0x33	; 51
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	28 2f       	mov	r18, r24
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	8b 81       	ldd	r24, Y+3	; 0x03
 836:	88 2f       	mov	r24, r24
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	a9 01       	movw	r20, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_u8GetPinValue+0xda>
 83e:	55 95       	asr	r21
 840:	47 95       	ror	r20
 842:	8a 95       	dec	r24
 844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_u8GetPinValue+0xd6>
 846:	ca 01       	movw	r24, r20
 848:	81 70       	andi	r24, 0x01	; 1
 84a:	ec 81       	ldd	r30, Y+4	; 0x04
 84c:	fd 81       	ldd	r31, Y+5	; 0x05
 84e:	80 83       	st	Z, r24
 850:	19 c0       	rjmp	.+50     	; 0x884 <__stack+0x25>
		case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 852:	e0 e3       	ldi	r30, 0x30	; 48
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	28 2f       	mov	r18, r24
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	8b 81       	ldd	r24, Y+3	; 0x03
 85e:	88 2f       	mov	r24, r24
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	a9 01       	movw	r20, r18
 864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
 866:	55 95       	asr	r21
 868:	47 95       	ror	r20
 86a:	8a 95       	dec	r24
 86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
 86e:	ca 01       	movw	r24, r20
 870:	81 70       	andi	r24, 0x01	; 1
 872:	ec 81       	ldd	r30, Y+4	; 0x04
 874:	fd 81       	ldd	r31, Y+5	; 0x05
 876:	80 83       	st	Z, r24
 878:	05 c0       	rjmp	.+10     	; 0x884 <__stack+0x25>
		default: Local_u8ErrorState=1; break;
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	89 83       	std	Y+1, r24	; 0x01
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 884:	89 81       	ldd	r24, Y+1	; 0x01

}
 886:	27 96       	adiw	r28, 0x07	; 7
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	0f be       	out	0x3f, r0	; 63
 890:	cd bf       	out	0x3d, r28	; 61
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	08 95       	ret

00000898 <LED_u8TurnOn>:
#include "LED_interface.h"
#include "LED_config.h"
#include "LED_private.h"

u8 LED_u8TurnOn(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8ConnectionType)
{
 898:	df 93       	push	r29
 89a:	cf 93       	push	r28
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	29 97       	sbiw	r28, 0x09	; 9
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	f8 94       	cli
 8a6:	de bf       	out	0x3e, r29	; 62
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	8a 83       	std	Y+2, r24	; 0x02
 8ae:	6b 83       	std	Y+3, r22	; 0x03
 8b0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 8b2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8ConnectionType==LED_COM_AN)
 8b4:	8c 81       	ldd	r24, Y+4	; 0x04
 8b6:	88 23       	and	r24, r24
 8b8:	09 f0       	breq	.+2      	; 0x8bc <LED_u8TurnOn+0x24>
 8ba:	42 c0       	rjmp	.+132    	; 0x940 <LED_u8TurnOn+0xa8>
	{
		switch(Copy_u8Port)
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	28 2f       	mov	r18, r24
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	39 87       	std	Y+9, r19	; 0x09
 8c4:	28 87       	std	Y+8, r18	; 0x08
 8c6:	88 85       	ldd	r24, Y+8	; 0x08
 8c8:	99 85       	ldd	r25, Y+9	; 0x09
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	91 05       	cpc	r25, r1
 8ce:	e9 f0       	breq	.+58     	; 0x90a <LED_u8TurnOn+0x72>
 8d0:	28 85       	ldd	r18, Y+8	; 0x08
 8d2:	39 85       	ldd	r19, Y+9	; 0x09
 8d4:	22 30       	cpi	r18, 0x02	; 2
 8d6:	31 05       	cpc	r19, r1
 8d8:	2c f4       	brge	.+10     	; 0x8e4 <LED_u8TurnOn+0x4c>
 8da:	88 85       	ldd	r24, Y+8	; 0x08
 8dc:	99 85       	ldd	r25, Y+9	; 0x09
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	61 f0       	breq	.+24     	; 0x8fa <LED_u8TurnOn+0x62>
 8e2:	2b c0       	rjmp	.+86     	; 0x93a <LED_u8TurnOn+0xa2>
 8e4:	28 85       	ldd	r18, Y+8	; 0x08
 8e6:	39 85       	ldd	r19, Y+9	; 0x09
 8e8:	22 30       	cpi	r18, 0x02	; 2
 8ea:	31 05       	cpc	r19, r1
 8ec:	b1 f0       	breq	.+44     	; 0x91a <LED_u8TurnOn+0x82>
 8ee:	88 85       	ldd	r24, Y+8	; 0x08
 8f0:	99 85       	ldd	r25, Y+9	; 0x09
 8f2:	83 30       	cpi	r24, 0x03	; 3
 8f4:	91 05       	cpc	r25, r1
 8f6:	c9 f0       	breq	.+50     	; 0x92a <LED_u8TurnOn+0x92>
 8f8:	20 c0       	rjmp	.+64     	; 0x93a <LED_u8TurnOn+0xa2>
		{
		case DIO_u8PORTA: DIO_u8SetPinValue(PORTA,Copy_u8Pin,DIO_u8PIN_LOW); break;
 8fa:	eb e3       	ldi	r30, 0x3B	; 59
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	6b 81       	ldd	r22, Y+3	; 0x03
 902:	40 e0       	ldi	r20, 0x00	; 0
 904:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 908:	66 c0       	rjmp	.+204    	; 0x9d6 <LED_u8TurnOn+0x13e>
		case DIO_u8PORTB: DIO_u8SetPinValue(PORTB,Copy_u8Pin,DIO_u8PIN_LOW); break;
 90a:	e8 e3       	ldi	r30, 0x38	; 56
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	6b 81       	ldd	r22, Y+3	; 0x03
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 918:	5e c0       	rjmp	.+188    	; 0x9d6 <LED_u8TurnOn+0x13e>
		case DIO_u8PORTC: DIO_u8SetPinValue(PORTC,Copy_u8Pin,DIO_u8PIN_LOW); break;
 91a:	e5 e3       	ldi	r30, 0x35	; 53
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	6b 81       	ldd	r22, Y+3	; 0x03
 922:	40 e0       	ldi	r20, 0x00	; 0
 924:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 928:	56 c0       	rjmp	.+172    	; 0x9d6 <LED_u8TurnOn+0x13e>
		case DIO_u8PORTD: DIO_u8SetPinValue(PORTD,Copy_u8Pin,DIO_u8PIN_LOW); break;
 92a:	e2 e3       	ldi	r30, 0x32	; 50
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	6b 81       	ldd	r22, Y+3	; 0x03
 932:	40 e0       	ldi	r20, 0x00	; 0
 934:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 938:	4e c0       	rjmp	.+156    	; 0x9d6 <LED_u8TurnOn+0x13e>
		default: Local_u8ErrorState=1; break;
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	89 83       	std	Y+1, r24	; 0x01
 93e:	4b c0       	rjmp	.+150    	; 0x9d6 <LED_u8TurnOn+0x13e>
		}
	}
	else if(Copy_u8ConnectionType==LED_COM_CA)
 940:	8c 81       	ldd	r24, Y+4	; 0x04
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	09 f0       	breq	.+2      	; 0x948 <LED_u8TurnOn+0xb0>
 946:	42 c0       	rjmp	.+132    	; 0x9cc <LED_u8TurnOn+0x134>
	{
		switch(Copy_u8Port)
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	28 2f       	mov	r18, r24
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	3f 83       	std	Y+7, r19	; 0x07
 950:	2e 83       	std	Y+6, r18	; 0x06
 952:	8e 81       	ldd	r24, Y+6	; 0x06
 954:	9f 81       	ldd	r25, Y+7	; 0x07
 956:	81 30       	cpi	r24, 0x01	; 1
 958:	91 05       	cpc	r25, r1
 95a:	e9 f0       	breq	.+58     	; 0x996 <LED_u8TurnOn+0xfe>
 95c:	2e 81       	ldd	r18, Y+6	; 0x06
 95e:	3f 81       	ldd	r19, Y+7	; 0x07
 960:	22 30       	cpi	r18, 0x02	; 2
 962:	31 05       	cpc	r19, r1
 964:	2c f4       	brge	.+10     	; 0x970 <LED_u8TurnOn+0xd8>
 966:	8e 81       	ldd	r24, Y+6	; 0x06
 968:	9f 81       	ldd	r25, Y+7	; 0x07
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	61 f0       	breq	.+24     	; 0x986 <LED_u8TurnOn+0xee>
 96e:	2b c0       	rjmp	.+86     	; 0x9c6 <LED_u8TurnOn+0x12e>
 970:	2e 81       	ldd	r18, Y+6	; 0x06
 972:	3f 81       	ldd	r19, Y+7	; 0x07
 974:	22 30       	cpi	r18, 0x02	; 2
 976:	31 05       	cpc	r19, r1
 978:	b1 f0       	breq	.+44     	; 0x9a6 <LED_u8TurnOn+0x10e>
 97a:	8e 81       	ldd	r24, Y+6	; 0x06
 97c:	9f 81       	ldd	r25, Y+7	; 0x07
 97e:	83 30       	cpi	r24, 0x03	; 3
 980:	91 05       	cpc	r25, r1
 982:	c9 f0       	breq	.+50     	; 0x9b6 <LED_u8TurnOn+0x11e>
 984:	20 c0       	rjmp	.+64     	; 0x9c6 <LED_u8TurnOn+0x12e>
		{
		case DIO_u8PORTA: DIO_u8SetPinValue(PORTA,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 986:	eb e3       	ldi	r30, 0x3B	; 59
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	6b 81       	ldd	r22, Y+3	; 0x03
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 994:	20 c0       	rjmp	.+64     	; 0x9d6 <LED_u8TurnOn+0x13e>
		case DIO_u8PORTB: DIO_u8SetPinValue(PORTB,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 996:	e8 e3       	ldi	r30, 0x38	; 56
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	80 81       	ld	r24, Z
 99c:	6b 81       	ldd	r22, Y+3	; 0x03
 99e:	41 e0       	ldi	r20, 0x01	; 1
 9a0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 9a4:	18 c0       	rjmp	.+48     	; 0x9d6 <LED_u8TurnOn+0x13e>
		case DIO_u8PORTC: DIO_u8SetPinValue(PORTC,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 9a6:	e5 e3       	ldi	r30, 0x35	; 53
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	6b 81       	ldd	r22, Y+3	; 0x03
 9ae:	41 e0       	ldi	r20, 0x01	; 1
 9b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 9b4:	10 c0       	rjmp	.+32     	; 0x9d6 <LED_u8TurnOn+0x13e>
		case DIO_u8PORTD: DIO_u8SetPinValue(PORTD,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 9b6:	e2 e3       	ldi	r30, 0x32	; 50
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	6b 81       	ldd	r22, Y+3	; 0x03
 9be:	41 e0       	ldi	r20, 0x01	; 1
 9c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <LED_u8TurnOn+0x13e>
		default: Local_u8ErrorState=1; break;
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	89 83       	std	Y+1, r24	; 0x01
 9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <LED_u8TurnOn+0x13e>
		}
	}
	else
	{
		return Local_u8ErrorState=1;
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	89 83       	std	Y+1, r24	; 0x01
 9d0:	99 81       	ldd	r25, Y+1	; 0x01
 9d2:	9d 83       	std	Y+5, r25	; 0x05
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <LED_u8TurnOn+0x142>
	}

	return Local_u8ErrorState;
 9d6:	29 81       	ldd	r18, Y+1	; 0x01
 9d8:	2d 83       	std	Y+5, r18	; 0x05
 9da:	8d 81       	ldd	r24, Y+5	; 0x05

}
 9dc:	29 96       	adiw	r28, 0x09	; 9
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	cf 91       	pop	r28
 9ea:	df 91       	pop	r29
 9ec:	08 95       	ret

000009ee <LED_u8TurnOff>:


u8 LED_u8TurnOff(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8ConnectionType)
{
 9ee:	df 93       	push	r29
 9f0:	cf 93       	push	r28
 9f2:	cd b7       	in	r28, 0x3d	; 61
 9f4:	de b7       	in	r29, 0x3e	; 62
 9f6:	29 97       	sbiw	r28, 0x09	; 9
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	f8 94       	cli
 9fc:	de bf       	out	0x3e, r29	; 62
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	cd bf       	out	0x3d, r28	; 61
 a02:	8a 83       	std	Y+2, r24	; 0x02
 a04:	6b 83       	std	Y+3, r22	; 0x03
 a06:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 a08:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8ConnectionType==LED_COM_AN)
 a0a:	8c 81       	ldd	r24, Y+4	; 0x04
 a0c:	88 23       	and	r24, r24
 a0e:	09 f0       	breq	.+2      	; 0xa12 <LED_u8TurnOff+0x24>
 a10:	42 c0       	rjmp	.+132    	; 0xa96 <LED_u8TurnOff+0xa8>
	{
		switch(Copy_u8Port)
 a12:	8a 81       	ldd	r24, Y+2	; 0x02
 a14:	28 2f       	mov	r18, r24
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	39 87       	std	Y+9, r19	; 0x09
 a1a:	28 87       	std	Y+8, r18	; 0x08
 a1c:	88 85       	ldd	r24, Y+8	; 0x08
 a1e:	99 85       	ldd	r25, Y+9	; 0x09
 a20:	81 30       	cpi	r24, 0x01	; 1
 a22:	91 05       	cpc	r25, r1
 a24:	e9 f0       	breq	.+58     	; 0xa60 <LED_u8TurnOff+0x72>
 a26:	28 85       	ldd	r18, Y+8	; 0x08
 a28:	39 85       	ldd	r19, Y+9	; 0x09
 a2a:	22 30       	cpi	r18, 0x02	; 2
 a2c:	31 05       	cpc	r19, r1
 a2e:	2c f4       	brge	.+10     	; 0xa3a <LED_u8TurnOff+0x4c>
 a30:	88 85       	ldd	r24, Y+8	; 0x08
 a32:	99 85       	ldd	r25, Y+9	; 0x09
 a34:	00 97       	sbiw	r24, 0x00	; 0
 a36:	61 f0       	breq	.+24     	; 0xa50 <LED_u8TurnOff+0x62>
 a38:	2b c0       	rjmp	.+86     	; 0xa90 <LED_u8TurnOff+0xa2>
 a3a:	28 85       	ldd	r18, Y+8	; 0x08
 a3c:	39 85       	ldd	r19, Y+9	; 0x09
 a3e:	22 30       	cpi	r18, 0x02	; 2
 a40:	31 05       	cpc	r19, r1
 a42:	b1 f0       	breq	.+44     	; 0xa70 <LED_u8TurnOff+0x82>
 a44:	88 85       	ldd	r24, Y+8	; 0x08
 a46:	99 85       	ldd	r25, Y+9	; 0x09
 a48:	83 30       	cpi	r24, 0x03	; 3
 a4a:	91 05       	cpc	r25, r1
 a4c:	c9 f0       	breq	.+50     	; 0xa80 <LED_u8TurnOff+0x92>
 a4e:	20 c0       	rjmp	.+64     	; 0xa90 <LED_u8TurnOff+0xa2>
		{
		case DIO_u8PORTA: DIO_u8SetPinValue(PORTA,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 a50:	eb e3       	ldi	r30, 0x3B	; 59
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	80 81       	ld	r24, Z
 a56:	6b 81       	ldd	r22, Y+3	; 0x03
 a58:	41 e0       	ldi	r20, 0x01	; 1
 a5a:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 a5e:	66 c0       	rjmp	.+204    	; 0xb2c <LED_u8TurnOff+0x13e>
		case DIO_u8PORTB: DIO_u8SetPinValue(PORTB,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 a60:	e8 e3       	ldi	r30, 0x38	; 56
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	80 81       	ld	r24, Z
 a66:	6b 81       	ldd	r22, Y+3	; 0x03
 a68:	41 e0       	ldi	r20, 0x01	; 1
 a6a:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 a6e:	5e c0       	rjmp	.+188    	; 0xb2c <LED_u8TurnOff+0x13e>
		case DIO_u8PORTC: DIO_u8SetPinValue(PORTC,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 a70:	e5 e3       	ldi	r30, 0x35	; 53
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
 a76:	6b 81       	ldd	r22, Y+3	; 0x03
 a78:	41 e0       	ldi	r20, 0x01	; 1
 a7a:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 a7e:	56 c0       	rjmp	.+172    	; 0xb2c <LED_u8TurnOff+0x13e>
		case DIO_u8PORTD: DIO_u8SetPinValue(PORTD,Copy_u8Pin,DIO_u8PIN_HIGH); break;
 a80:	e2 e3       	ldi	r30, 0x32	; 50
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	80 81       	ld	r24, Z
 a86:	6b 81       	ldd	r22, Y+3	; 0x03
 a88:	41 e0       	ldi	r20, 0x01	; 1
 a8a:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 a8e:	4e c0       	rjmp	.+156    	; 0xb2c <LED_u8TurnOff+0x13e>
		default: Local_u8ErrorState=1; break;
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	89 83       	std	Y+1, r24	; 0x01
 a94:	4b c0       	rjmp	.+150    	; 0xb2c <LED_u8TurnOff+0x13e>
		}
	}
	else if(Copy_u8ConnectionType==LED_COM_CA)
 a96:	8c 81       	ldd	r24, Y+4	; 0x04
 a98:	81 30       	cpi	r24, 0x01	; 1
 a9a:	09 f0       	breq	.+2      	; 0xa9e <LED_u8TurnOff+0xb0>
 a9c:	42 c0       	rjmp	.+132    	; 0xb22 <LED_u8TurnOff+0x134>
	{
		switch(Copy_u8Port)
 a9e:	8a 81       	ldd	r24, Y+2	; 0x02
 aa0:	28 2f       	mov	r18, r24
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	3f 83       	std	Y+7, r19	; 0x07
 aa6:	2e 83       	std	Y+6, r18	; 0x06
 aa8:	8e 81       	ldd	r24, Y+6	; 0x06
 aaa:	9f 81       	ldd	r25, Y+7	; 0x07
 aac:	81 30       	cpi	r24, 0x01	; 1
 aae:	91 05       	cpc	r25, r1
 ab0:	e9 f0       	breq	.+58     	; 0xaec <LED_u8TurnOff+0xfe>
 ab2:	2e 81       	ldd	r18, Y+6	; 0x06
 ab4:	3f 81       	ldd	r19, Y+7	; 0x07
 ab6:	22 30       	cpi	r18, 0x02	; 2
 ab8:	31 05       	cpc	r19, r1
 aba:	2c f4       	brge	.+10     	; 0xac6 <LED_u8TurnOff+0xd8>
 abc:	8e 81       	ldd	r24, Y+6	; 0x06
 abe:	9f 81       	ldd	r25, Y+7	; 0x07
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	61 f0       	breq	.+24     	; 0xadc <LED_u8TurnOff+0xee>
 ac4:	2b c0       	rjmp	.+86     	; 0xb1c <LED_u8TurnOff+0x12e>
 ac6:	2e 81       	ldd	r18, Y+6	; 0x06
 ac8:	3f 81       	ldd	r19, Y+7	; 0x07
 aca:	22 30       	cpi	r18, 0x02	; 2
 acc:	31 05       	cpc	r19, r1
 ace:	b1 f0       	breq	.+44     	; 0xafc <LED_u8TurnOff+0x10e>
 ad0:	8e 81       	ldd	r24, Y+6	; 0x06
 ad2:	9f 81       	ldd	r25, Y+7	; 0x07
 ad4:	83 30       	cpi	r24, 0x03	; 3
 ad6:	91 05       	cpc	r25, r1
 ad8:	c9 f0       	breq	.+50     	; 0xb0c <LED_u8TurnOff+0x11e>
 ada:	20 c0       	rjmp	.+64     	; 0xb1c <LED_u8TurnOff+0x12e>
		{
		case DIO_u8PORTA: DIO_u8SetPinValue(PORTA,Copy_u8Pin,DIO_u8PIN_LOW); break;
 adc:	eb e3       	ldi	r30, 0x3B	; 59
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	80 81       	ld	r24, Z
 ae2:	6b 81       	ldd	r22, Y+3	; 0x03
 ae4:	40 e0       	ldi	r20, 0x00	; 0
 ae6:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 aea:	20 c0       	rjmp	.+64     	; 0xb2c <LED_u8TurnOff+0x13e>
		case DIO_u8PORTB: DIO_u8SetPinValue(PORTB,Copy_u8Pin,DIO_u8PIN_LOW); break;
 aec:	e8 e3       	ldi	r30, 0x38	; 56
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	80 81       	ld	r24, Z
 af2:	6b 81       	ldd	r22, Y+3	; 0x03
 af4:	40 e0       	ldi	r20, 0x00	; 0
 af6:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 afa:	18 c0       	rjmp	.+48     	; 0xb2c <LED_u8TurnOff+0x13e>
		case DIO_u8PORTC: DIO_u8SetPinValue(PORTC,Copy_u8Pin,DIO_u8PIN_LOW); break;
 afc:	e5 e3       	ldi	r30, 0x35	; 53
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	6b 81       	ldd	r22, Y+3	; 0x03
 b04:	40 e0       	ldi	r20, 0x00	; 0
 b06:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 b0a:	10 c0       	rjmp	.+32     	; 0xb2c <LED_u8TurnOff+0x13e>
		case DIO_u8PORTD: DIO_u8SetPinValue(PORTD,Copy_u8Pin,DIO_u8PIN_LOW); break;
 b0c:	e2 e3       	ldi	r30, 0x32	; 50
 b0e:	f0 e0       	ldi	r31, 0x00	; 0
 b10:	80 81       	ld	r24, Z
 b12:	6b 81       	ldd	r22, Y+3	; 0x03
 b14:	40 e0       	ldi	r20, 0x00	; 0
 b16:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPinValue>
 b1a:	08 c0       	rjmp	.+16     	; 0xb2c <LED_u8TurnOff+0x13e>
		default: Local_u8ErrorState=1; break;
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	89 83       	std	Y+1, r24	; 0x01
 b20:	05 c0       	rjmp	.+10     	; 0xb2c <LED_u8TurnOff+0x13e>
		}
	}
	else
	{
		return Local_u8ErrorState=1;
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	89 83       	std	Y+1, r24	; 0x01
 b26:	99 81       	ldd	r25, Y+1	; 0x01
 b28:	9d 83       	std	Y+5, r25	; 0x05
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <LED_u8TurnOff+0x142>
	}


	return Local_u8ErrorState;
 b2c:	29 81       	ldd	r18, Y+1	; 0x01
 b2e:	2d 83       	std	Y+5, r18	; 0x05
 b30:	8d 81       	ldd	r24, Y+5	; 0x05
}
 b32:	29 96       	adiw	r28, 0x09	; 9
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	de bf       	out	0x3e, r29	; 62
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	cd bf       	out	0x3d, r28	; 61
 b3e:	cf 91       	pop	r28
 b40:	df 91       	pop	r29
 b42:	08 95       	ret

00000b44 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
 b44:	df 93       	push	r29
 b46:	cf 93       	push	r28
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
 b4c:	ea e3       	ldi	r30, 0x3A	; 58
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
 b54:	e7 e3       	ldi	r30, 0x37	; 55
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	10 82       	st	Z, r1
    DDRC=PORTC_DIR;
 b5a:	e4 e3       	ldi	r30, 0x34	; 52
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	10 82       	st	Z, r1
    DDRD=PORTD_DIR;
 b60:	e1 e3       	ldi	r30, 0x31	; 49
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	10 82       	st	Z, r1

    PORTA=PORTA_INITIAL_VALUE;
 b66:	eb e3       	ldi	r30, 0x3B	; 59
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	10 82       	st	Z, r1
    PORTB=PORTB_INITIAL_VALUE;
 b6c:	e8 e3       	ldi	r30, 0x38	; 56
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	10 82       	st	Z, r1
    PORTC=PORTC_INITIAL_VALUE;
 b72:	e5 e3       	ldi	r30, 0x35	; 53
 b74:	f0 e0       	ldi	r31, 0x00	; 0
 b76:	10 82       	st	Z, r1
    PORTD=PORTD_INITIAL_VALUE;
 b78:	e2 e3       	ldi	r30, 0x32	; 50
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	84 e0       	ldi	r24, 0x04	; 4
 b7e:	80 83       	st	Z, r24
}
 b80:	cf 91       	pop	r28
 b82:	df 91       	pop	r29
 b84:	08 95       	ret

00000b86 <main>:
#include "PORT_interface.h"
#include "ADC_interface.h"
#include "LED_interface.h"

int main(void)
{
 b86:	df 93       	push	r29
 b88:	cf 93       	push	r28
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 b8e:	0e 94 a2 05 	call	0xb44	; 0xb44 <PORT_voidInit>
	ADC_voidInit();
 b92:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_voidInit>
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <main+0x10>

00000b98 <_exit>:
 b98:	f8 94       	cli

00000b9a <__stop_program>:
 b9a:	ff cf       	rjmp	.-2      	; 0xb9a <__stop_program>
