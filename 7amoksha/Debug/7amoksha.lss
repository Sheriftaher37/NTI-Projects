
7amoksha.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002282  00002316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800078  00800078  0000232e  2**0
                  ALLOC
  3 .stab         00001c98  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dbb  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000094cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <main>
      8a:	0c 94 3f 11 	jmp	0x227e	; 0x227e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8 ADC_u8ISRSource;

u8 ADC_u8BusyState = IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set voltage refrence selection*/

	ADMUX &= 0b0011111;
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 71       	andi	r24, 0x1F	; 31
     b5a:	8c 93       	st	X, r24
	ADMUX|= ADC_Refrence_Seletion;
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 67       	ori	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

	/*set left agdjust result*/
#if (ADC_Resolution == Eight_Bits)
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#else
#error "set resolution error"
#endif

	/*set prescaler*/
	ADCSRA &= 0b11111000;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA |= ADC_Prescaler;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

	/*set conversion mode*/
#if (ADC_Conversion == Single_conversion)
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8c 93       	st	X, r24
#else
#error	"Converion set error"
#endif

	/*enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversion_Synch>:

u8 ADC_u8StartConversion_Synch(u8 Copy_u8Channel,u8* Copy_pu8Reading)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bd0:	1a 82       	std	Y+2, r1	; 0x02
     bd2:	1b 82       	std	Y+3, r1	; 0x03
     bd4:	1c 82       	std	Y+4, r1	; 0x04
     bd6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     bd8:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     bda:	80 91 81 00 	lds	r24, 0x0081
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <ADC_u8StartConversion_Synch+0x2e>
     be2:	63 c0       	rjmp	.+198    	; 0xcaa <ADC_u8StartConversion_Synch+0xf4>
	{
		/*ADC is now busy*/
		ADC_u8BusyState = BUSY;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 81 00 	sts	0x0081, r24
		/*clear theMUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 7e       	andi	r24, 0xE0	; 224
     bf6:	8c 93       	st	X, r24

		/*set the required channel into the MUX bits*/
		ADMUX |= Copy_u8Channel;
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	89 2b       	or	r24, r25
     c06:	8c 93       	st	X, r24

#if (ADC_Conversion == Single_conversion)
		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c08:	a6 e2       	ldi	r26, 0x26	; 38
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e6 e2       	ldi	r30, 0x26	; 38
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	8c 93       	st	X, r24
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <ADC_u8StartConversion_Synch+0x78>

		/*polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	ac 81       	ldd	r26, Y+4	; 0x04
     c1e:	bd 81       	ldd	r27, Y+5	; 0x05
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	a1 1d       	adc	r26, r1
     c24:	b1 1d       	adc	r27, r1
     c26:	8a 83       	std	Y+2, r24	; 0x02
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	ac 83       	std	Y+4, r26	; 0x04
     c2c:	bd 83       	std	Y+5, r27	; 0x05
#if (ADC_Conversion == Single_conversion)
		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
     c2e:	e6 e2       	ldi	r30, 0x26	; 38
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	82 95       	swap	r24
     c36:	8f 70       	andi	r24, 0x0F	; 15
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	61 f4       	brne	.+24     	; 0xc5c <ADC_u8StartConversion_Synch+0xa6>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	ac 81       	ldd	r26, Y+4	; 0x04
     c4a:	bd 81       	ldd	r27, Y+5	; 0x05
     c4c:	88 38       	cpi	r24, 0x88	; 136
     c4e:	23 e1       	ldi	r18, 0x13	; 19
     c50:	92 07       	cpc	r25, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	a2 07       	cpc	r26, r18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	b2 07       	cpc	r27, r18
     c5a:	f1 f6       	brne	.-68     	; 0xc18 <ADC_u8StartConversion_Synch+0x62>
		{
			Local_u32Counter++;
		}
		if (Local_u32Counter== ADC_u32TIMEOUT)
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	ac 81       	ldd	r26, Y+4	; 0x04
     c62:	bd 81       	ldd	r27, Y+5	; 0x05
     c64:	88 38       	cpi	r24, 0x88	; 136
     c66:	23 e1       	ldi	r18, 0x13	; 19
     c68:	92 07       	cpc	r25, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	19 f4       	brne	.+6      	; 0xc7a <ADC_u8StartConversion_Synch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	0f c0       	rjmp	.+30     	; 0xc98 <ADC_u8StartConversion_Synch+0xe2>
		}
		else
		{
			/*Loop is broken because flag is raised*/
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c7a:	a6 e2       	ldi	r26, 0x26	; 38
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	8c 93       	st	X, r24

			/*return the reading*/
			/*ADC is finishied, return it to IDLE*/
#if 	(ADC_Resolution == Eight_Bits)
			*Copy_pu8Reading= ADCH;
     c88:	e5 e2       	ldi	r30, 0x25	; 37
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	ef 81       	ldd	r30, Y+7	; 0x07
     c90:	f8 85       	ldd	r31, Y+8	; 0x08
     c92:	80 83       	st	Z, r24
			ADC_u8BusyState = IDLE;
     c94:	10 92 81 00 	sts	0x0081, r1
#endif

		/*return the reading*/
		/*ADC is finishied, return it to IDLE*/
#if 	(ADC_Resolution == Eight_Bits)
		*Copy_pu8Reading= ADCH;
     c98:	e5 e2       	ldi	r30, 0x25	; 37
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	ef 81       	ldd	r30, Y+7	; 0x07
     ca0:	f8 85       	ldd	r31, Y+8	; 0x08
     ca2:	80 83       	st	Z, r24
		ADC_u8BusyState = IDLE;
     ca4:	10 92 81 00 	sts	0x0081, r1
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <ADC_u8StartConversion_Synch+0xf8>
#error "Resolution error"
#endif
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNCTION;
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
}
     cb0:	28 96       	adiw	r28, 0x08	; 8
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <ADC_u8StartConversion_A_Synch>:

u8 ADC_u8StartConversion_A_Synch(u8 Copy_u8Channel,u8* Copy_pu8Reading,void (*Copy_pvNotificationFunc)(void))
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <ADC_u8StartConversion_A_Synch+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <ADC_u8StartConversion_A_Synch+0x8>
     cca:	00 d0       	rcall	.+0      	; 0xccc <ADC_u8StartConversion_A_Synch+0xa>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	8a 83       	std	Y+2, r24	; 0x02
     cd2:	7c 83       	std	Y+4, r23	; 0x04
     cd4:	6b 83       	std	Y+3, r22	; 0x03
     cd6:	5e 83       	std	Y+6, r21	; 0x06
     cd8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     cda:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     cdc:	80 91 81 00 	lds	r24, 0x0081
     ce0:	88 23       	and	r24, r24
     ce2:	d1 f5       	brne	.+116    	; 0xd58 <ADC_u8StartConversion_A_Synch+0x96>
	{
		if ((Copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	21 f0       	breq	.+8      	; 0xcf4 <ADC_u8StartConversion_A_Synch+0x32>
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	19 f4       	brne	.+6      	; 0xcfa <ADC_u8StartConversion_A_Synch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	31 c0       	rjmp	.+98     	; 0xd5c <ADC_u8StartConversion_A_Synch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being IDLE*/
			ADC_u8BusyState=BUSY;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 81 00 	sts	0x0081, r24

			/*make ISR source: Single channel asynchronous*/
			ADC_u8ISRSource = SINGLE_CHANNEL_ASYNCH;
     d00:	10 92 83 00 	sts	0x0083, r1

			/*initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	90 93 79 00 	sts	0x0079, r25
     d0c:	80 93 78 00 	sts	0x0078, r24

			/*initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	9e 81       	ldd	r25, Y+6	; 0x06
     d14:	90 93 7b 00 	sts	0x007B, r25
     d18:	80 93 7a 00 	sts	0x007A, r24

			/*clear theMUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	8c 93       	st	X, r24

			/*set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24
#if (ADC_Conversion == Single_conversion)
			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24
#endif
			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	8c 93       	st	X, r24
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <ADC_u8StartConversion_A_Synch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNCTION;
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5e:	26 96       	adiw	r28, 0x06	; 6
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <ADC_u8StartChainAsynch+0x6>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9b 83       	std	Y+3, r25	; 0x03
     d7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     d80:	19 82       	std	Y+1, r1	; 0x01

	/*check NULL pointer*/
	if(Copy_Chain == NULL)
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	9b 81       	ldd	r25, Y+3	; 0x03
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	19 f4       	brne	.+6      	; 0xd90 <ADC_u8StartChainAsynch+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	55 c0       	rjmp	.+170    	; 0xe3a <ADC_u8StartChainAsynch+0xca>
	}
	else
	{
		if(ADC_u8BusyState==IDLE)
     d90:	80 91 81 00 	lds	r24, 0x0081
     d94:	88 23       	and	r24, r24
     d96:	09 f0       	breq	.+2      	; 0xd9a <ADC_u8StartChainAsynch+0x2a>
     d98:	4e c0       	rjmp	.+156    	; 0xe36 <ADC_u8StartChainAsynch+0xc6>
		{
			/*make ADC Busy*/
			ADC_u8BusyState= BUSY;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 81 00 	sts	0x0081, r24

			/*make ISR source: chain Asynchronus*/
			ADC_u8ISRSource = CHAIN_ASYNCH;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 83 00 	sts	0x0083, r24

			/*Initialize chain channel array*/
			ADC_pu8ChainChannelArr=Copy_Chain->Channel;
     da6:	ea 81       	ldd	r30, Y+2	; 0x02
     da8:	fb 81       	ldd	r31, Y+3	; 0x03
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	90 93 7d 00 	sts	0x007D, r25
     db2:	80 93 7c 00 	sts	0x007C, r24

			/*Initialize result array*/
			ADC_pu16ChainResultArr=Copy_Chain->Result;
     db6:	ea 81       	ldd	r30, Y+2	; 0x02
     db8:	fb 81       	ldd	r31, Y+3	; 0x03
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	90 93 7f 00 	sts	0x007F, r25
     dc2:	80 93 7e 00 	sts	0x007E, r24

			/*Initialize chain Size*/
			ADC_u8ChainSize=Copy_Chain->Size;
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	80 93 82 00 	sts	0x0082, r24

			/*Initialize Notification Function*/
			ADC_pvCallBackNotificationFunc= Copy_Chain->NotificationFunc;
     dd0:	ea 81       	ldd	r30, Y+2	; 0x02
     dd2:	fb 81       	ldd	r31, Y+3	; 0x03
     dd4:	85 81       	ldd	r24, Z+5	; 0x05
     dd6:	96 81       	ldd	r25, Z+6	; 0x06
     dd8:	90 93 7b 00 	sts	0x007B, r25
     ddc:	80 93 7a 00 	sts	0x007A, r24

			/*Initialize Current Conversion Index*/
			ADC_u8ChainConversionIndex=0;
     de0:	10 92 80 00 	sts	0x0080, r1

			/*Set required channel (First channel)*/
			ADMUX &= 0b11100000;
     de4:	a7 e2       	ldi	r26, 0x27	; 39
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e7 e2       	ldi	r30, 0x27	; 39
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 7e       	andi	r24, 0xE0	; 224
     df0:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     df2:	a7 e2       	ldi	r26, 0x27	; 39
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e7 e2       	ldi	r30, 0x27	; 39
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	40 81       	ld	r20, Z
     dfc:	20 91 7c 00 	lds	r18, 0x007C
     e00:	30 91 7d 00 	lds	r19, 0x007D
     e04:	80 91 80 00 	lds	r24, 0x0080
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	e8 0f       	add	r30, r24
     e10:	f9 1f       	adc	r31, r25
     e12:	80 81       	ld	r24, Z
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e18:	a6 e2       	ldi	r26, 0x26	; 38
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e6 e2       	ldi	r30, 0x26	; 38
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 64       	ori	r24, 0x40	; 64
     e24:	8c 93       	st	X, r24

			/*Enable conversion complete interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e26:	a6 e2       	ldi	r26, 0x26	; 38
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e6 e2       	ldi	r30, 0x26	; 38
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	8c 93       	st	X, r24
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <ADC_u8StartChainAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState=BUSY_FUNCTION;
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorState;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <__vector_16>:

void __vector_16 (void)     __attribute__((signal));
void __vector_16 (void)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
     e72:	80 91 83 00 	lds	r24, 0x0083
     e76:	88 23       	and	r24, r24
     e78:	b9 f4       	brne	.+46     	; 0xea8 <__vector_16+0x60>
	{
		/*read ADC result*/
#if 	(ADC_Resolution == Eight_Bits)
		*ADC_pu8Reading= ADCH;
     e7a:	a0 91 78 00 	lds	r26, 0x0078
     e7e:	b0 91 79 00 	lds	r27, 0x0079
     e82:	e5 e2       	ldi	r30, 0x25	; 37
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8c 93       	st	X, r24
#else
#error "Resolution error"
#endif

		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     e8a:	10 92 81 00 	sts	0x0081, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     e8e:	e0 91 7a 00 	lds	r30, 0x007A
     e92:	f0 91 7b 00 	lds	r31, 0x007B
     e96:	09 95       	icall

		/*disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	87 7f       	andi	r24, 0xF7	; 247
     ea4:	8c 93       	st	X, r24
     ea6:	55 c0       	rjmp	.+170    	; 0xf52 <__vector_16+0x10a>
	}
	else if(ADC_u8ISRSource == CHAIN_ASYNCH) /*ISR source is chain */
     ea8:	80 91 83 00 	lds	r24, 0x0083
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <__vector_16+0x6a>
     eb0:	50 c0       	rjmp	.+160    	; 0xf52 <__vector_16+0x10a>
	{
		/*Read the current conversion*/

#if 	(ADC_Resolution == Eight_Bits)
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex]= ADCH;
     eb2:	20 91 7e 00 	lds	r18, 0x007E
     eb6:	30 91 7f 00 	lds	r19, 0x007F
     eba:	80 91 80 00 	lds	r24, 0x0080
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	d9 01       	movw	r26, r18
     ec8:	a8 0f       	add	r26, r24
     eca:	b9 1f       	adc	r27, r25
     ecc:	e5 e2       	ldi	r30, 0x25	; 37
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
#else
#error "Resolution error"
#endif

		/*increment chain index*/
		ADC_u8ChainConversionIndex++;
     edc:	80 91 80 00 	lds	r24, 0x0080
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	80 93 80 00 	sts	0x0080, r24

		/*Check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
     ee6:	90 91 80 00 	lds	r25, 0x0080
     eea:	80 91 82 00 	lds	r24, 0x0082
     eee:	98 17       	cp	r25, r24
     ef0:	79 f4       	brne	.+30     	; 0xf10 <__vector_16+0xc8>
		{
			/*chain is finished*/
			/*ADC is now IDLE*/
			ADC_u8BusyState=IDLE;
     ef2:	10 92 81 00 	sts	0x0081, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     ef6:	e0 91 7a 00 	lds	r30, 0x007A
     efa:	f0 91 7b 00 	lds	r31, 0x007B
     efe:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f00:	a6 e2       	ldi	r26, 0x26	; 38
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e6 e2       	ldi	r30, 0x26	; 38
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	87 7f       	andi	r24, 0xF7	; 247
     f0c:	8c 93       	st	X, r24
     f0e:	21 c0       	rjmp	.+66     	; 0xf52 <__vector_16+0x10a>
		}
		else
		{
			/*chain is not finished*/
			/*set new required channel*/
			ADMUX &= 0b11100000;
     f10:	a7 e2       	ldi	r26, 0x27	; 39
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e7 e2       	ldi	r30, 0x27	; 39
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 7e       	andi	r24, 0xE0	; 224
     f1c:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     f1e:	a7 e2       	ldi	r26, 0x27	; 39
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e2       	ldi	r30, 0x27	; 39
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	40 81       	ld	r20, Z
     f28:	20 91 7c 00 	lds	r18, 0x007C
     f2c:	30 91 7d 00 	lds	r19, 0x007D
     f30:	80 91 80 00 	lds	r24, 0x0080
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	e8 0f       	add	r30, r24
     f3c:	f9 1f       	adc	r31, r25
     f3e:	80 81       	ld	r24, Z
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f44:	a6 e2       	ldi	r26, 0x26	; 38
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 64       	ori	r24, 0x40	; 64
     f50:	8c 93       	st	X, r24
		}

	}
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	28 97       	sbiw	r28, 0x08	; 8
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	8a 83       	std	Y+2, r24	; 0x02
     f8e:	6b 83       	std	Y+3, r22	; 0x03
     f90:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f92:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	08 f0       	brcs	.+2      	; 0xf9c <DIO_u8SetPinValue+0x24>
     f9a:	f4 c0       	rjmp	.+488    	; 0x1184 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	88 23       	and	r24, r24
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <DIO_u8SetPinValue+0x2c>
     fa2:	77 c0       	rjmp	.+238    	; 0x1092 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	38 87       	std	Y+8, r19	; 0x08
     fac:	2f 83       	std	Y+7, r18	; 0x07
     fae:	8f 81       	ldd	r24, Y+7	; 0x07
     fb0:	98 85       	ldd	r25, Y+8	; 0x08
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	59 f1       	breq	.+86     	; 0x100e <DIO_u8SetPinValue+0x96>
     fb8:	2f 81       	ldd	r18, Y+7	; 0x07
     fba:	38 85       	ldd	r19, Y+8	; 0x08
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	2c f4       	brge	.+10     	; 0xfcc <DIO_u8SetPinValue+0x54>
     fc2:	8f 81       	ldd	r24, Y+7	; 0x07
     fc4:	98 85       	ldd	r25, Y+8	; 0x08
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <DIO_u8SetPinValue+0x6c>
     fca:	60 c0       	rjmp	.+192    	; 0x108c <DIO_u8SetPinValue+0x114>
     fcc:	2f 81       	ldd	r18, Y+7	; 0x07
     fce:	38 85       	ldd	r19, Y+8	; 0x08
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	89 f1       	breq	.+98     	; 0x1038 <DIO_u8SetPinValue+0xc0>
     fd6:	8f 81       	ldd	r24, Y+7	; 0x07
     fd8:	98 85       	ldd	r25, Y+8	; 0x08
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <DIO_u8SetPinValue+0x6a>
     fe0:	40 c0       	rjmp	.+128    	; 0x1062 <DIO_u8SetPinValue+0xea>
     fe2:	54 c0       	rjmp	.+168    	; 0x108c <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     fe4:	ab e3       	ldi	r26, 0x3B	; 59
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	eb e3       	ldi	r30, 0x3B	; 59
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_u8SetPinValue+0x8a>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_u8SetPinValue+0x86>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	bd c0       	rjmp	.+378    	; 0x1188 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    100e:	a8 e3       	ldi	r26, 0x38	; 56
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e8 e3       	ldi	r30, 0x38	; 56
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_u8SetPinValue+0xb4>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_u8SetPinValue+0xb0>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	a8 c0       	rjmp	.+336    	; 0x1188 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1038:	a5 e3       	ldi	r26, 0x35	; 53
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e3       	ldi	r30, 0x35	; 53
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0xde>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0xda>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	93 c0       	rjmp	.+294    	; 0x1188 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1062:	a2 e3       	ldi	r26, 0x32	; 50
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e2 e3       	ldi	r30, 0x32	; 50
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x108>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x104>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	7e c0       	rjmp	.+252    	; 0x1188 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	7b c0       	rjmp	.+246    	; 0x1188 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	09 f0       	breq	.+2      	; 0x109a <DIO_u8SetPinValue+0x122>
    1098:	72 c0       	rjmp	.+228    	; 0x117e <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3e 83       	std	Y+6, r19	; 0x06
    10a2:	2d 83       	std	Y+5, r18	; 0x05
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	49 f1       	breq	.+82     	; 0x1100 <DIO_u8SetPinValue+0x188>
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	2c f4       	brge	.+10     	; 0x10c2 <DIO_u8SetPinValue+0x14a>
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	61 f0       	breq	.+24     	; 0x10d8 <DIO_u8SetPinValue+0x160>
    10c0:	5b c0       	rjmp	.+182    	; 0x1178 <DIO_u8SetPinValue+0x200>
    10c2:	2d 81       	ldd	r18, Y+5	; 0x05
    10c4:	3e 81       	ldd	r19, Y+6	; 0x06
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	71 f1       	breq	.+92     	; 0x1128 <DIO_u8SetPinValue+0x1b0>
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	e9 f1       	breq	.+122    	; 0x1150 <DIO_u8SetPinValue+0x1d8>
    10d6:	50 c0       	rjmp	.+160    	; 0x1178 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    10d8:	ab e3       	ldi	r26, 0x3B	; 59
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_u8SetPinValue+0x17e>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_u8SetPinValue+0x17a>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	44 c0       	rjmp	.+136    	; 0x1188 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1100:	a8 e3       	ldi	r26, 0x38	; 56
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e3       	ldi	r30, 0x38	; 56
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_u8SetPinValue+0x1a6>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_u8SetPinValue+0x1a2>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	30 c0       	rjmp	.+96     	; 0x1188 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1128:	a5 e3       	ldi	r26, 0x35	; 53
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e3       	ldi	r30, 0x35	; 53
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8SetPinValue+0x1ce>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8SetPinValue+0x1ca>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	1c c0       	rjmp	.+56     	; 0x1188 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1150:	a2 e3       	ldi	r26, 0x32	; 50
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinValue+0x1f6>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinValue+0x1f2>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
}
    118a:	28 96       	adiw	r28, 0x08	; 8
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <DIO_u8SetPortValue+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <DIO_u8SetPortValue+0x8>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	a8 f5       	brcc	.+106    	; 0x1220 <DIO_u8SetPortValue+0x84>
	{
		switch(Copy_u8Port)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3d 83       	std	Y+5, r19	; 0x05
    11be:	2c 83       	std	Y+4, r18	; 0x04
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <DIO_u8SetPortValue+0x62>
    11ca:	2c 81       	ldd	r18, Y+4	; 0x04
    11cc:	3d 81       	ldd	r19, Y+5	; 0x05
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	2c f4       	brge	.+10     	; 0x11de <DIO_u8SetPortValue+0x42>
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	61 f0       	breq	.+24     	; 0x11f4 <DIO_u8SetPortValue+0x58>
    11dc:	1f c0       	rjmp	.+62     	; 0x121c <DIO_u8SetPortValue+0x80>
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	81 f0       	breq	.+32     	; 0x1208 <DIO_u8SetPortValue+0x6c>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <DIO_u8SetPortValue+0x76>
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	80 83       	st	Z, r24
    11fc:	11 c0       	rjmp	.+34     	; 0x1220 <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	80 83       	st	Z, r24
    1206:	0c c0       	rjmp	.+24     	; 0x1220 <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1208:	e5 e3       	ldi	r30, 0x35	; 53
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	80 83       	st	Z, r24
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    1212:	e2 e3       	ldi	r30, 0x32	; 50
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	80 83       	st	Z, r24
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_u8SetPortValue+0x84>
		default: Local_u8ErrorState=1; break;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	27 97       	sbiw	r28, 0x07	; 7
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	8a 83       	std	Y+2, r24	; 0x02
    1248:	6b 83       	std	Y+3, r22	; 0x03
    124a:	5d 83       	std	Y+5, r21	; 0x05
    124c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    124e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_u8GetPinValue+0x28>
    1258:	78 c0       	rjmp	.+240    	; 0x134a <DIO_u8GetPinValue+0x118>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	08 f0       	brcs	.+2      	; 0x1262 <DIO_u8GetPinValue+0x30>
    1260:	74 c0       	rjmp	.+232    	; 0x134a <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3f 83       	std	Y+7, r19	; 0x07
    126a:	2e 83       	std	Y+6, r18	; 0x06
    126c:	4e 81       	ldd	r20, Y+6	; 0x06
    126e:	5f 81       	ldd	r21, Y+7	; 0x07
    1270:	41 30       	cpi	r20, 0x01	; 1
    1272:	51 05       	cpc	r21, r1
    1274:	59 f1       	breq	.+86     	; 0x12cc <DIO_u8GetPinValue+0x9a>
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	34 f4       	brge	.+12     	; 0x128c <DIO_u8GetPinValue+0x5a>
    1280:	2e 81       	ldd	r18, Y+6	; 0x06
    1282:	3f 81       	ldd	r19, Y+7	; 0x07
    1284:	21 15       	cp	r18, r1
    1286:	31 05       	cpc	r19, r1
    1288:	69 f0       	breq	.+26     	; 0x12a4 <DIO_u8GetPinValue+0x72>
    128a:	5c c0       	rjmp	.+184    	; 0x1344 <DIO_u8GetPinValue+0x112>
    128c:	4e 81       	ldd	r20, Y+6	; 0x06
    128e:	5f 81       	ldd	r21, Y+7	; 0x07
    1290:	42 30       	cpi	r20, 0x02	; 2
    1292:	51 05       	cpc	r21, r1
    1294:	79 f1       	breq	.+94     	; 0x12f4 <DIO_u8GetPinValue+0xc2>
    1296:	8e 81       	ldd	r24, Y+6	; 0x06
    1298:	9f 81       	ldd	r25, Y+7	; 0x07
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <DIO_u8GetPinValue+0x70>
    12a0:	3d c0       	rjmp	.+122    	; 0x131c <DIO_u8GetPinValue+0xea>
    12a2:	50 c0       	rjmp	.+160    	; 0x1344 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
    12a4:	e9 e3       	ldi	r30, 0x39	; 57
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a9 01       	movw	r20, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_u8GetPinValue+0x8a>
    12b8:	55 95       	asr	r21
    12ba:	47 95       	ror	r20
    12bc:	8a 95       	dec	r24
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_u8GetPinValue+0x86>
    12c0:	ca 01       	movw	r24, r20
    12c2:	81 70       	andi	r24, 0x01	; 1
    12c4:	ec 81       	ldd	r30, Y+4	; 0x04
    12c6:	fd 81       	ldd	r31, Y+5	; 0x05
    12c8:	80 83       	st	Z, r24
    12ca:	41 c0       	rjmp	.+130    	; 0x134e <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
    12cc:	e6 e3       	ldi	r30, 0x36	; 54
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_u8GetPinValue+0xb2>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_u8GetPinValue+0xae>
    12e8:	ca 01       	movw	r24, r20
    12ea:	81 70       	andi	r24, 0x01	; 1
    12ec:	ec 81       	ldd	r30, Y+4	; 0x04
    12ee:	fd 81       	ldd	r31, Y+5	; 0x05
    12f0:	80 83       	st	Z, r24
    12f2:	2d c0       	rjmp	.+90     	; 0x134e <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
    12f4:	e3 e3       	ldi	r30, 0x33	; 51
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a9 01       	movw	r20, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_u8GetPinValue+0xda>
    1308:	55 95       	asr	r21
    130a:	47 95       	ror	r20
    130c:	8a 95       	dec	r24
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_u8GetPinValue+0xd6>
    1310:	ca 01       	movw	r24, r20
    1312:	81 70       	andi	r24, 0x01	; 1
    1314:	ec 81       	ldd	r30, Y+4	; 0x04
    1316:	fd 81       	ldd	r31, Y+5	; 0x05
    1318:	80 83       	st	Z, r24
    131a:	19 c0       	rjmp	.+50     	; 0x134e <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
    131c:	e0 e3       	ldi	r30, 0x30	; 48
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_u8GetPinValue+0x102>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_u8GetPinValue+0xfe>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	ec 81       	ldd	r30, Y+4	; 0x04
    133e:	fd 81       	ldd	r31, Y+5	; 0x05
    1340:	80 83       	st	Z, r24
    1342:	05 c0       	rjmp	.+10     	; 0x134e <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1; break;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    134e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1350:	27 96       	adiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <LCD_voidSendCommand>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	e9 97       	sbiw	r28, 0x39	; 57
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(LCD_CTRL_8_PORT,LCD_E_PIN,DIO_u8PIN_LOW);

#elif LCD_Bit_Mode == Four_Bits_Mode

	/* Set RS Pin to Low for Command */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RS,DIO_u8PIN_LOW);
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Set RW to Low for Write */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RW,DIO_u8PIN_LOW);
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Set Command to Data Pins */
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Command>>7)&1));
    138c:	89 ad       	ldd	r24, Y+57	; 0x39
    138e:	98 2f       	mov	r25, r24
    1390:	99 1f       	adc	r25, r25
    1392:	99 27       	eor	r25, r25
    1394:	99 1f       	adc	r25, r25
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	49 2f       	mov	r20, r25
    139c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Command>>6)&1));
    13a0:	89 ad       	ldd	r24, Y+57	; 0x39
    13a2:	82 95       	swap	r24
    13a4:	86 95       	lsr	r24
    13a6:	86 95       	lsr	r24
    13a8:	83 70       	andi	r24, 0x03	; 3
    13aa:	98 2f       	mov	r25, r24
    13ac:	91 70       	andi	r25, 0x01	; 1
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	49 2f       	mov	r20, r25
    13b4:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Command>>5)&1));
    13b8:	89 ad       	ldd	r24, Y+57	; 0x39
    13ba:	82 95       	swap	r24
    13bc:	86 95       	lsr	r24
    13be:	87 70       	andi	r24, 0x07	; 7
    13c0:	98 2f       	mov	r25, r24
    13c2:	91 70       	andi	r25, 0x01	; 1
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	49 2f       	mov	r20, r25
    13ca:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Command>>4)&1));
    13ce:	89 ad       	ldd	r24, Y+57	; 0x39
    13d0:	82 95       	swap	r24
    13d2:	8f 70       	andi	r24, 0x0F	; 15
    13d4:	98 2f       	mov	r25, r24
    13d6:	91 70       	andi	r25, 0x01	; 1
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	63 e0       	ldi	r22, 0x03	; 3
    13dc:	49 2f       	mov	r20, r25
    13de:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 ef       	ldi	r26, 0xF0	; 240
    13f2:	b1 e4       	ldi	r27, 0x41	; 65
    13f4:	8d ab       	std	Y+53, r24	; 0x35
    13f6:	9e ab       	std	Y+54, r25	; 0x36
    13f8:	af ab       	std	Y+55, r26	; 0x37
    13fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	6d a9       	ldd	r22, Y+53	; 0x35
    13fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1400:	8f a9       	ldd	r24, Y+55	; 0x37
    1402:	98 ad       	ldd	r25, Y+56	; 0x38
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	89 ab       	std	Y+49, r24	; 0x31
    1416:	9a ab       	std	Y+50, r25	; 0x32
    1418:	ab ab       	std	Y+51, r26	; 0x33
    141a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    141c:	69 a9       	ldd	r22, Y+49	; 0x31
    141e:	7a a9       	ldd	r23, Y+50	; 0x32
    1420:	8b a9       	ldd	r24, Y+51	; 0x33
    1422:	9c a9       	ldd	r25, Y+52	; 0x34
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <LCD_voidSendCommand+0xdc>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	98 ab       	std	Y+48, r25	; 0x30
    143a:	8f a7       	std	Y+47, r24	; 0x2f
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <LCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
    143e:	69 a9       	ldd	r22, Y+49	; 0x31
    1440:	7a a9       	ldd	r23, Y+50	; 0x32
    1442:	8b a9       	ldd	r24, Y+51	; 0x33
    1444:	9c a9       	ldd	r25, Y+52	; 0x34
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <LCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	6d a9       	ldd	r22, Y+53	; 0x35
    1458:	7e a9       	ldd	r23, Y+54	; 0x36
    145a:	8f a9       	ldd	r24, Y+55	; 0x37
    145c:	98 ad       	ldd	r25, Y+56	; 0x38
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	98 ab       	std	Y+48, r25	; 0x30
    147c:	8f a7       	std	Y+47, r24	; 0x2f
    147e:	0f c0       	rjmp	.+30     	; 0x149e <LCD_voidSendCommand+0x13c>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9e a7       	std	Y+46, r25	; 0x2e
    1486:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1488:	8d a5       	ldd	r24, Y+45	; 0x2d
    148a:	9e a5       	ldd	r25, Y+46	; 0x2e
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_voidSendCommand+0x12a>
    1490:	9e a7       	std	Y+46, r25	; 0x2e
    1492:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8f a5       	ldd	r24, Y+47	; 0x2f
    1496:	98 a9       	ldd	r25, Y+48	; 0x30
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	98 ab       	std	Y+48, r25	; 0x30
    149c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a0:	98 a9       	ldd	r25, Y+48	; 0x30
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <LCD_voidSendCommand+0x11e>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <LCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	69 a9       	ldd	r22, Y+49	; 0x31
    14aa:	7a a9       	ldd	r23, Y+50	; 0x32
    14ac:	8b a9       	ldd	r24, Y+51	; 0x33
    14ae:	9c a9       	ldd	r25, Y+52	; 0x34
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	98 ab       	std	Y+48, r25	; 0x30
    14ba:	8f a7       	std	Y+47, r24	; 0x2f
    14bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14be:	98 a9       	ldd	r25, Y+48	; 0x30
    14c0:	9c a7       	std	Y+44, r25	; 0x2c
    14c2:	8b a7       	std	Y+43, r24	; 0x2b
    14c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_voidSendCommand+0x166>
    14cc:	9c a7       	std	Y+44, r25	; 0x2c
    14ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	62 e0       	ldi	r22, 0x02	; 2
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e4       	ldi	r27, 0x40	; 64
    14e2:	8f a3       	std	Y+39, r24	; 0x27
    14e4:	98 a7       	std	Y+40, r25	; 0x28
    14e6:	a9 a7       	std	Y+41, r26	; 0x29
    14e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	6f a1       	ldd	r22, Y+39	; 0x27
    14ec:	78 a5       	ldd	r23, Y+40	; 0x28
    14ee:	89 a5       	ldd	r24, Y+41	; 0x29
    14f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a ef       	ldi	r20, 0xFA	; 250
    14f8:	54 e4       	ldi	r21, 0x44	; 68
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8b a3       	std	Y+35, r24	; 0x23
    1504:	9c a3       	std	Y+36, r25	; 0x24
    1506:	ad a3       	std	Y+37, r26	; 0x25
    1508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    150a:	6b a1       	ldd	r22, Y+35	; 0x23
    150c:	7c a1       	ldd	r23, Y+36	; 0x24
    150e:	8d a1       	ldd	r24, Y+37	; 0x25
    1510:	9e a1       	ldd	r25, Y+38	; 0x26
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <LCD_voidSendCommand+0x1ca>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9a a3       	std	Y+34, r25	; 0x22
    1528:	89 a3       	std	Y+33, r24	; 0x21
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <LCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
    152c:	6b a1       	ldd	r22, Y+35	; 0x23
    152e:	7c a1       	ldd	r23, Y+36	; 0x24
    1530:	8d a1       	ldd	r24, Y+37	; 0x25
    1532:	9e a1       	ldd	r25, Y+38	; 0x26
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <LCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	6f a1       	ldd	r22, Y+39	; 0x27
    1546:	78 a5       	ldd	r23, Y+40	; 0x28
    1548:	89 a5       	ldd	r24, Y+41	; 0x29
    154a:	9a a5       	ldd	r25, Y+42	; 0x2a
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9a a3       	std	Y+34, r25	; 0x22
    156a:	89 a3       	std	Y+33, r24	; 0x21
    156c:	0f c0       	rjmp	.+30     	; 0x158c <LCD_voidSendCommand+0x22a>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	98 a3       	std	Y+32, r25	; 0x20
    1574:	8f 8f       	std	Y+31, r24	; 0x1f
    1576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1578:	98 a1       	ldd	r25, Y+32	; 0x20
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_voidSendCommand+0x218>
    157e:	98 a3       	std	Y+32, r25	; 0x20
    1580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	89 a1       	ldd	r24, Y+33	; 0x21
    1584:	9a a1       	ldd	r25, Y+34	; 0x22
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9a a3       	std	Y+34, r25	; 0x22
    158a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	89 a1       	ldd	r24, Y+33	; 0x21
    158e:	9a a1       	ldd	r25, Y+34	; 0x22
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <LCD_voidSendCommand+0x20c>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <LCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	6b a1       	ldd	r22, Y+35	; 0x23
    1598:	7c a1       	ldd	r23, Y+36	; 0x24
    159a:	8d a1       	ldd	r24, Y+37	; 0x25
    159c:	9e a1       	ldd	r25, Y+38	; 0x26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9a a3       	std	Y+34, r25	; 0x22
    15a8:	89 a3       	std	Y+33, r24	; 0x21
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	9e 8f       	std	Y+30, r25	; 0x1e
    15b0:	8d 8f       	std	Y+29, r24	; 0x1d
    15b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_voidSendCommand+0x254>
    15ba:	9e 8f       	std	Y+30, r25	; 0x1e
    15bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Command>>3)&1));
    15be:	89 ad       	ldd	r24, Y+57	; 0x39
    15c0:	86 95       	lsr	r24
    15c2:	86 95       	lsr	r24
    15c4:	86 95       	lsr	r24
    15c6:	98 2f       	mov	r25, r24
    15c8:	91 70       	andi	r25, 0x01	; 1
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	49 2f       	mov	r20, r25
    15d0:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Command>>2)&1));
    15d4:	89 ad       	ldd	r24, Y+57	; 0x39
    15d6:	86 95       	lsr	r24
    15d8:	86 95       	lsr	r24
    15da:	98 2f       	mov	r25, r24
    15dc:	91 70       	andi	r25, 0x01	; 1
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	49 2f       	mov	r20, r25
    15e4:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Command>>1)&1));
    15e8:	89 ad       	ldd	r24, Y+57	; 0x39
    15ea:	86 95       	lsr	r24
    15ec:	98 2f       	mov	r25, r24
    15ee:	91 70       	andi	r25, 0x01	; 1
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	62 e0       	ldi	r22, 0x02	; 2
    15f4:	49 2f       	mov	r20, r25
    15f6:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Command>>0)&1));
    15fa:	89 ad       	ldd	r24, Y+57	; 0x39
    15fc:	98 2f       	mov	r25, r24
    15fe:	91 70       	andi	r25, 0x01	; 1
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	63 e0       	ldi	r22, 0x03	; 3
    1604:	49 2f       	mov	r20, r25
    1606:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a0 ef       	ldi	r26, 0xF0	; 240
    161a:	b1 e4       	ldi	r27, 0x41	; 65
    161c:	89 8f       	std	Y+25, r24	; 0x19
    161e:	9a 8f       	std	Y+26, r25	; 0x1a
    1620:	ab 8f       	std	Y+27, r26	; 0x1b
    1622:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	69 8d       	ldd	r22, Y+25	; 0x19
    1626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a ef       	ldi	r20, 0xFA	; 250
    1632:	54 e4       	ldi	r21, 0x44	; 68
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8d 8b       	std	Y+21, r24	; 0x15
    163e:	9e 8b       	std	Y+22, r25	; 0x16
    1640:	af 8b       	std	Y+23, r26	; 0x17
    1642:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1644:	6d 89       	ldd	r22, Y+21	; 0x15
    1646:	7e 89       	ldd	r23, Y+22	; 0x16
    1648:	8f 89       	ldd	r24, Y+23	; 0x17
    164a:	98 8d       	ldd	r25, Y+24	; 0x18
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <LCD_voidSendCommand+0x304>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 8b       	std	Y+20, r25	; 0x14
    1662:	8b 8b       	std	Y+19, r24	; 0x13
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <LCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1666:	6d 89       	ldd	r22, Y+21	; 0x15
    1668:	7e 89       	ldd	r23, Y+22	; 0x16
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <LCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	69 8d       	ldd	r22, Y+25	; 0x19
    1680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9c 8b       	std	Y+20, r25	; 0x14
    16a4:	8b 8b       	std	Y+19, r24	; 0x13
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <LCD_voidSendCommand+0x364>
    16a8:	88 ec       	ldi	r24, 0xC8	; 200
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9a 8b       	std	Y+18, r25	; 0x12
    16ae:	89 8b       	std	Y+17, r24	; 0x11
    16b0:	89 89       	ldd	r24, Y+17	; 0x11
    16b2:	9a 89       	ldd	r25, Y+18	; 0x12
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_voidSendCommand+0x352>
    16b8:	9a 8b       	std	Y+18, r25	; 0x12
    16ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	8b 89       	ldd	r24, Y+19	; 0x13
    16be:	9c 89       	ldd	r25, Y+20	; 0x14
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9c 8b       	std	Y+20, r25	; 0x14
    16c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8b 89       	ldd	r24, Y+19	; 0x13
    16c8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <LCD_voidSendCommand+0x346>
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <LCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	6d 89       	ldd	r22, Y+21	; 0x15
    16d2:	7e 89       	ldd	r23, Y+22	; 0x16
    16d4:	8f 89       	ldd	r24, Y+23	; 0x17
    16d6:	98 8d       	ldd	r25, Y+24	; 0x18
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9c 8b       	std	Y+20, r25	; 0x14
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
    16e4:	8b 89       	ldd	r24, Y+19	; 0x13
    16e6:	9c 89       	ldd	r25, Y+20	; 0x14
    16e8:	98 8b       	std	Y+16, r25	; 0x10
    16ea:	8f 87       	std	Y+15, r24	; 0x0f
    16ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ee:	98 89       	ldd	r25, Y+16	; 0x10
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_voidSendCommand+0x38e>
    16f4:	98 8b       	std	Y+16, r25	; 0x10
    16f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 e0       	ldi	r26, 0x00	; 0
    1708:	b0 e4       	ldi	r27, 0x40	; 64
    170a:	8b 87       	std	Y+11, r24	; 0x0b
    170c:	9c 87       	std	Y+12, r25	; 0x0c
    170e:	ad 87       	std	Y+13, r26	; 0x0d
    1710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	6b 85       	ldd	r22, Y+11	; 0x0b
    1714:	7c 85       	ldd	r23, Y+12	; 0x0c
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	9e 85       	ldd	r25, Y+14	; 0x0e
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a ef       	ldi	r20, 0xFA	; 250
    1720:	54 e4       	ldi	r21, 0x44	; 68
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8f 83       	std	Y+7, r24	; 0x07
    172c:	98 87       	std	Y+8, r25	; 0x08
    172e:	a9 87       	std	Y+9, r26	; 0x09
    1730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_voidSendCommand+0x3f2>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <LCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <LCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	6b 85       	ldd	r22, Y+11	; 0x0b
    176e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <LCD_voidSendCommand+0x452>
    1796:	88 ec       	ldi	r24, 0xC8	; 200
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9c 83       	std	Y+4, r25	; 0x04
    179c:	8b 83       	std	Y+3, r24	; 0x03
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_voidSendCommand+0x440>
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <LCD_voidSendCommand+0x434>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <LCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9e 83       	std	Y+6, r25	; 0x06
    17d0:	8d 83       	std	Y+5, r24	; 0x05
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	9a 83       	std	Y+2, r25	; 0x02
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_voidSendCommand+0x47c>
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#else
#error "Wrong LCD mode configration"
#endif
}
    17e6:	e9 96       	adiw	r28, 0x39	; 57
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	e9 97       	sbiw	r28, 0x39	; 57
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPinValue(LCD_CTRL_8_PORT,LCD_E_PIN,DIO_u8PIN_LOW);

#elif LCD_Bit_Mode == Four_Bits_Mode
	/* Set RS Pin to High for Data */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RS,DIO_u8PIN_HIGH);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Set RW to Low for Write */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RW,DIO_u8PIN_LOW);
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	/* Set Data to Data Pins */
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Data>>7)&1));
    1822:	89 ad       	ldd	r24, Y+57	; 0x39
    1824:	98 2f       	mov	r25, r24
    1826:	99 1f       	adc	r25, r25
    1828:	99 27       	eor	r25, r25
    182a:	99 1f       	adc	r25, r25
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	49 2f       	mov	r20, r25
    1832:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Data>>6)&1));
    1836:	89 ad       	ldd	r24, Y+57	; 0x39
    1838:	82 95       	swap	r24
    183a:	86 95       	lsr	r24
    183c:	86 95       	lsr	r24
    183e:	83 70       	andi	r24, 0x03	; 3
    1840:	98 2f       	mov	r25, r24
    1842:	91 70       	andi	r25, 0x01	; 1
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	49 2f       	mov	r20, r25
    184a:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Data>>5)&1));
    184e:	89 ad       	ldd	r24, Y+57	; 0x39
    1850:	82 95       	swap	r24
    1852:	86 95       	lsr	r24
    1854:	87 70       	andi	r24, 0x07	; 7
    1856:	98 2f       	mov	r25, r24
    1858:	91 70       	andi	r25, 0x01	; 1
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	49 2f       	mov	r20, r25
    1860:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Data>>4)&1));
    1864:	89 ad       	ldd	r24, Y+57	; 0x39
    1866:	82 95       	swap	r24
    1868:	8f 70       	andi	r24, 0x0F	; 15
    186a:	98 2f       	mov	r25, r24
    186c:	91 70       	andi	r25, 0x01	; 1
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	63 e0       	ldi	r22, 0x03	; 3
    1872:	49 2f       	mov	r20, r25
    1874:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	62 e0       	ldi	r22, 0x02	; 2
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 ef       	ldi	r26, 0xF0	; 240
    1888:	b1 e4       	ldi	r27, 0x41	; 65
    188a:	8d ab       	std	Y+53, r24	; 0x35
    188c:	9e ab       	std	Y+54, r25	; 0x36
    188e:	af ab       	std	Y+55, r26	; 0x37
    1890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6d a9       	ldd	r22, Y+53	; 0x35
    1894:	7e a9       	ldd	r23, Y+54	; 0x36
    1896:	8f a9       	ldd	r24, Y+55	; 0x37
    1898:	98 ad       	ldd	r25, Y+56	; 0x38
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 ab       	std	Y+49, r24	; 0x31
    18ac:	9a ab       	std	Y+50, r25	; 0x32
    18ae:	ab ab       	std	Y+51, r26	; 0x33
    18b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_voidSendData+0xdc>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <LCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    18d4:	69 a9       	ldd	r22, Y+49	; 0x31
    18d6:	7a a9       	ldd	r23, Y+50	; 0x32
    18d8:	8b a9       	ldd	r24, Y+51	; 0x33
    18da:	9c a9       	ldd	r25, Y+52	; 0x34
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <LCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6d a9       	ldd	r22, Y+53	; 0x35
    18ee:	7e a9       	ldd	r23, Y+54	; 0x36
    18f0:	8f a9       	ldd	r24, Y+55	; 0x37
    18f2:	98 ad       	ldd	r25, Y+56	; 0x38
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <LCD_voidSendData+0x13c>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	8d a7       	std	Y+45, r24	; 0x2d
    191e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1920:	9e a5       	ldd	r25, Y+46	; 0x2e
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_voidSendData+0x12a>
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <LCD_voidSendData+0x11e>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <LCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	69 a9       	ldd	r22, Y+49	; 0x31
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b a9       	ldd	r24, Y+51	; 0x33
    1944:	9c a9       	ldd	r25, Y+52	; 0x34
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	9c a7       	std	Y+44, r25	; 0x2c
    1958:	8b a7       	std	Y+43, r24	; 0x2b
    195a:	8b a5       	ldd	r24, Y+43	; 0x2b
    195c:	9c a5       	ldd	r25, Y+44	; 0x2c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_voidSendData+0x166>
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e4       	ldi	r27, 0x40	; 64
    1978:	8f a3       	std	Y+39, r24	; 0x27
    197a:	98 a7       	std	Y+40, r25	; 0x28
    197c:	a9 a7       	std	Y+41, r26	; 0x29
    197e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6f a1       	ldd	r22, Y+39	; 0x27
    1982:	78 a5       	ldd	r23, Y+40	; 0x28
    1984:	89 a5       	ldd	r24, Y+41	; 0x29
    1986:	9a a5       	ldd	r25, Y+42	; 0x2a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8b a3       	std	Y+35, r24	; 0x23
    199a:	9c a3       	std	Y+36, r25	; 0x24
    199c:	ad a3       	std	Y+37, r26	; 0x25
    199e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <LCD_voidSendData+0x1ca>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <LCD_voidSendData+0x248>
	else if (__tmp > 65535)
    19c2:	6b a1       	ldd	r22, Y+35	; 0x23
    19c4:	7c a1       	ldd	r23, Y+36	; 0x24
    19c6:	8d a1       	ldd	r24, Y+37	; 0x25
    19c8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <LCD_voidSendData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6f a1       	ldd	r22, Y+39	; 0x27
    19dc:	78 a5       	ldd	r23, Y+40	; 0x28
    19de:	89 a5       	ldd	r24, Y+41	; 0x29
    19e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <LCD_voidSendData+0x22a>
    1a04:	88 ec       	ldi	r24, 0xC8	; 200
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	98 a3       	std	Y+32, r25	; 0x20
    1a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_voidSendData+0x218>
    1a14:	98 a3       	std	Y+32, r25	; 0x20
    1a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	89 a1       	ldd	r24, Y+33	; 0x21
    1a24:	9a a1       	ldd	r25, Y+34	; 0x22
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <LCD_voidSendData+0x20c>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <LCD_voidSendData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a3       	std	Y+33, r24	; 0x21
    1a40:	89 a1       	ldd	r24, Y+33	; 0x21
    1a42:	9a a1       	ldd	r25, Y+34	; 0x22
    1a44:	9e 8f       	std	Y+30, r25	; 0x1e
    1a46:	8d 8f       	std	Y+29, r24	; 0x1d
    1a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_voidSendData+0x254>
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);


	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Data>>3)&1));
    1a54:	89 ad       	ldd	r24, Y+57	; 0x39
    1a56:	86 95       	lsr	r24
    1a58:	86 95       	lsr	r24
    1a5a:	86 95       	lsr	r24
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	91 70       	andi	r25, 0x01	; 1
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	49 2f       	mov	r20, r25
    1a66:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Data>>2)&1));
    1a6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a6c:	86 95       	lsr	r24
    1a6e:	86 95       	lsr	r24
    1a70:	98 2f       	mov	r25, r24
    1a72:	91 70       	andi	r25, 0x01	; 1
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	49 2f       	mov	r20, r25
    1a7a:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Data>>1)&1));
    1a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a80:	86 95       	lsr	r24
    1a82:	98 2f       	mov	r25, r24
    1a84:	91 70       	andi	r25, 0x01	; 1
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	49 2f       	mov	r20, r25
    1a8c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Data>>0)&1));
    1a90:	89 ad       	ldd	r24, Y+57	; 0x39
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	63 e0       	ldi	r22, 0x03	; 3
    1a9a:	49 2f       	mov	r20, r25
    1a9c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	62 e0       	ldi	r22, 0x02	; 2
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 ef       	ldi	r26, 0xF0	; 240
    1ab0:	b1 e4       	ldi	r27, 0x41	; 65
    1ab2:	89 8f       	std	Y+25, r24	; 0x19
    1ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	69 8d       	ldd	r22, Y+25	; 0x19
    1abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a ef       	ldi	r20, 0xFA	; 250
    1ac8:	54 e4       	ldi	r21, 0x44	; 68
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8d 8b       	std	Y+21, r24	; 0x15
    1ad4:	9e 8b       	std	Y+22, r25	; 0x16
    1ad6:	af 8b       	std	Y+23, r26	; 0x17
    1ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <LCD_voidSendData+0x304>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9c 8b       	std	Y+20, r25	; 0x14
    1af8:	8b 8b       	std	Y+19, r24	; 0x13
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <LCD_voidSendData+0x382>
	else if (__tmp > 65535)
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <LCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	69 8d       	ldd	r22, Y+25	; 0x19
    1b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <LCD_voidSendData+0x364>
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a 8b       	std	Y+18, r25	; 0x12
    1b44:	89 8b       	std	Y+17, r24	; 0x11
    1b46:	89 89       	ldd	r24, Y+17	; 0x11
    1b48:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_voidSendData+0x352>
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <LCD_voidSendData+0x346>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <LCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	98 8b       	std	Y+16, r25	; 0x10
    1b80:	8f 87       	std	Y+15, r24	; 0x0f
    1b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b84:	98 89       	ldd	r25, Y+16	; 0x10
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_voidSendData+0x38e>
    1b8a:	98 8b       	std	Y+16, r25	; 0x10
    1b8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	62 e0       	ldi	r22, 0x02	; 2
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_u8SetPinValue>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e0       	ldi	r26, 0x00	; 0
    1b9e:	b0 e4       	ldi	r27, 0x40	; 64
    1ba0:	8b 87       	std	Y+11, r24	; 0x0b
    1ba2:	9c 87       	std	Y+12, r25	; 0x0c
    1ba4:	ad 87       	std	Y+13, r26	; 0x0d
    1ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a ef       	ldi	r20, 0xFA	; 250
    1bb6:	54 e4       	ldi	r21, 0x44	; 68
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8f 83       	std	Y+7, r24	; 0x07
    1bc2:	98 87       	std	Y+8, r25	; 0x08
    1bc4:	a9 87       	std	Y+9, r26	; 0x09
    1bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_voidSendData+0x3f2>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	3f c0       	rjmp	.+126    	; 0x1c68 <LCD_voidSendData+0x470>
	else if (__tmp > 65535)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	4c f5       	brge	.+82     	; 0x1c54 <LCD_voidSendData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_voidSendData+0x452>
    1c2c:	88 ec       	ldi	r24, 0xC8	; 200
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9c 83       	std	Y+4, r25	; 0x04
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_voidSendData+0x440>
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_voidSendData+0x434>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <LCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_voidSendData+0x47c>
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#else
#error "Wrong LCD mode configration"
#endif
}
    1c7c:	e9 96       	adiw	r28, 0x39	; 57
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <LCD_voidInit>:

void LCD_voidInit(void)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	6c 97       	sbiw	r28, 0x1c	; 28
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 ef       	ldi	r26, 0xF0	; 240
    1ca8:	b1 e4       	ldi	r27, 0x41	; 65
    1caa:	89 8f       	std	Y+25, r24	; 0x19
    1cac:	9a 8f       	std	Y+26, r25	; 0x1a
    1cae:	ab 8f       	std	Y+27, r26	; 0x1b
    1cb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8d 8b       	std	Y+21, r24	; 0x15
    1ccc:	9e 8b       	std	Y+22, r25	; 0x16
    1cce:	af 8b       	std	Y+23, r26	; 0x17
    1cd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_voidInit+0x66>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_voidInit+0xc6>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9a 8b       	std	Y+18, r25	; 0x12
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
    1d3e:	89 89       	ldd	r24, Y+17	; 0x11
    1d40:	9a 89       	ldd	r25, Y+18	; 0x12
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_voidInit+0xb4>
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	9c 89       	ldd	r25, Y+20	; 0x14
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_voidInit+0xa8>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d60:	7e 89       	ldd	r23, Y+22	; 0x16
    1d62:	8f 89       	ldd	r24, Y+23	; 0x17
    1d64:	98 8d       	ldd	r25, Y+24	; 0x18
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	98 8b       	std	Y+16, r25	; 0x10
    1d78:	8f 87       	std	Y+15, r24	; 0x0f
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	98 89       	ldd	r25, Y+16	; 0x10
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_voidInit+0xf0>
    1d82:	98 8b       	std	Y+16, r25	; 0x10
    1d84:	8f 87       	std	Y+15, r24	; 0x0f

	// Wait for More Than 30 ms
	_delay_ms(30);

	// Function Set Command: 2 Lines, 5*8 Font Size
	LCD_voidSendCommand(0x02);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x28);
    1d8c:	88 e2       	ldi	r24, 0x28	; 40
    1d8e:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0C);
    1d92:	8c e0       	ldi	r24, 0x0C	; 12
    1d94:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
    1da2:	9c 87       	std	Y+12, r25	; 0x0c
    1da4:	ad 87       	std	Y+13, r26	; 0x0d
    1da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a ef       	ldi	r20, 0xFA	; 250
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8f 83       	std	Y+7, r24	; 0x07
    1dc2:	98 87       	std	Y+8, r25	; 0x08
    1dc4:	a9 87       	std	Y+9, r26	; 0x09
    1dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_voidInit+0x15c>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_voidInit+0x1bc>
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9c 83       	std	Y+4, r25	; 0x04
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_voidInit+0x1aa>
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_voidInit+0x19e>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_voidInit+0x1e6>
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01

	// Wait for More Than 30 us
	_delay_ms(1);

	// Display On Off Control: Display Enable, Disable cursor, No blink Curser
	LCD_voidSendCommand(0x06);  //shift Cursor to right
    1e7c:	86 e0       	ldi	r24, 0x06	; 6
    1e7e:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);   // clear
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>


#else
#error "Wrong LCD mode configration"
#endif
}
    1e88:	6c 96       	adiw	r28, 0x1c	; 28
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD__voidSendString>:

void LCD__voidSendString(const char* Copy_pcString)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <LCD__voidSendString+0x6>
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	0e c0       	rjmp	.+28     	; 0x1eca <LCD__voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		LCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	fc 01       	movw	r30, r24
    1eba:	e2 0f       	add	r30, r18
    1ebc:	f3 1f       	adc	r31, r19
    1ebe:	80 81       	ld	r24, Z
    1ec0:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
		Local_u8Counter++;
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD__voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e2 0f       	add	r30, r18
    1ed8:	f3 1f       	adc	r31, r19
    1eda:	80 81       	ld	r24, Z
    1edc:	88 23       	and	r24, r24
    1ede:	39 f7       	brne	.-50     	; 0x1eae <LCD__voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <LCD_voidGoToXY+0x6>
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
    1efa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	88 23       	and	r24, r24
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <LCD_voidGoToXY+0x1c>
	{
		/*location is at first line*/
		Local_u8Address=Copy_u8YPos;
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <LCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <LCD_voidGoToXY+0x28>
	{
		/*location is at second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	80 5c       	subi	r24, 0xC0	; 192
    1f12:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM address command then send the command*/
	LCD_voidSendCommand(Local_u8Address+128);
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	80 58       	subi	r24, 0x80	; 128
    1f18:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>
}
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	27 97       	sbiw	r28, 0x07	; 7
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    1f40:	6d 83       	std	Y+5, r22	; 0x05
    1f42:	4e 83       	std	Y+6, r20	; 0x06
    1f44:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0, Local_u8Iterator;
    1f46:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate CGRAM address whose each block is 9 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM address command to LCD, with setting bit 6, clearing bit 7*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	80 5c       	subi	r24, 0xC0	; 192
    1f60:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_voidSendCommand>

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1f64:	19 82       	std	Y+1, r1	; 0x01
    1f66:	0e c0       	rjmp	.+28     	; 0x1f84 <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	80 81       	ld	r24, Z
    1f7a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;

	/*send CGRAM address command to LCD, with setting bit 6, clearing bit 7*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	88 30       	cpi	r24, 0x08	; 8
    1f88:	78 f3       	brcs	.-34     	; 0x1f68 <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*go back to DDRAM to display the pattern*/
	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_voidGoToXY>
	/*display the pattern written in the CGRAM*/
	LCD_voidSendData(Copy_u8PatternNumber);
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
}
    1f98:	27 96       	adiw	r28, 0x07	; 7
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_Number)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	2a 97       	sbiw	r28, 0x0a	; 10
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	6f 83       	std	Y+7, r22	; 0x07
    1fc0:	78 87       	std	Y+8, r23	; 0x08
    1fc2:	89 87       	std	Y+9, r24	; 0x09
    1fc4:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Local_u8Number,Local_u8FirstNum=0;
    1fc6:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Loop;
	if(Copy_Number==0)
    1fc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fca:	98 85       	ldd	r25, Y+8	; 0x08
    1fcc:	a9 85       	ldd	r26, Y+9	; 0x09
    1fce:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	a1 05       	cpc	r26, r1
    1fd4:	b1 05       	cpc	r27, r1
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <LCD_voidSendNumber+0x36>
	{
		LCD_voidSendData(48);
    1fd8:	80 e3       	ldi	r24, 0x30	; 48
    1fda:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
    1fde:	51 c0       	rjmp	.+162    	; 0x2082 <LCD_voidSendNumber+0xd8>
	}
	else
	{
		for(Local_u32Loop=1000000;Local_u32Loop>0;Local_u32Loop/=10)
    1fe0:	80 e4       	ldi	r24, 0x40	; 64
    1fe2:	92 e4       	ldi	r25, 0x42	; 66
    1fe4:	af e0       	ldi	r26, 0x0F	; 15
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	ab 83       	std	Y+3, r26	; 0x03
    1fee:	bc 83       	std	Y+4, r27	; 0x04
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_voidSendNumber+0xc6>
		{
			Local_u8Number=Copy_Number/Local_u32Loop;
    1ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff4:	98 85       	ldd	r25, Y+8	; 0x08
    1ff6:	a9 85       	ldd	r26, Y+9	; 0x09
    1ff8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ffa:	29 81       	ldd	r18, Y+1	; 0x01
    1ffc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ffe:	4b 81       	ldd	r20, Y+3	; 0x03
    2000:	5c 81       	ldd	r21, Y+4	; 0x04
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__udivmodsi4>
    200a:	da 01       	movw	r26, r20
    200c:	c9 01       	movw	r24, r18
    200e:	8e 83       	std	Y+6, r24	; 0x06
			if(Local_u8Number==0 && Local_u8FirstNum==0)
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
    2012:	88 23       	and	r24, r24
    2014:	19 f4       	brne	.+6      	; 0x201c <LCD_voidSendNumber+0x72>
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	88 23       	and	r24, r24
    201a:	c1 f0       	breq	.+48     	; 0x204c <LCD_voidSendNumber+0xa2>
			{
				continue;
			}
			else
			{
				LCD_voidSendData(Local_u8Number+48);
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	80 5d       	subi	r24, 0xD0	; 208
    2020:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
				Copy_Number=Copy_Number%Local_u32Loop;
    2024:	8f 81       	ldd	r24, Y+7	; 0x07
    2026:	98 85       	ldd	r25, Y+8	; 0x08
    2028:	a9 85       	ldd	r26, Y+9	; 0x09
    202a:	ba 85       	ldd	r27, Y+10	; 0x0a
    202c:	29 81       	ldd	r18, Y+1	; 0x01
    202e:	3a 81       	ldd	r19, Y+2	; 0x02
    2030:	4b 81       	ldd	r20, Y+3	; 0x03
    2032:	5c 81       	ldd	r21, Y+4	; 0x04
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__udivmodsi4>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
				Local_u8FirstNum=1;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	8d 83       	std	Y+5, r24	; 0x05
	{
		LCD_voidSendData(48);
	}
	else
	{
		for(Local_u32Loop=1000000;Local_u32Loop>0;Local_u32Loop/=10)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	ab 81       	ldd	r26, Y+3	; 0x03
    2052:	bc 81       	ldd	r27, Y+4	; 0x04
    2054:	2a e0       	ldi	r18, 0x0A	; 10
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__udivmodsi4>
    2064:	da 01       	movw	r26, r20
    2066:	c9 01       	movw	r24, r18
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	ab 83       	std	Y+3, r26	; 0x03
    206e:	bc 83       	std	Y+4, r27	; 0x04
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	ab 81       	ldd	r26, Y+3	; 0x03
    2076:	bc 81       	ldd	r27, Y+4	; 0x04
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	a1 05       	cpc	r26, r1
    207c:	b1 05       	cpc	r27, r1
    207e:	09 f0       	breq	.+2      	; 0x2082 <LCD_voidSendNumber+0xd8>
    2080:	b8 cf       	rjmp	.-144    	; 0x1ff2 <LCD_voidSendNumber+0x48>
				Copy_Number=Copy_Number%Local_u32Loop;
				Local_u8FirstNum=1;
			}
		}
	}
}
    2082:	2a 96       	adiw	r28, 0x0a	; 10
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    209c:	ea e3       	ldi	r30, 0x3A	; 58
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    20a4:	e7 e3       	ldi	r30, 0x37	; 55
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	10 82       	st	Z, r1
    DDRC=PORTC_DIR;
    20aa:	e4 e3       	ldi	r30, 0x34	; 52
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	10 82       	st	Z, r1
    DDRD=PORTD_DIR;
    20b0:	e1 e3       	ldi	r30, 0x31	; 49
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	10 82       	st	Z, r1

    PORTA=PORTA_INITIAL_VALUE;
    20b6:	eb e3       	ldi	r30, 0x3B	; 59
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	10 82       	st	Z, r1
    PORTB=PORTB_INITIAL_VALUE;
    20bc:	e8 e3       	ldi	r30, 0x38	; 56
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	10 82       	st	Z, r1
    PORTC=PORTC_INITIAL_VALUE;
    20c2:	e5 e3       	ldi	r30, 0x35	; 53
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	10 82       	st	Z, r1
    PORTD=PORTD_INITIAL_VALUE;
    20c8:	e2 e3       	ldi	r30, 0x32	; 50
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	84 e0       	ldi	r24, 0x04	; 4
    20ce:	80 83       	st	Z, r24
}
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <main>:
#include "PORT_interface.h"
#include "LCD_interface.h"
#include "ADC_interface.h"

int main()
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	6c 97       	sbiw	r28, 0x1c	; 28
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
	u8 number=0;
    20ea:	1a 82       	std	Y+2, r1	; 0x02

	u8 flag=0;
    20ec:	19 82       	std	Y+1, r1	; 0x01
			0b10101,
			0b01110,
			0b00100,
			0b01010,
			0b10001
	};
    20ee:	ce 01       	movw	r24, r28
    20f0:	03 96       	adiw	r24, 0x03	; 3
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
    20f6:	e0 e7       	ldi	r30, 0x70	; 112
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	fe 8b       	std	Y+22, r31	; 0x16
    20fc:	ed 8b       	std	Y+21, r30	; 0x15
    20fe:	f8 e0       	ldi	r31, 0x08	; 8
    2100:	ff 8b       	std	Y+23, r31	; 0x17
    2102:	ed 89       	ldd	r30, Y+21	; 0x15
    2104:	fe 89       	ldd	r31, Y+22	; 0x16
    2106:	00 80       	ld	r0, Z
    2108:	8d 89       	ldd	r24, Y+21	; 0x15
    210a:	9e 89       	ldd	r25, Y+22	; 0x16
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	9e 8b       	std	Y+22, r25	; 0x16
    2110:	8d 8b       	std	Y+21, r24	; 0x15
    2112:	eb 89       	ldd	r30, Y+19	; 0x13
    2114:	fc 89       	ldd	r31, Y+20	; 0x14
    2116:	00 82       	st	Z, r0
    2118:	8b 89       	ldd	r24, Y+19	; 0x13
    211a:	9c 89       	ldd	r25, Y+20	; 0x14
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	9f 89       	ldd	r25, Y+23	; 0x17
    2124:	91 50       	subi	r25, 0x01	; 1
    2126:	9f 8b       	std	Y+23, r25	; 0x17
    2128:	ef 89       	ldd	r30, Y+23	; 0x17
    212a:	ee 23       	and	r30, r30
    212c:	51 f7       	brne	.-44     	; 0x2102 <main+0x2c>
			0b10100,
			0b10100,
			0b01000,
			0b01010,
			0b01101
	};
    212e:	ce 01       	movw	r24, r28
    2130:	0b 96       	adiw	r24, 0x0b	; 11
    2132:	99 8f       	std	Y+25, r25	; 0x19
    2134:	88 8f       	std	Y+24, r24	; 0x18
    2136:	e8 e6       	ldi	r30, 0x68	; 104
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	fb 8f       	std	Y+27, r31	; 0x1b
    213c:	ea 8f       	std	Y+26, r30	; 0x1a
    213e:	f8 e0       	ldi	r31, 0x08	; 8
    2140:	fc 8f       	std	Y+28, r31	; 0x1c
    2142:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2144:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2146:	00 80       	ld	r0, Z
    2148:	8a 8d       	ldd	r24, Y+26	; 0x1a
    214a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	9b 8f       	std	Y+27, r25	; 0x1b
    2150:	8a 8f       	std	Y+26, r24	; 0x1a
    2152:	e8 8d       	ldd	r30, Y+24	; 0x18
    2154:	f9 8d       	ldd	r31, Y+25	; 0x19
    2156:	00 82       	st	Z, r0
    2158:	88 8d       	ldd	r24, Y+24	; 0x18
    215a:	99 8d       	ldd	r25, Y+25	; 0x19
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	99 8f       	std	Y+25, r25	; 0x19
    2160:	88 8f       	std	Y+24, r24	; 0x18
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	91 50       	subi	r25, 0x01	; 1
    2166:	9c 8f       	std	Y+28, r25	; 0x1c
    2168:	ec 8d       	ldd	r30, Y+28	; 0x1c
    216a:	ee 23       	and	r30, r30
    216c:	51 f7       	brne	.-44     	; 0x2142 <main+0x6c>

	LCD_voidWriteSpecialCharacter(Character1,0,0,0);
    216e:	ce 01       	movw	r24, r28
    2170:	03 96       	adiw	r24, 0x03	; 3
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_voidWriteSpecialCharacter>
	LCD_voidWriteSpecialCharacter(Character2,1,1,0);
    217c:	ce 01       	movw	r24, r28
    217e:	0b 96       	adiw	r24, 0x0b	; 11
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_voidWriteSpecialCharacter>

	LCD_voidInit();
    218a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_voidInit>
	ADC_voidInit();
    218e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

	while(1)
	{
		ADC_u8StartConversion_Synch(DIO_u8PIN0,&number);
    2192:	9e 01       	movw	r18, r28
    2194:	2e 5f       	subi	r18, 0xFE	; 254
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	b9 01       	movw	r22, r18
    219c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversion_Synch>
		if(number > 100 &&flag==0){
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	85 36       	cpi	r24, 0x65	; 101
    21a4:	40 f0       	brcs	.+16     	; 0x21b6 <main+0xe0>
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	88 23       	and	r24, r24
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <main+0xe0>
			LCD_voidSendData(1);
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
			flag=1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	89 83       	std	Y+1, r24	; 0x01

		}
		if (number<100 &&flag==1)
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	84 36       	cpi	r24, 0x64	; 100
    21ba:	58 f7       	brcc	.-42     	; 0x2192 <main+0xbc>
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	41 f7       	brne	.-48     	; 0x2192 <main+0xbc>
		{
			LCD_voidSendData(0);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_voidSendData>
			flag=0;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	e3 cf       	rjmp	.-58     	; 0x2192 <main+0xbc>

000021cc <__udivmodsi4>:
    21cc:	a1 e2       	ldi	r26, 0x21	; 33
    21ce:	1a 2e       	mov	r1, r26
    21d0:	aa 1b       	sub	r26, r26
    21d2:	bb 1b       	sub	r27, r27
    21d4:	fd 01       	movw	r30, r26
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <__udivmodsi4_ep>

000021d8 <__udivmodsi4_loop>:
    21d8:	aa 1f       	adc	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	ee 1f       	adc	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	a2 17       	cp	r26, r18
    21e2:	b3 07       	cpc	r27, r19
    21e4:	e4 07       	cpc	r30, r20
    21e6:	f5 07       	cpc	r31, r21
    21e8:	20 f0       	brcs	.+8      	; 0x21f2 <__udivmodsi4_ep>
    21ea:	a2 1b       	sub	r26, r18
    21ec:	b3 0b       	sbc	r27, r19
    21ee:	e4 0b       	sbc	r30, r20
    21f0:	f5 0b       	sbc	r31, r21

000021f2 <__udivmodsi4_ep>:
    21f2:	66 1f       	adc	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	1a 94       	dec	r1
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <__udivmodsi4_loop>
    21fe:	60 95       	com	r22
    2200:	70 95       	com	r23
    2202:	80 95       	com	r24
    2204:	90 95       	com	r25
    2206:	9b 01       	movw	r18, r22
    2208:	ac 01       	movw	r20, r24
    220a:	bd 01       	movw	r22, r26
    220c:	cf 01       	movw	r24, r30
    220e:	08 95       	ret

00002210 <__prologue_saves__>:
    2210:	2f 92       	push	r2
    2212:	3f 92       	push	r3
    2214:	4f 92       	push	r4
    2216:	5f 92       	push	r5
    2218:	6f 92       	push	r6
    221a:	7f 92       	push	r7
    221c:	8f 92       	push	r8
    221e:	9f 92       	push	r9
    2220:	af 92       	push	r10
    2222:	bf 92       	push	r11
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	ca 1b       	sub	r28, r26
    223a:	db 0b       	sbc	r29, r27
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	09 94       	ijmp

00002248 <__epilogue_restores__>:
    2248:	2a 88       	ldd	r2, Y+18	; 0x12
    224a:	39 88       	ldd	r3, Y+17	; 0x11
    224c:	48 88       	ldd	r4, Y+16	; 0x10
    224e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2250:	6e 84       	ldd	r6, Y+14	; 0x0e
    2252:	7d 84       	ldd	r7, Y+13	; 0x0d
    2254:	8c 84       	ldd	r8, Y+12	; 0x0c
    2256:	9b 84       	ldd	r9, Y+11	; 0x0b
    2258:	aa 84       	ldd	r10, Y+10	; 0x0a
    225a:	b9 84       	ldd	r11, Y+9	; 0x09
    225c:	c8 84       	ldd	r12, Y+8	; 0x08
    225e:	df 80       	ldd	r13, Y+7	; 0x07
    2260:	ee 80       	ldd	r14, Y+6	; 0x06
    2262:	fd 80       	ldd	r15, Y+5	; 0x05
    2264:	0c 81       	ldd	r16, Y+4	; 0x04
    2266:	1b 81       	ldd	r17, Y+3	; 0x03
    2268:	aa 81       	ldd	r26, Y+2	; 0x02
    226a:	b9 81       	ldd	r27, Y+1	; 0x01
    226c:	ce 0f       	add	r28, r30
    226e:	d1 1d       	adc	r29, r1
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	ed 01       	movw	r28, r26
    227c:	08 95       	ret

0000227e <_exit>:
    227e:	f8 94       	cli

00002280 <__stop_program>:
    2280:	ff cf       	rjmp	.-2      	; 0x2280 <__stop_program>
