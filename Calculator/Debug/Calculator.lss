
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000025ac  00002640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000a2  008000a2  00002682  2**0
                  ALLOC
  3 .stab         00001d34  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c2d  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005125  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <main>
      8a:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     b60:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_u8SetPinValue+0x24>
     b68:	f4 c0       	rjmp	.+488    	; 0xd52 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	88 23       	and	r24, r24
     b6e:	09 f0       	breq	.+2      	; 0xb72 <DIO_u8SetPinValue+0x2c>
     b70:	77 c0       	rjmp	.+238    	; 0xc60 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	38 87       	std	Y+8, r19	; 0x08
     b7a:	2f 83       	std	Y+7, r18	; 0x07
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	59 f1       	breq	.+86     	; 0xbdc <DIO_u8SetPinValue+0x96>
     b86:	2f 81       	ldd	r18, Y+7	; 0x07
     b88:	38 85       	ldd	r19, Y+8	; 0x08
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <DIO_u8SetPinValue+0x54>
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	69 f0       	breq	.+26     	; 0xbb2 <DIO_u8SetPinValue+0x6c>
     b98:	60 c0       	rjmp	.+192    	; 0xc5a <DIO_u8SetPinValue+0x114>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	89 f1       	breq	.+98     	; 0xc06 <DIO_u8SetPinValue+0xc0>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <DIO_u8SetPinValue+0x6a>
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <DIO_u8SetPinValue+0xea>
     bb0:	54 c0       	rjmp	.+168    	; 0xc5a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     bb2:	ab e3       	ldi	r26, 0x3B	; 59
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_u8SetPinValue+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_u8SetPinValue+0x86>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	bd c0       	rjmp	.+378    	; 0xd56 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     bdc:	a8 e3       	ldi	r26, 0x38	; 56
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e8 e3       	ldi	r30, 0x38	; 56
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_u8SetPinValue+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_u8SetPinValue+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	a8 c0       	rjmp	.+336    	; 0xd56 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     c06:	a5 e3       	ldi	r26, 0x35	; 53
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e5 e3       	ldi	r30, 0x35	; 53
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_u8SetPinValue+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_u8SetPinValue+0xda>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	93 c0       	rjmp	.+294    	; 0xd56 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
     c30:	a2 e3       	ldi	r26, 0x32	; 50
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e2 e3       	ldi	r30, 0x32	; 50
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_u8SetPinValue+0x108>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_u8SetPinValue+0x104>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7e c0       	rjmp	.+252    	; 0xd56 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	7b c0       	rjmp	.+246    	; 0xd56 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	09 f0       	breq	.+2      	; 0xc68 <DIO_u8SetPinValue+0x122>
     c66:	72 c0       	rjmp	.+228    	; 0xd4c <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3e 83       	std	Y+6, r19	; 0x06
     c70:	2d 83       	std	Y+5, r18	; 0x05
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_u8SetPinValue+0x188>
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_u8SetPinValue+0x14a>
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_u8SetPinValue+0x160>
     c8e:	5b c0       	rjmp	.+182    	; 0xd46 <DIO_u8SetPinValue+0x200>
     c90:	2d 81       	ldd	r18, Y+5	; 0x05
     c92:	3e 81       	ldd	r19, Y+6	; 0x06
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_u8SetPinValue+0x1b0>
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_u8SetPinValue+0x1d8>
     ca4:	50 c0       	rjmp	.+160    	; 0xd46 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
     ca6:	ab e3       	ldi	r26, 0x3B	; 59
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	eb e3       	ldi	r30, 0x3B	; 59
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_u8SetPinValue+0x17e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_u8SetPinValue+0x17a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	44 c0       	rjmp	.+136    	; 0xd56 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
     cce:	a8 e3       	ldi	r26, 0x38	; 56
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e8 e3       	ldi	r30, 0x38	; 56
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_u8SetPinValue+0x1a6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_u8SetPinValue+0x1a2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	30 c0       	rjmp	.+96     	; 0xd56 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
     cf6:	a5 e3       	ldi	r26, 0x35	; 53
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e5 e3       	ldi	r30, 0x35	; 53
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_u8SetPinValue+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_u8SetPinValue+0x1ca>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	1c c0       	rjmp	.+56     	; 0xd56 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
     d1e:	a2 e3       	ldi	r26, 0x32	; 50
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e2 e3       	ldi	r30, 0x32	; 50
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_u8SetPinValue+0x1f6>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_u8SetPinValue+0x1f2>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	08 c0       	rjmp	.+16     	; 0xd56 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
     d56:	89 81       	ldd	r24, Y+1	; 0x01
}
     d58:	28 96       	adiw	r28, 0x08	; 8
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <DIO_u8SetPortValue+0x6>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <DIO_u8SetPortValue+0x8>
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     d7c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	a8 f5       	brcc	.+106    	; 0xdee <DIO_u8SetPortValue+0x84>
	{
		switch(Copy_u8Port)
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	3d 83       	std	Y+5, r19	; 0x05
     d8c:	2c 83       	std	Y+4, r18	; 0x04
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	9d 81       	ldd	r25, Y+5	; 0x05
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 05       	cpc	r25, r1
     d96:	d1 f0       	breq	.+52     	; 0xdcc <DIO_u8SetPortValue+0x62>
     d98:	2c 81       	ldd	r18, Y+4	; 0x04
     d9a:	3d 81       	ldd	r19, Y+5	; 0x05
     d9c:	22 30       	cpi	r18, 0x02	; 2
     d9e:	31 05       	cpc	r19, r1
     da0:	2c f4       	brge	.+10     	; 0xdac <DIO_u8SetPortValue+0x42>
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	9d 81       	ldd	r25, Y+5	; 0x05
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	61 f0       	breq	.+24     	; 0xdc2 <DIO_u8SetPortValue+0x58>
     daa:	1f c0       	rjmp	.+62     	; 0xdea <DIO_u8SetPortValue+0x80>
     dac:	2c 81       	ldd	r18, Y+4	; 0x04
     dae:	3d 81       	ldd	r19, Y+5	; 0x05
     db0:	22 30       	cpi	r18, 0x02	; 2
     db2:	31 05       	cpc	r19, r1
     db4:	81 f0       	breq	.+32     	; 0xdd6 <DIO_u8SetPortValue+0x6c>
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	91 05       	cpc	r25, r1
     dbe:	81 f0       	breq	.+32     	; 0xde0 <DIO_u8SetPortValue+0x76>
     dc0:	14 c0       	rjmp	.+40     	; 0xdea <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     dc2:	eb e3       	ldi	r30, 0x3B	; 59
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	80 83       	st	Z, r24
     dca:	11 c0       	rjmp	.+34     	; 0xdee <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     dcc:	e8 e3       	ldi	r30, 0x38	; 56
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	80 83       	st	Z, r24
     dd4:	0c c0       	rjmp	.+24     	; 0xdee <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     dd6:	e5 e3       	ldi	r30, 0x35	; 53
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	80 83       	st	Z, r24
     dde:	07 c0       	rjmp	.+14     	; 0xdee <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     de0:	e2 e3       	ldi	r30, 0x32	; 50
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	80 83       	st	Z, r24
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_u8SetPortValue+0x84>
		default: Local_u8ErrorState=1; break;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	27 97       	sbiw	r28, 0x07	; 7
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	8a 83       	std	Y+2, r24	; 0x02
     e16:	6b 83       	std	Y+3, r22	; 0x03
     e18:	5d 83       	std	Y+5, r21	; 0x05
     e1a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     e1c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7))
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	09 f4       	brne	.+2      	; 0xe28 <DIO_u8GetPinValue+0x28>
     e26:	78 c0       	rjmp	.+240    	; 0xf18 <DIO_u8GetPinValue+0x118>
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	88 30       	cpi	r24, 0x08	; 8
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <DIO_u8GetPinValue+0x30>
     e2e:	74 c0       	rjmp	.+232    	; 0xf18 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	3f 83       	std	Y+7, r19	; 0x07
     e38:	2e 83       	std	Y+6, r18	; 0x06
     e3a:	4e 81       	ldd	r20, Y+6	; 0x06
     e3c:	5f 81       	ldd	r21, Y+7	; 0x07
     e3e:	41 30       	cpi	r20, 0x01	; 1
     e40:	51 05       	cpc	r21, r1
     e42:	59 f1       	breq	.+86     	; 0xe9a <DIO_u8GetPinValue+0x9a>
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	91 05       	cpc	r25, r1
     e4c:	34 f4       	brge	.+12     	; 0xe5a <DIO_u8GetPinValue+0x5a>
     e4e:	2e 81       	ldd	r18, Y+6	; 0x06
     e50:	3f 81       	ldd	r19, Y+7	; 0x07
     e52:	21 15       	cp	r18, r1
     e54:	31 05       	cpc	r19, r1
     e56:	69 f0       	breq	.+26     	; 0xe72 <DIO_u8GetPinValue+0x72>
     e58:	5c c0       	rjmp	.+184    	; 0xf12 <DIO_u8GetPinValue+0x112>
     e5a:	4e 81       	ldd	r20, Y+6	; 0x06
     e5c:	5f 81       	ldd	r21, Y+7	; 0x07
     e5e:	42 30       	cpi	r20, 0x02	; 2
     e60:	51 05       	cpc	r21, r1
     e62:	79 f1       	breq	.+94     	; 0xec2 <DIO_u8GetPinValue+0xc2>
     e64:	8e 81       	ldd	r24, Y+6	; 0x06
     e66:	9f 81       	ldd	r25, Y+7	; 0x07
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	91 05       	cpc	r25, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <DIO_u8GetPinValue+0x70>
     e6e:	3d c0       	rjmp	.+122    	; 0xeea <DIO_u8GetPinValue+0xea>
     e70:	50 c0       	rjmp	.+160    	; 0xf12 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     e72:	e9 e3       	ldi	r30, 0x39	; 57
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a9 01       	movw	r20, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_u8GetPinValue+0x8a>
     e86:	55 95       	asr	r21
     e88:	47 95       	ror	r20
     e8a:	8a 95       	dec	r24
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_u8GetPinValue+0x86>
     e8e:	ca 01       	movw	r24, r20
     e90:	81 70       	andi	r24, 0x01	; 1
     e92:	ec 81       	ldd	r30, Y+4	; 0x04
     e94:	fd 81       	ldd	r31, Y+5	; 0x05
     e96:	80 83       	st	Z, r24
     e98:	41 c0       	rjmp	.+130    	; 0xf1c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     e9a:	e6 e3       	ldi	r30, 0x36	; 54
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_u8GetPinValue+0xb2>
     eae:	55 95       	asr	r21
     eb0:	47 95       	ror	r20
     eb2:	8a 95       	dec	r24
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_u8GetPinValue+0xae>
     eb6:	ca 01       	movw	r24, r20
     eb8:	81 70       	andi	r24, 0x01	; 1
     eba:	ec 81       	ldd	r30, Y+4	; 0x04
     ebc:	fd 81       	ldd	r31, Y+5	; 0x05
     ebe:	80 83       	st	Z, r24
     ec0:	2d c0       	rjmp	.+90     	; 0xf1c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     ec2:	e3 e3       	ldi	r30, 0x33	; 51
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a9 01       	movw	r20, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_u8GetPinValue+0xda>
     ed6:	55 95       	asr	r21
     ed8:	47 95       	ror	r20
     eda:	8a 95       	dec	r24
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_u8GetPinValue+0xd6>
     ede:	ca 01       	movw	r24, r20
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	ec 81       	ldd	r30, Y+4	; 0x04
     ee4:	fd 81       	ldd	r31, Y+5	; 0x05
     ee6:	80 83       	st	Z, r24
     ee8:	19 c0       	rjmp	.+50     	; 0xf1c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     eea:	e0 e3       	ldi	r30, 0x30	; 48
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_u8GetPinValue+0x102>
     efe:	55 95       	asr	r21
     f00:	47 95       	ror	r20
     f02:	8a 95       	dec	r24
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_u8GetPinValue+0xfe>
     f06:	ca 01       	movw	r24, r20
     f08:	81 70       	andi	r24, 0x01	; 1
     f0a:	ec 81       	ldd	r30, Y+4	; 0x04
     f0c:	fd 81       	ldd	r31, Y+5	; 0x05
     f0e:	80 83       	st	Z, r24
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1; break;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01

}
     f1e:	27 96       	adiw	r28, 0x07	; 7
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <KPD_u8GetPressedKey+0x6>
     f36:	00 d0       	rcall	.+0      	; 0xf38 <KPD_u8GetPressedKey+0x8>
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIndex,Local_u8RowIndex,Local_u8PinState;
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[4][4]=KPD_ARR_VALUE;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
     f42:	1a 82       	std	Y+2, r1	; 0x02
     f44:	5e c0       	rjmp	.+188    	; 0x1002 <KPD_u8GetPressedKey+0xd2>
	{
		/*activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	fc 01       	movw	r30, r24
     f4e:	e2 57       	subi	r30, 0x72	; 114
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	90 81       	ld	r25, Z
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	69 2f       	mov	r22, r25
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
     f5e:	19 82       	std	Y+1, r1	; 0x01
     f60:	3d c0       	rjmp	.+122    	; 0xfdc <KPD_u8GetPressedKey+0xac>
		{
			/*read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	fc 01       	movw	r30, r24
     f6a:	e6 57       	subi	r30, 0x76	; 118
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	90 81       	ld	r25, Z
     f70:	9e 01       	movw	r18, r28
     f72:	2c 5f       	subi	r18, 0xFC	; 252
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	69 2f       	mov	r22, r25
     f7a:	a9 01       	movw	r20, r18
     f7c:	0e 94 00 07 	call	0xe00	; 0xe00 <DIO_u8GetPinValue>

			/*check if switch pressed(low because connected pull up 0=high) (switch is pressed when low because is active low)*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	88 23       	and	r24, r24
     f84:	41 f5       	brne	.+80     	; 0xfd6 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	48 2f       	mov	r20, r24
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	ca 01       	movw	r24, r20
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	fc 01       	movw	r30, r24
     fa2:	ee 56       	subi	r30, 0x6E	; 110
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 81       	ld	r24, Z
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	0f c0       	rjmp	.+30     	; 0xfca <KPD_u8GetPressedKey+0x9a>

				/*Polling (busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	fc 01       	movw	r30, r24
     fb4:	e6 57       	subi	r30, 0x76	; 118
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	90 81       	ld	r25, Z
     fba:	9e 01       	movw	r18, r28
     fbc:	2c 5f       	subi	r18, 0xFC	; 252
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	69 2f       	mov	r22, r25
     fc4:	a9 01       	movw	r20, r18
     fc6:	0e 94 00 07 	call	0xe00	; 0xe00 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*Polling (busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	88 23       	and	r24, r24
     fce:	71 f3       	breq	.-36     	; 0xfac <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
				}
				return Local_u8PressedKey;
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	8d 83       	std	Y+5, r24	; 0x05
     fd4:	1c c0       	rjmp	.+56     	; 0x100e <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
	{
		/*activate current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	84 30       	cpi	r24, 0x04	; 4
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <KPD_u8GetPressedKey+0xb4>
     fe2:	bf cf       	rjmp	.-130    	; 0xf62 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}

		}
		/*deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	e2 57       	subi	r30, 0x72	; 114
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	90 81       	ld	r25, Z
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	69 2f       	mov	r22, r25
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIndex,Local_u8RowIndex,Local_u8PinState;
	static u8 Local_u8KPDArr[4][4]=KPD_ARR_VALUE;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	08 f4       	brcc	.+2      	; 0x100a <KPD_u8GetPressedKey+0xda>
    1008:	9e cf       	rjmp	.-196    	; 0xf46 <KPD_u8GetPressedKey+0x16>
		}
		/*deactivate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <LCD_voidSendCommand>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	e9 97       	sbiw	r28, 0x39	; 57
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(LCD_CTRL_8_PORT,LCD_E_PIN,DIO_u8PIN_LOW);

#elif LCD_Bit_Mode == Four_Bits_Mode

	/* Set RS Pin to Low for Command */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RS,DIO_u8PIN_LOW);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Set RW to Low for Write */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RW,DIO_u8PIN_LOW);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Set Command to Data Pins */
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Command>>7)&1));
    104a:	89 ad       	ldd	r24, Y+57	; 0x39
    104c:	98 2f       	mov	r25, r24
    104e:	99 1f       	adc	r25, r25
    1050:	99 27       	eor	r25, r25
    1052:	99 1f       	adc	r25, r25
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	49 2f       	mov	r20, r25
    105a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Command>>6)&1));
    105e:	89 ad       	ldd	r24, Y+57	; 0x39
    1060:	82 95       	swap	r24
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	83 70       	andi	r24, 0x03	; 3
    1068:	98 2f       	mov	r25, r24
    106a:	91 70       	andi	r25, 0x01	; 1
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	49 2f       	mov	r20, r25
    1072:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Command>>5)&1));
    1076:	89 ad       	ldd	r24, Y+57	; 0x39
    1078:	82 95       	swap	r24
    107a:	86 95       	lsr	r24
    107c:	87 70       	andi	r24, 0x07	; 7
    107e:	98 2f       	mov	r25, r24
    1080:	91 70       	andi	r25, 0x01	; 1
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	49 2f       	mov	r20, r25
    1088:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Command>>4)&1));
    108c:	89 ad       	ldd	r24, Y+57	; 0x39
    108e:	82 95       	swap	r24
    1090:	8f 70       	andi	r24, 0x0F	; 15
    1092:	98 2f       	mov	r25, r24
    1094:	91 70       	andi	r25, 0x01	; 1
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	63 e0       	ldi	r22, 0x03	; 3
    109a:	49 2f       	mov	r20, r25
    109c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 ef       	ldi	r26, 0xF0	; 240
    10b0:	b1 e4       	ldi	r27, 0x41	; 65
    10b2:	8d ab       	std	Y+53, r24	; 0x35
    10b4:	9e ab       	std	Y+54, r25	; 0x36
    10b6:	af ab       	std	Y+55, r26	; 0x37
    10b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6d a9       	ldd	r22, Y+53	; 0x35
    10bc:	7e a9       	ldd	r23, Y+54	; 0x36
    10be:	8f a9       	ldd	r24, Y+55	; 0x37
    10c0:	98 ad       	ldd	r25, Y+56	; 0x38
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a ef       	ldi	r20, 0xFA	; 250
    10c8:	54 e4       	ldi	r21, 0x44	; 68
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	89 ab       	std	Y+49, r24	; 0x31
    10d4:	9a ab       	std	Y+50, r25	; 0x32
    10d6:	ab ab       	std	Y+51, r26	; 0x33
    10d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10da:	69 a9       	ldd	r22, Y+49	; 0x31
    10dc:	7a a9       	ldd	r23, Y+50	; 0x32
    10de:	8b a9       	ldd	r24, Y+51	; 0x33
    10e0:	9c a9       	ldd	r25, Y+52	; 0x34
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <LCD_voidSendCommand+0xdc>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	98 ab       	std	Y+48, r25	; 0x30
    10f8:	8f a7       	std	Y+47, r24	; 0x2f
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <LCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
    10fc:	69 a9       	ldd	r22, Y+49	; 0x31
    10fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1100:	8b a9       	ldd	r24, Y+51	; 0x33
    1102:	9c a9       	ldd	r25, Y+52	; 0x34
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <LCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6d a9       	ldd	r22, Y+53	; 0x35
    1116:	7e a9       	ldd	r23, Y+54	; 0x36
    1118:	8f a9       	ldd	r24, Y+55	; 0x37
    111a:	98 ad       	ldd	r25, Y+56	; 0x38
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	98 ab       	std	Y+48, r25	; 0x30
    113a:	8f a7       	std	Y+47, r24	; 0x2f
    113c:	0f c0       	rjmp	.+30     	; 0x115c <LCD_voidSendCommand+0x13c>
    113e:	88 ec       	ldi	r24, 0xC8	; 200
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9e a7       	std	Y+46, r25	; 0x2e
    1144:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1146:	8d a5       	ldd	r24, Y+45	; 0x2d
    1148:	9e a5       	ldd	r25, Y+46	; 0x2e
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <LCD_voidSendCommand+0x12a>
    114e:	9e a7       	std	Y+46, r25	; 0x2e
    1150:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	8f a5       	ldd	r24, Y+47	; 0x2f
    1154:	98 a9       	ldd	r25, Y+48	; 0x30
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	98 ab       	std	Y+48, r25	; 0x30
    115a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	8f a5       	ldd	r24, Y+47	; 0x2f
    115e:	98 a9       	ldd	r25, Y+48	; 0x30
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <LCD_voidSendCommand+0x11e>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <LCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	69 a9       	ldd	r22, Y+49	; 0x31
    1168:	7a a9       	ldd	r23, Y+50	; 0x32
    116a:	8b a9       	ldd	r24, Y+51	; 0x33
    116c:	9c a9       	ldd	r25, Y+52	; 0x34
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	98 ab       	std	Y+48, r25	; 0x30
    1178:	8f a7       	std	Y+47, r24	; 0x2f
    117a:	8f a5       	ldd	r24, Y+47	; 0x2f
    117c:	98 a9       	ldd	r25, Y+48	; 0x30
    117e:	9c a7       	std	Y+44, r25	; 0x2c
    1180:	8b a7       	std	Y+43, r24	; 0x2b
    1182:	8b a5       	ldd	r24, Y+43	; 0x2b
    1184:	9c a5       	ldd	r25, Y+44	; 0x2c
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_voidSendCommand+0x166>
    118a:	9c a7       	std	Y+44, r25	; 0x2c
    118c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e4       	ldi	r27, 0x40	; 64
    11a0:	8f a3       	std	Y+39, r24	; 0x27
    11a2:	98 a7       	std	Y+40, r25	; 0x28
    11a4:	a9 a7       	std	Y+41, r26	; 0x29
    11a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6f a1       	ldd	r22, Y+39	; 0x27
    11aa:	78 a5       	ldd	r23, Y+40	; 0x28
    11ac:	89 a5       	ldd	r24, Y+41	; 0x29
    11ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a ef       	ldi	r20, 0xFA	; 250
    11b6:	54 e4       	ldi	r21, 0x44	; 68
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8b a3       	std	Y+35, r24	; 0x23
    11c2:	9c a3       	std	Y+36, r25	; 0x24
    11c4:	ad a3       	std	Y+37, r26	; 0x25
    11c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11c8:	6b a1       	ldd	r22, Y+35	; 0x23
    11ca:	7c a1       	ldd	r23, Y+36	; 0x24
    11cc:	8d a1       	ldd	r24, Y+37	; 0x25
    11ce:	9e a1       	ldd	r25, Y+38	; 0x26
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <LCD_voidSendCommand+0x1ca>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9a a3       	std	Y+34, r25	; 0x22
    11e6:	89 a3       	std	Y+33, r24	; 0x21
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <LCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
    11ea:	6b a1       	ldd	r22, Y+35	; 0x23
    11ec:	7c a1       	ldd	r23, Y+36	; 0x24
    11ee:	8d a1       	ldd	r24, Y+37	; 0x25
    11f0:	9e a1       	ldd	r25, Y+38	; 0x26
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <LCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6f a1       	ldd	r22, Y+39	; 0x27
    1204:	78 a5       	ldd	r23, Y+40	; 0x28
    1206:	89 a5       	ldd	r24, Y+41	; 0x29
    1208:	9a a5       	ldd	r25, Y+42	; 0x2a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9a a3       	std	Y+34, r25	; 0x22
    1228:	89 a3       	std	Y+33, r24	; 0x21
    122a:	0f c0       	rjmp	.+30     	; 0x124a <LCD_voidSendCommand+0x22a>
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	98 a3       	std	Y+32, r25	; 0x20
    1232:	8f 8f       	std	Y+31, r24	; 0x1f
    1234:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1236:	98 a1       	ldd	r25, Y+32	; 0x20
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <LCD_voidSendCommand+0x218>
    123c:	98 a3       	std	Y+32, r25	; 0x20
    123e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	89 a1       	ldd	r24, Y+33	; 0x21
    1242:	9a a1       	ldd	r25, Y+34	; 0x22
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9a a3       	std	Y+34, r25	; 0x22
    1248:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	89 a1       	ldd	r24, Y+33	; 0x21
    124c:	9a a1       	ldd	r25, Y+34	; 0x22
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <LCD_voidSendCommand+0x20c>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <LCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	6b a1       	ldd	r22, Y+35	; 0x23
    1256:	7c a1       	ldd	r23, Y+36	; 0x24
    1258:	8d a1       	ldd	r24, Y+37	; 0x25
    125a:	9e a1       	ldd	r25, Y+38	; 0x26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9a a3       	std	Y+34, r25	; 0x22
    1266:	89 a3       	std	Y+33, r24	; 0x21
    1268:	89 a1       	ldd	r24, Y+33	; 0x21
    126a:	9a a1       	ldd	r25, Y+34	; 0x22
    126c:	9e 8f       	std	Y+30, r25	; 0x1e
    126e:	8d 8f       	std	Y+29, r24	; 0x1d
    1270:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1272:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_voidSendCommand+0x254>
    1278:	9e 8f       	std	Y+30, r25	; 0x1e
    127a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Command>>3)&1));
    127c:	89 ad       	ldd	r24, Y+57	; 0x39
    127e:	86 95       	lsr	r24
    1280:	86 95       	lsr	r24
    1282:	86 95       	lsr	r24
    1284:	98 2f       	mov	r25, r24
    1286:	91 70       	andi	r25, 0x01	; 1
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	49 2f       	mov	r20, r25
    128e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Command>>2)&1));
    1292:	89 ad       	ldd	r24, Y+57	; 0x39
    1294:	86 95       	lsr	r24
    1296:	86 95       	lsr	r24
    1298:	98 2f       	mov	r25, r24
    129a:	91 70       	andi	r25, 0x01	; 1
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	49 2f       	mov	r20, r25
    12a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Command>>1)&1));
    12a6:	89 ad       	ldd	r24, Y+57	; 0x39
    12a8:	86 95       	lsr	r24
    12aa:	98 2f       	mov	r25, r24
    12ac:	91 70       	andi	r25, 0x01	; 1
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	62 e0       	ldi	r22, 0x02	; 2
    12b2:	49 2f       	mov	r20, r25
    12b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Command>>0)&1));
    12b8:	89 ad       	ldd	r24, Y+57	; 0x39
    12ba:	98 2f       	mov	r25, r24
    12bc:	91 70       	andi	r25, 0x01	; 1
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	63 e0       	ldi	r22, 0x03	; 3
    12c2:	49 2f       	mov	r20, r25
    12c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a0 ef       	ldi	r26, 0xF0	; 240
    12d8:	b1 e4       	ldi	r27, 0x41	; 65
    12da:	89 8f       	std	Y+25, r24	; 0x19
    12dc:	9a 8f       	std	Y+26, r25	; 0x1a
    12de:	ab 8f       	std	Y+27, r26	; 0x1b
    12e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e2:	69 8d       	ldd	r22, Y+25	; 0x19
    12e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	4a ef       	ldi	r20, 0xFA	; 250
    12f0:	54 e4       	ldi	r21, 0x44	; 68
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	8d 8b       	std	Y+21, r24	; 0x15
    12fc:	9e 8b       	std	Y+22, r25	; 0x16
    12fe:	af 8b       	std	Y+23, r26	; 0x17
    1300:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1302:	6d 89       	ldd	r22, Y+21	; 0x15
    1304:	7e 89       	ldd	r23, Y+22	; 0x16
    1306:	8f 89       	ldd	r24, Y+23	; 0x17
    1308:	98 8d       	ldd	r25, Y+24	; 0x18
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	2c f4       	brge	.+10     	; 0x1324 <LCD_voidSendCommand+0x304>
		__ticks = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
    1322:	3f c0       	rjmp	.+126    	; 0x13a2 <LCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1324:	6d 89       	ldd	r22, Y+21	; 0x15
    1326:	7e 89       	ldd	r23, Y+22	; 0x16
    1328:	8f 89       	ldd	r24, Y+23	; 0x17
    132a:	98 8d       	ldd	r25, Y+24	; 0x18
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	3f ef       	ldi	r19, 0xFF	; 255
    1330:	4f e7       	ldi	r20, 0x7F	; 127
    1332:	57 e4       	ldi	r21, 0x47	; 71
    1334:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1338:	18 16       	cp	r1, r24
    133a:	4c f5       	brge	.+82     	; 0x138e <LCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133c:	69 8d       	ldd	r22, Y+25	; 0x19
    133e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e2       	ldi	r20, 0x20	; 32
    134a:	51 e4       	ldi	r21, 0x41	; 65
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9c 8b       	std	Y+20, r25	; 0x14
    1362:	8b 8b       	std	Y+19, r24	; 0x13
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <LCD_voidSendCommand+0x364>
    1366:	88 ec       	ldi	r24, 0xC8	; 200
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9a 8b       	std	Y+18, r25	; 0x12
    136c:	89 8b       	std	Y+17, r24	; 0x11
    136e:	89 89       	ldd	r24, Y+17	; 0x11
    1370:	9a 89       	ldd	r25, Y+18	; 0x12
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <LCD_voidSendCommand+0x352>
    1376:	9a 8b       	std	Y+18, r25	; 0x12
    1378:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137a:	8b 89       	ldd	r24, Y+19	; 0x13
    137c:	9c 89       	ldd	r25, Y+20	; 0x14
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9c 8b       	std	Y+20, r25	; 0x14
    1382:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1384:	8b 89       	ldd	r24, Y+19	; 0x13
    1386:	9c 89       	ldd	r25, Y+20	; 0x14
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	69 f7       	brne	.-38     	; 0x1366 <LCD_voidSendCommand+0x346>
    138c:	14 c0       	rjmp	.+40     	; 0x13b6 <LCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138e:	6d 89       	ldd	r22, Y+21	; 0x15
    1390:	7e 89       	ldd	r23, Y+22	; 0x16
    1392:	8f 89       	ldd	r24, Y+23	; 0x17
    1394:	98 8d       	ldd	r25, Y+24	; 0x18
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9c 8b       	std	Y+20, r25	; 0x14
    13a0:	8b 8b       	std	Y+19, r24	; 0x13
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	98 8b       	std	Y+16, r25	; 0x10
    13a8:	8f 87       	std	Y+15, r24	; 0x0f
    13aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ac:	98 89       	ldd	r25, Y+16	; 0x10
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_voidSendCommand+0x38e>
    13b2:	98 8b       	std	Y+16, r25	; 0x10
    13b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a0 e0       	ldi	r26, 0x00	; 0
    13c6:	b0 e4       	ldi	r27, 0x40	; 64
    13c8:	8b 87       	std	Y+11, r24	; 0x0b
    13ca:	9c 87       	std	Y+12, r25	; 0x0c
    13cc:	ad 87       	std	Y+13, r26	; 0x0d
    13ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a ef       	ldi	r20, 0xFA	; 250
    13de:	54 e4       	ldi	r21, 0x44	; 68
    13e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	8f 83       	std	Y+7, r24	; 0x07
    13ea:	98 87       	std	Y+8, r25	; 0x08
    13ec:	a9 87       	std	Y+9, r26	; 0x09
    13ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	5f e3       	ldi	r21, 0x3F	; 63
    1400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1404:	88 23       	and	r24, r24
    1406:	2c f4       	brge	.+10     	; 0x1412 <LCD_voidSendCommand+0x3f2>
		__ticks = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	3f c0       	rjmp	.+126    	; 0x1490 <LCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1426:	18 16       	cp	r1, r24
    1428:	4c f5       	brge	.+82     	; 0x147c <LCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142a:	6b 85       	ldd	r22, Y+11	; 0x0b
    142c:	7c 85       	ldd	r23, Y+12	; 0x0c
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e2       	ldi	r20, 0x20	; 32
    1438:	51 e4       	ldi	r21, 0x41	; 65
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	0f c0       	rjmp	.+30     	; 0x1472 <LCD_voidSendCommand+0x452>
    1454:	88 ec       	ldi	r24, 0xC8	; 200
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <LCD_voidSendCommand+0x440>
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	69 f7       	brne	.-38     	; 0x1454 <LCD_voidSendCommand+0x434>
    147a:	14 c0       	rjmp	.+40     	; 0x14a4 <LCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <LCD_voidSendCommand+0x47c>
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#else
#error "Wrong LCD mode configration"
#endif
}
    14a4:	e9 96       	adiw	r28, 0x39	; 57
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	e9 97       	sbiw	r28, 0x39	; 57
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPinValue(LCD_CTRL_8_PORT,LCD_E_PIN,DIO_u8PIN_LOW);

#elif LCD_Bit_Mode == Four_Bits_Mode
	/* Set RS Pin to High for Data */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RS,DIO_u8PIN_HIGH);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	62 e0       	ldi	r22, 0x02	; 2
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Set RW to Low for Write */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RW,DIO_u8PIN_LOW);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	/* Set Data to Data Pins */
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Data>>7)&1));
    14e0:	89 ad       	ldd	r24, Y+57	; 0x39
    14e2:	98 2f       	mov	r25, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	99 27       	eor	r25, r25
    14e8:	99 1f       	adc	r25, r25
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	49 2f       	mov	r20, r25
    14f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Data>>6)&1));
    14f4:	89 ad       	ldd	r24, Y+57	; 0x39
    14f6:	82 95       	swap	r24
    14f8:	86 95       	lsr	r24
    14fa:	86 95       	lsr	r24
    14fc:	83 70       	andi	r24, 0x03	; 3
    14fe:	98 2f       	mov	r25, r24
    1500:	91 70       	andi	r25, 0x01	; 1
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	49 2f       	mov	r20, r25
    1508:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Data>>5)&1));
    150c:	89 ad       	ldd	r24, Y+57	; 0x39
    150e:	82 95       	swap	r24
    1510:	86 95       	lsr	r24
    1512:	87 70       	andi	r24, 0x07	; 7
    1514:	98 2f       	mov	r25, r24
    1516:	91 70       	andi	r25, 0x01	; 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	49 2f       	mov	r20, r25
    151e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Data>>4)&1));
    1522:	89 ad       	ldd	r24, Y+57	; 0x39
    1524:	82 95       	swap	r24
    1526:	8f 70       	andi	r24, 0x0F	; 15
    1528:	98 2f       	mov	r25, r24
    152a:	91 70       	andi	r25, 0x01	; 1
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	63 e0       	ldi	r22, 0x03	; 3
    1530:	49 2f       	mov	r20, r25
    1532:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 ef       	ldi	r26, 0xF0	; 240
    1546:	b1 e4       	ldi	r27, 0x41	; 65
    1548:	8d ab       	std	Y+53, r24	; 0x35
    154a:	9e ab       	std	Y+54, r25	; 0x36
    154c:	af ab       	std	Y+55, r26	; 0x37
    154e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1550:	6d a9       	ldd	r22, Y+53	; 0x35
    1552:	7e a9       	ldd	r23, Y+54	; 0x36
    1554:	8f a9       	ldd	r24, Y+55	; 0x37
    1556:	98 ad       	ldd	r25, Y+56	; 0x38
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a ef       	ldi	r20, 0xFA	; 250
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	89 ab       	std	Y+49, r24	; 0x31
    156a:	9a ab       	std	Y+50, r25	; 0x32
    156c:	ab ab       	std	Y+51, r26	; 0x33
    156e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1570:	69 a9       	ldd	r22, Y+49	; 0x31
    1572:	7a a9       	ldd	r23, Y+50	; 0x32
    1574:	8b a9       	ldd	r24, Y+51	; 0x33
    1576:	9c a9       	ldd	r25, Y+52	; 0x34
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	2c f4       	brge	.+10     	; 0x1592 <LCD_voidSendData+0xdc>
		__ticks = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	98 ab       	std	Y+48, r25	; 0x30
    158e:	8f a7       	std	Y+47, r24	; 0x2f
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <LCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    1592:	69 a9       	ldd	r22, Y+49	; 0x31
    1594:	7a a9       	ldd	r23, Y+50	; 0x32
    1596:	8b a9       	ldd	r24, Y+51	; 0x33
    1598:	9c a9       	ldd	r25, Y+52	; 0x34
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	4c f5       	brge	.+82     	; 0x15fc <LCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	6d a9       	ldd	r22, Y+53	; 0x35
    15ac:	7e a9       	ldd	r23, Y+54	; 0x36
    15ae:	8f a9       	ldd	r24, Y+55	; 0x37
    15b0:	98 ad       	ldd	r25, Y+56	; 0x38
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	98 ab       	std	Y+48, r25	; 0x30
    15d0:	8f a7       	std	Y+47, r24	; 0x2f
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <LCD_voidSendData+0x13c>
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9e a7       	std	Y+46, r25	; 0x2e
    15da:	8d a7       	std	Y+45, r24	; 0x2d
    15dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    15de:	9e a5       	ldd	r25, Y+46	; 0x2e
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_voidSendData+0x12a>
    15e4:	9e a7       	std	Y+46, r25	; 0x2e
    15e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ea:	98 a9       	ldd	r25, Y+48	; 0x30
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	98 ab       	std	Y+48, r25	; 0x30
    15f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f4:	98 a9       	ldd	r25, Y+48	; 0x30
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <LCD_voidSendData+0x11e>
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <LCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	69 a9       	ldd	r22, Y+49	; 0x31
    15fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1600:	8b a9       	ldd	r24, Y+51	; 0x33
    1602:	9c a9       	ldd	r25, Y+52	; 0x34
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	98 ab       	std	Y+48, r25	; 0x30
    160e:	8f a7       	std	Y+47, r24	; 0x2f
    1610:	8f a5       	ldd	r24, Y+47	; 0x2f
    1612:	98 a9       	ldd	r25, Y+48	; 0x30
    1614:	9c a7       	std	Y+44, r25	; 0x2c
    1616:	8b a7       	std	Y+43, r24	; 0x2b
    1618:	8b a5       	ldd	r24, Y+43	; 0x2b
    161a:	9c a5       	ldd	r25, Y+44	; 0x2c
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <LCD_voidSendData+0x166>
    1620:	9c a7       	std	Y+44, r25	; 0x2c
    1622:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a0 e0       	ldi	r26, 0x00	; 0
    1634:	b0 e4       	ldi	r27, 0x40	; 64
    1636:	8f a3       	std	Y+39, r24	; 0x27
    1638:	98 a7       	std	Y+40, r25	; 0x28
    163a:	a9 a7       	std	Y+41, r26	; 0x29
    163c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163e:	6f a1       	ldd	r22, Y+39	; 0x27
    1640:	78 a5       	ldd	r23, Y+40	; 0x28
    1642:	89 a5       	ldd	r24, Y+41	; 0x29
    1644:	9a a5       	ldd	r25, Y+42	; 0x2a
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4a ef       	ldi	r20, 0xFA	; 250
    164c:	54 e4       	ldi	r21, 0x44	; 68
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	8b a3       	std	Y+35, r24	; 0x23
    1658:	9c a3       	std	Y+36, r25	; 0x24
    165a:	ad a3       	std	Y+37, r26	; 0x25
    165c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    165e:	6b a1       	ldd	r22, Y+35	; 0x23
    1660:	7c a1       	ldd	r23, Y+36	; 0x24
    1662:	8d a1       	ldd	r24, Y+37	; 0x25
    1664:	9e a1       	ldd	r25, Y+38	; 0x26
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	2c f4       	brge	.+10     	; 0x1680 <LCD_voidSendData+0x1ca>
		__ticks = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9a a3       	std	Y+34, r25	; 0x22
    167c:	89 a3       	std	Y+33, r24	; 0x21
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <LCD_voidSendData+0x248>
	else if (__tmp > 65535)
    1680:	6b a1       	ldd	r22, Y+35	; 0x23
    1682:	7c a1       	ldd	r23, Y+36	; 0x24
    1684:	8d a1       	ldd	r24, Y+37	; 0x25
    1686:	9e a1       	ldd	r25, Y+38	; 0x26
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	57 e4       	ldi	r21, 0x47	; 71
    1690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	4c f5       	brge	.+82     	; 0x16ea <LCD_voidSendData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1698:	6f a1       	ldd	r22, Y+39	; 0x27
    169a:	78 a5       	ldd	r23, Y+40	; 0x28
    169c:	89 a5       	ldd	r24, Y+41	; 0x29
    169e:	9a a5       	ldd	r25, Y+42	; 0x2a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e2       	ldi	r20, 0x20	; 32
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9a a3       	std	Y+34, r25	; 0x22
    16be:	89 a3       	std	Y+33, r24	; 0x21
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <LCD_voidSendData+0x22a>
    16c2:	88 ec       	ldi	r24, 0xC8	; 200
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	98 a3       	std	Y+32, r25	; 0x20
    16c8:	8f 8f       	std	Y+31, r24	; 0x1f
    16ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16cc:	98 a1       	ldd	r25, Y+32	; 0x20
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_voidSendData+0x218>
    16d2:	98 a3       	std	Y+32, r25	; 0x20
    16d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	89 a1       	ldd	r24, Y+33	; 0x21
    16d8:	9a a1       	ldd	r25, Y+34	; 0x22
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	9a a3       	std	Y+34, r25	; 0x22
    16de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e0:	89 a1       	ldd	r24, Y+33	; 0x21
    16e2:	9a a1       	ldd	r25, Y+34	; 0x22
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <LCD_voidSendData+0x20c>
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <LCD_voidSendData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	6b a1       	ldd	r22, Y+35	; 0x23
    16ec:	7c a1       	ldd	r23, Y+36	; 0x24
    16ee:	8d a1       	ldd	r24, Y+37	; 0x25
    16f0:	9e a1       	ldd	r25, Y+38	; 0x26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9a a3       	std	Y+34, r25	; 0x22
    16fc:	89 a3       	std	Y+33, r24	; 0x21
    16fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1700:	9a a1       	ldd	r25, Y+34	; 0x22
    1702:	9e 8f       	std	Y+30, r25	; 0x1e
    1704:	8d 8f       	std	Y+29, r24	; 0x1d
    1706:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1708:	9e 8d       	ldd	r25, Y+30	; 0x1e
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_voidSendData+0x254>
    170e:	9e 8f       	std	Y+30, r25	; 0x1e
    1710:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);


	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Data>>3)&1));
    1712:	89 ad       	ldd	r24, Y+57	; 0x39
    1714:	86 95       	lsr	r24
    1716:	86 95       	lsr	r24
    1718:	86 95       	lsr	r24
    171a:	98 2f       	mov	r25, r24
    171c:	91 70       	andi	r25, 0x01	; 1
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	49 2f       	mov	r20, r25
    1724:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Data>>2)&1));
    1728:	89 ad       	ldd	r24, Y+57	; 0x39
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	98 2f       	mov	r25, r24
    1730:	91 70       	andi	r25, 0x01	; 1
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	49 2f       	mov	r20, r25
    1738:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Data>>1)&1));
    173c:	89 ad       	ldd	r24, Y+57	; 0x39
    173e:	86 95       	lsr	r24
    1740:	98 2f       	mov	r25, r24
    1742:	91 70       	andi	r25, 0x01	; 1
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	49 2f       	mov	r20, r25
    174a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Data>>0)&1));
    174e:	89 ad       	ldd	r24, Y+57	; 0x39
    1750:	98 2f       	mov	r25, r24
    1752:	91 70       	andi	r25, 0x01	; 1
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	63 e0       	ldi	r22, 0x03	; 3
    1758:	49 2f       	mov	r20, r25
    175a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 ef       	ldi	r26, 0xF0	; 240
    176e:	b1 e4       	ldi	r27, 0x41	; 65
    1770:	89 8f       	std	Y+25, r24	; 0x19
    1772:	9a 8f       	std	Y+26, r25	; 0x1a
    1774:	ab 8f       	std	Y+27, r26	; 0x1b
    1776:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	69 8d       	ldd	r22, Y+25	; 0x19
    177a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    177c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8d 8b       	std	Y+21, r24	; 0x15
    1792:	9e 8b       	std	Y+22, r25	; 0x16
    1794:	af 8b       	std	Y+23, r26	; 0x17
    1796:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1798:	6d 89       	ldd	r22, Y+21	; 0x15
    179a:	7e 89       	ldd	r23, Y+22	; 0x16
    179c:	8f 89       	ldd	r24, Y+23	; 0x17
    179e:	98 8d       	ldd	r25, Y+24	; 0x18
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <LCD_voidSendData+0x304>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 8b       	std	Y+20, r25	; 0x14
    17b6:	8b 8b       	std	Y+19, r24	; 0x13
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <LCD_voidSendData+0x382>
	else if (__tmp > 65535)
    17ba:	6d 89       	ldd	r22, Y+21	; 0x15
    17bc:	7e 89       	ldd	r23, Y+22	; 0x16
    17be:	8f 89       	ldd	r24, Y+23	; 0x17
    17c0:	98 8d       	ldd	r25, Y+24	; 0x18
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <LCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	69 8d       	ldd	r22, Y+25	; 0x19
    17d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9c 8b       	std	Y+20, r25	; 0x14
    17f8:	8b 8b       	std	Y+19, r24	; 0x13
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <LCD_voidSendData+0x364>
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9a 8b       	std	Y+18, r25	; 0x12
    1802:	89 8b       	std	Y+17, r24	; 0x11
    1804:	89 89       	ldd	r24, Y+17	; 0x11
    1806:	9a 89       	ldd	r25, Y+18	; 0x12
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_voidSendData+0x352>
    180c:	9a 8b       	std	Y+18, r25	; 0x12
    180e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8b 89       	ldd	r24, Y+19	; 0x13
    1812:	9c 89       	ldd	r25, Y+20	; 0x14
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9c 8b       	std	Y+20, r25	; 0x14
    1818:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8b 89       	ldd	r24, Y+19	; 0x13
    181c:	9c 89       	ldd	r25, Y+20	; 0x14
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <LCD_voidSendData+0x346>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <LCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	6d 89       	ldd	r22, Y+21	; 0x15
    1826:	7e 89       	ldd	r23, Y+22	; 0x16
    1828:	8f 89       	ldd	r24, Y+23	; 0x17
    182a:	98 8d       	ldd	r25, Y+24	; 0x18
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9c 8b       	std	Y+20, r25	; 0x14
    1836:	8b 8b       	std	Y+19, r24	; 0x13
    1838:	8b 89       	ldd	r24, Y+19	; 0x13
    183a:	9c 89       	ldd	r25, Y+20	; 0x14
    183c:	98 8b       	std	Y+16, r25	; 0x10
    183e:	8f 87       	std	Y+15, r24	; 0x0f
    1840:	8f 85       	ldd	r24, Y+15	; 0x0f
    1842:	98 89       	ldd	r25, Y+16	; 0x10
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_voidSendData+0x38e>
    1848:	98 8b       	std	Y+16, r25	; 0x10
    184a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinValue>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e0       	ldi	r26, 0x00	; 0
    185c:	b0 e4       	ldi	r27, 0x40	; 64
    185e:	8b 87       	std	Y+11, r24	; 0x0b
    1860:	9c 87       	std	Y+12, r25	; 0x0c
    1862:	ad 87       	std	Y+13, r26	; 0x0d
    1864:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1866:	6b 85       	ldd	r22, Y+11	; 0x0b
    1868:	7c 85       	ldd	r23, Y+12	; 0x0c
    186a:	8d 85       	ldd	r24, Y+13	; 0x0d
    186c:	9e 85       	ldd	r25, Y+14	; 0x0e
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a ef       	ldi	r20, 0xFA	; 250
    1874:	54 e4       	ldi	r21, 0x44	; 68
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8f 83       	std	Y+7, r24	; 0x07
    1880:	98 87       	std	Y+8, r25	; 0x08
    1882:	a9 87       	std	Y+9, r26	; 0x09
    1884:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	2c f4       	brge	.+10     	; 0x18a8 <LCD_voidSendData+0x3f2>
		__ticks = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	3f c0       	rjmp	.+126    	; 0x1926 <LCD_voidSendData+0x470>
	else if (__tmp > 65535)
    18a8:	6f 81       	ldd	r22, Y+7	; 0x07
    18aa:	78 85       	ldd	r23, Y+8	; 0x08
    18ac:	89 85       	ldd	r24, Y+9	; 0x09
    18ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	3f ef       	ldi	r19, 0xFF	; 255
    18b4:	4f e7       	ldi	r20, 0x7F	; 127
    18b6:	57 e4       	ldi	r21, 0x47	; 71
    18b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18bc:	18 16       	cp	r1, r24
    18be:	4c f5       	brge	.+82     	; 0x1912 <LCD_voidSendData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e2       	ldi	r20, 0x20	; 32
    18ce:	51 e4       	ldi	r21, 0x41	; 65
    18d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <LCD_voidSendData+0x452>
    18ea:	88 ec       	ldi	r24, 0xC8	; 200
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9c 83       	std	Y+4, r25	; 0x04
    18f0:	8b 83       	std	Y+3, r24	; 0x03
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <LCD_voidSendData+0x440>
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1900:	9e 81       	ldd	r25, Y+6	; 0x06
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f7       	brne	.-38     	; 0x18ea <LCD_voidSendData+0x434>
    1910:	14 c0       	rjmp	.+40     	; 0x193a <LCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_voidSendData+0x47c>
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#else
#error "Wrong LCD mode configration"
#endif
}
    193a:	e9 96       	adiw	r28, 0x39	; 57
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <LCD_voidInit>:

void LCD_voidInit(void)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	6c 97       	sbiw	r28, 0x1c	; 28
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a0 ef       	ldi	r26, 0xF0	; 240
    1966:	b1 e4       	ldi	r27, 0x41	; 65
    1968:	89 8f       	std	Y+25, r24	; 0x19
    196a:	9a 8f       	std	Y+26, r25	; 0x1a
    196c:	ab 8f       	std	Y+27, r26	; 0x1b
    196e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1970:	69 8d       	ldd	r22, Y+25	; 0x19
    1972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a ef       	ldi	r20, 0xFA	; 250
    197e:	54 e4       	ldi	r21, 0x44	; 68
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8d 8b       	std	Y+21, r24	; 0x15
    198a:	9e 8b       	std	Y+22, r25	; 0x16
    198c:	af 8b       	std	Y+23, r26	; 0x17
    198e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1990:	6d 89       	ldd	r22, Y+21	; 0x15
    1992:	7e 89       	ldd	r23, Y+22	; 0x16
    1994:	8f 89       	ldd	r24, Y+23	; 0x17
    1996:	98 8d       	ldd	r25, Y+24	; 0x18
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <LCD_voidInit+0x66>
		__ticks = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9c 8b       	std	Y+20, r25	; 0x14
    19ae:	8b 8b       	std	Y+19, r24	; 0x13
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	4c f5       	brge	.+82     	; 0x1a1c <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	69 8d       	ldd	r22, Y+25	; 0x19
    19cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <LCD_voidInit+0xc6>
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9a 8b       	std	Y+18, r25	; 0x12
    19fa:	89 8b       	std	Y+17, r24	; 0x11
    19fc:	89 89       	ldd	r24, Y+17	; 0x11
    19fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <LCD_voidInit+0xb4>
    1a04:	9a 8b       	std	Y+18, r25	; 0x12
    1a06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a08:	8b 89       	ldd	r24, Y+19	; 0x13
    1a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a12:	8b 89       	ldd	r24, Y+19	; 0x13
    1a14:	9c 89       	ldd	r25, Y+20	; 0x14
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	69 f7       	brne	.-38     	; 0x19f4 <LCD_voidInit+0xa8>
    1a1a:	14 c0       	rjmp	.+40     	; 0x1a44 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
    1a30:	8b 89       	ldd	r24, Y+19	; 0x13
    1a32:	9c 89       	ldd	r25, Y+20	; 0x14
    1a34:	98 8b       	std	Y+16, r25	; 0x10
    1a36:	8f 87       	std	Y+15, r24	; 0x0f
    1a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3a:	98 89       	ldd	r25, Y+16	; 0x10
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_voidInit+0xf0>
    1a40:	98 8b       	std	Y+16, r25	; 0x10
    1a42:	8f 87       	std	Y+15, r24	; 0x0f

	// Wait for More Than 30 ms
	_delay_ms(30);

	// Function Set Command: 2 Lines, 5*8 Font Size
	LCD_voidSendCommand(0x02);
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x28);
    1a4a:	88 e2       	ldi	r24, 0x28	; 40
    1a4c:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0C);
    1a50:	8c e0       	ldi	r24, 0x0C	; 12
    1a52:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	8b 87       	std	Y+11, r24	; 0x0b
    1a60:	9c 87       	std	Y+12, r25	; 0x0c
    1a62:	ad 87       	std	Y+13, r26	; 0x0d
    1a64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a ef       	ldi	r20, 0xFA	; 250
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8f 83       	std	Y+7, r24	; 0x07
    1a80:	98 87       	std	Y+8, r25	; 0x08
    1a82:	a9 87       	std	Y+9, r26	; 0x09
    1a84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_voidInit+0x15c>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_voidInit+0x1bc>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9c 83       	std	Y+4, r25	; 0x04
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_voidInit+0x1aa>
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_voidInit+0x19e>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_voidInit+0x1e6>
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01

	// Wait for More Than 30 us
	_delay_ms(1);

	// Display On Off Control: Display Enable, Disable cursor, No blink Curser
	LCD_voidSendCommand(0x06);  //shift Cursor to right
    1b3a:	86 e0       	ldi	r24, 0x06	; 6
    1b3c:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);   // clear
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>


#else
#error "Wrong LCD mode configration"
#endif
}
    1b46:	6c 96       	adiw	r28, 0x1c	; 28
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <LCD__voidSendString>:

void LCD__voidSendString(const char* Copy_pcString)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <LCD__voidSendString+0x6>
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9b 83       	std	Y+3, r25	; 0x03
    1b66:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1b68:	19 82       	std	Y+1, r1	; 0x01
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <LCD__voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		LCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	fc 01       	movw	r30, r24
    1b78:	e2 0f       	add	r30, r18
    1b7a:	f3 1f       	adc	r31, r19
    1b7c:	80 81       	ld	r24, Z
    1b7e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_voidSendData>
		Local_u8Counter++;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	89 83       	std	Y+1, r24	; 0x01
}

void LCD__voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	fc 01       	movw	r30, r24
    1b94:	e2 0f       	add	r30, r18
    1b96:	f3 1f       	adc	r31, r19
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 23       	and	r24, r24
    1b9c:	39 f7       	brne	.-50     	; 0x1b6c <LCD__voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <LCD_voidGoToXY+0x6>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8a 83       	std	Y+2, r24	; 0x02
    1bb8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	88 23       	and	r24, r24
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <LCD_voidGoToXY+0x1c>
	{
		/*location is at first line*/
		Local_u8Address=Copy_u8YPos;
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <LCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	19 f4       	brne	.+6      	; 0x1bd2 <LCD_voidGoToXY+0x28>
	{
		/*location is at second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	80 5c       	subi	r24, 0xC0	; 192
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM address command then send the command*/
	LCD_voidSendCommand(Local_u8Address+128);
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	80 58       	subi	r24, 0x80	; 128
    1bd6:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	27 97       	sbiw	r28, 0x07	; 7
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	9c 83       	std	Y+4, r25	; 0x04
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
    1bfe:	6d 83       	std	Y+5, r22	; 0x05
    1c00:	4e 83       	std	Y+6, r20	; 0x06
    1c02:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0, Local_u8Iterator;
    1c04:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate CGRAM address whose each block is 9 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM address command to LCD, with setting bit 6, clearing bit 7*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 5c       	subi	r24, 0xC0	; 192
    1c1e:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1c22:	19 82       	std	Y+1, r1	; 0x01
    1c24:	0e c0       	rjmp	.+28     	; 0x1c42 <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	fc 01       	movw	r30, r24
    1c32:	e2 0f       	add	r30, r18
    1c34:	f3 1f       	adc	r31, r19
    1c36:	80 81       	ld	r24, Z
    1c38:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_voidSendData>
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;

	/*send CGRAM address command to LCD, with setting bit 6, clearing bit 7*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	88 30       	cpi	r24, 0x08	; 8
    1c46:	78 f3       	brcs	.-34     	; 0x1c26 <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*go back to DDRAM to display the pattern*/
	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>
	/*display the pattern written in the CGRAM*/
	LCD_voidSendData(Copy_u8PatternNumber);
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_voidSendData>
}
    1c56:	27 96       	adiw	r28, 0x07	; 7
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_Number)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	2a 97       	sbiw	r28, 0x0a	; 10
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	6f 83       	std	Y+7, r22	; 0x07
    1c7e:	78 87       	std	Y+8, r23	; 0x08
    1c80:	89 87       	std	Y+9, r24	; 0x09
    1c82:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Local_u8Number,Local_u8FirstNum=0;
    1c84:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Loop;
	if(Copy_Number==0)
    1c86:	8f 81       	ldd	r24, Y+7	; 0x07
    1c88:	98 85       	ldd	r25, Y+8	; 0x08
    1c8a:	a9 85       	ldd	r26, Y+9	; 0x09
    1c8c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	a1 05       	cpc	r26, r1
    1c92:	b1 05       	cpc	r27, r1
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <LCD_voidSendNumber+0x36>
	{
		LCD_voidSendData(48);
    1c96:	80 e3       	ldi	r24, 0x30	; 48
    1c98:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_voidSendData>
    1c9c:	51 c0       	rjmp	.+162    	; 0x1d40 <LCD_voidSendNumber+0xd8>
	}
	else
	{
		for(Local_u32Loop=1000000;Local_u32Loop>0;Local_u32Loop/=10)
    1c9e:	80 e4       	ldi	r24, 0x40	; 64
    1ca0:	92 e4       	ldi	r25, 0x42	; 66
    1ca2:	af e0       	ldi	r26, 0x0F	; 15
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	ab 83       	std	Y+3, r26	; 0x03
    1cac:	bc 83       	std	Y+4, r27	; 0x04
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <LCD_voidSendNumber+0xc6>
		{
			Local_u8Number=Copy_Number/Local_u32Loop;
    1cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb2:	98 85       	ldd	r25, Y+8	; 0x08
    1cb4:	a9 85       	ldd	r26, Y+9	; 0x09
    1cb6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cb8:	29 81       	ldd	r18, Y+1	; 0x01
    1cba:	3a 81       	ldd	r19, Y+2	; 0x02
    1cbc:	4b 81       	ldd	r20, Y+3	; 0x03
    1cbe:	5c 81       	ldd	r21, Y+4	; 0x04
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__udivmodsi4>
    1cc8:	da 01       	movw	r26, r20
    1cca:	c9 01       	movw	r24, r18
    1ccc:	8e 83       	std	Y+6, r24	; 0x06
			if(Local_u8Number==0 && Local_u8FirstNum==0)
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd0:	88 23       	and	r24, r24
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <LCD_voidSendNumber+0x72>
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	88 23       	and	r24, r24
    1cd8:	c1 f0       	breq	.+48     	; 0x1d0a <LCD_voidSendNumber+0xa2>
			{
				continue;
			}
			else
			{
				LCD_voidSendData(Local_u8Number+48);
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	80 5d       	subi	r24, 0xD0	; 208
    1cde:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_voidSendData>
				Copy_Number=Copy_Number%Local_u32Loop;
    1ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce4:	98 85       	ldd	r25, Y+8	; 0x08
    1ce6:	a9 85       	ldd	r26, Y+9	; 0x09
    1ce8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cea:	29 81       	ldd	r18, Y+1	; 0x01
    1cec:	3a 81       	ldd	r19, Y+2	; 0x02
    1cee:	4b 81       	ldd	r20, Y+3	; 0x03
    1cf0:	5c 81       	ldd	r21, Y+4	; 0x04
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__udivmodsi4>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
    1d00:	98 87       	std	Y+8, r25	; 0x08
    1d02:	a9 87       	std	Y+9, r26	; 0x09
    1d04:	ba 87       	std	Y+10, r27	; 0x0a
				Local_u8FirstNum=1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	8d 83       	std	Y+5, r24	; 0x05
	{
		LCD_voidSendData(48);
	}
	else
	{
		for(Local_u32Loop=1000000;Local_u32Loop>0;Local_u32Loop/=10)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d10:	bc 81       	ldd	r27, Y+4	; 0x04
    1d12:	2a e0       	ldi	r18, 0x0A	; 10
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__udivmodsi4>
    1d22:	da 01       	movw	r26, r20
    1d24:	c9 01       	movw	r24, r18
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	ab 83       	std	Y+3, r26	; 0x03
    1d2c:	bc 83       	std	Y+4, r27	; 0x04
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	ab 81       	ldd	r26, Y+3	; 0x03
    1d34:	bc 81       	ldd	r27, Y+4	; 0x04
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	a1 05       	cpc	r26, r1
    1d3a:	b1 05       	cpc	r27, r1
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <LCD_voidSendNumber+0xd8>
    1d3e:	b8 cf       	rjmp	.-144    	; 0x1cb0 <LCD_voidSendNumber+0x48>
				Copy_Number=Copy_Number%Local_u32Loop;
				Local_u8FirstNum=1;
			}
		}
	}
}
    1d40:	2a 96       	adiw	r28, 0x0a	; 10
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    1d5a:	ea e3       	ldi	r30, 0x3A	; 58
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	10 82       	st	Z, r1
    DDRB=PORTB_DIR;
    1d60:	e7 e3       	ldi	r30, 0x37	; 55
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	87 e0       	ldi	r24, 0x07	; 7
    1d66:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    1d68:	e4 e3       	ldi	r30, 0x34	; 52
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	8f e0       	ldi	r24, 0x0F	; 15
    1d6e:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    1d70:	e1 e3       	ldi	r30, 0x31	; 49
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	10 82       	st	Z, r1

    PORTA=PORTA_INITIAL_VALUE;
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	10 82       	st	Z, r1
    PORTB=PORTB_INITIAL_VALUE;
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	10 82       	st	Z, r1
    PORTC=PORTC_INITIAL_VALUE;
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	80 83       	st	Z, r24
    PORTD=PORTD_INITIAL_VALUE;
    1d8a:	e2 e3       	ldi	r30, 0x32	; 50
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	10 82       	st	Z, r1
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <main>:

#include <util/delay.h>

u16 arr[3];
void main(void)
{
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	c9 54       	subi	r28, 0x49	; 73
    1da4:	d0 40       	sbci	r29, 0x00	; 0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1db0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <PORT_voidInit>
	LCD_voidInit();
    1db4:	0e 94 a6 0c 	call	0x194c	; 0x194c <LCD_voidInit>

	while(1)
	{
		u8 Local_u8Num;
		LCD__voidSendString("Num 1:");
    1db8:	80 e6       	ldi	r24, 0x60	; 96
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD__voidSendString>
		do
		{
			Local_u8Num=KPD_u8GetPressedKey();
    1dc0:	0e 94 98 07 	call	0xf30	; 0xf30 <KPD_u8GetPressedKey>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e9 5b       	subi	r30, 0xB9	; 185
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 83       	st	Z, r24
			arr[0]=Local_u8Num;
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e9 5b       	subi	r30, 0xB9	; 185
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	90 93 a3 00 	sts	0x00A3, r25
    1ddc:	80 93 a2 00 	sts	0x00A2, r24
		}while(Local_u8Num==0xFF);
    1de0:	fe 01       	movw	r30, r28
    1de2:	e9 5b       	subi	r30, 0xB9	; 185
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	8f 3f       	cpi	r24, 0xFF	; 255
    1dea:	51 f3       	breq	.-44     	; 0x1dc0 <main+0x2a>
		LCD_voidSendNumber(Local_u8Num);
    1dec:	fe 01       	movw	r30, r28
    1dee:	e9 5b       	subi	r30, 0xB9	; 185
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendNumber>
		LCD_voidGoToXY(1,0);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>


		LCD__voidSendString("op:");
    1e0c:	87 e6       	ldi	r24, 0x67	; 103
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD__voidSendString>
		do
		{
			Local_u8Num=KPD_u8GetPressedKey();
    1e14:	0e 94 98 07 	call	0xf30	; 0xf30 <KPD_u8GetPressedKey>
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 5b       	subi	r30, 0xB9	; 185
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 83       	st	Z, r24
		}while(Local_u8Num==0xFF);
    1e20:	fe 01       	movw	r30, r28
    1e22:	e9 5b       	subi	r30, 0xB9	; 185
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2a:	a1 f3       	breq	.-24     	; 0x1e14 <main+0x7e>
		LCD_voidSendData(Local_u8Num);
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e9 5b       	subi	r30, 0xB9	; 185
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_voidSendData>
		arr[1]=Local_u8Num;
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e9 5b       	subi	r30, 0xB9	; 185
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	90 93 a5 00 	sts	0x00A5, r25
    1e48:	80 93 a4 00 	sts	0x00A4, r24



		LCD__voidSendString("Num 2:");
    1e4c:	8b e6       	ldi	r24, 0x6B	; 107
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD__voidSendString>
		do
		{
			Local_u8Num=KPD_u8GetPressedKey();
    1e54:	0e 94 98 07 	call	0xf30	; 0xf30 <KPD_u8GetPressedKey>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e9 5b       	subi	r30, 0xB9	; 185
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 83       	st	Z, r24
		}while(Local_u8Num==0xFF);
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 5b       	subi	r30, 0xB9	; 185
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6a:	a1 f3       	breq	.-24     	; 0x1e54 <main+0xbe>
		LCD_voidSendNumber(Local_u8Num);
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e9 5b       	subi	r30, 0xB9	; 185
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e0       	ldi	r26, 0x00	; 0
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendNumber>
		arr[2]=Local_u8Num;
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 5b       	subi	r30, 0xB9	; 185
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	90 93 a7 00 	sts	0x00A7, r25
    1e94:	80 93 a6 00 	sts	0x00A6, r24

		switch(arr[1])
    1e98:	40 91 a4 00 	lds	r20, 0x00A4
    1e9c:	50 91 a5 00 	lds	r21, 0x00A5
    1ea0:	2a 96       	adiw	r28, 0x0a	; 10
    1ea2:	5f af       	std	Y+63, r21	; 0x3f
    1ea4:	4e af       	std	Y+62, r20	; 0x3e
    1ea6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ea8:	2a 96       	adiw	r28, 0x0a	; 10
    1eaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eae:	2a 97       	sbiw	r28, 0x0a	; 10
    1eb0:	8b 32       	cpi	r24, 0x2B	; 43
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	09 f1       	breq	.+66     	; 0x1ef8 <main+0x162>
    1eb6:	2a 96       	adiw	r28, 0x0a	; 10
    1eb8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eba:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ebc:	2a 97       	sbiw	r28, 0x0a	; 10
    1ebe:	ec 32       	cpi	r30, 0x2C	; 44
    1ec0:	f1 05       	cpc	r31, r1
    1ec2:	48 f4       	brcc	.+18     	; 0x1ed6 <main+0x140>
    1ec4:	2a 96       	adiw	r28, 0x0a	; 10
    1ec6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eca:	2a 97       	sbiw	r28, 0x0a	; 10
    1ecc:	4a 32       	cpi	r20, 0x2A	; 42
    1ece:	51 05       	cpc	r21, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <main+0x13e>
    1ed2:	4f c1       	rjmp	.+670    	; 0x2172 <main+0x3dc>
    1ed4:	7e c2       	rjmp	.+1276   	; 0x23d2 <main+0x63c>
    1ed6:	2a 96       	adiw	r28, 0x0a	; 10
    1ed8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eda:	9f ad       	ldd	r25, Y+63	; 0x3f
    1edc:	2a 97       	sbiw	r28, 0x0a	; 10
    1ede:	8d 32       	cpi	r24, 0x2D	; 45
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <main+0x150>
    1ee4:	b0 c0       	rjmp	.+352    	; 0x2046 <main+0x2b0>
    1ee6:	2a 96       	adiw	r28, 0x0a	; 10
    1ee8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eea:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eec:	2a 97       	sbiw	r28, 0x0a	; 10
    1eee:	ef 32       	cpi	r30, 0x2F	; 47
    1ef0:	f1 05       	cpc	r31, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <main+0x160>
    1ef4:	d8 c1       	rjmp	.+944    	; 0x22a6 <main+0x510>
    1ef6:	6d c2       	rjmp	.+1242   	; 0x23d2 <main+0x63c>
		{
		case '+':
			LCD_voidSendCommand(0x01);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>
			Local_u8Num=arr[0]+arr[2];
    1f06:	80 91 a2 00 	lds	r24, 0x00A2
    1f0a:	90 91 a3 00 	lds	r25, 0x00A3
    1f0e:	28 2f       	mov	r18, r24
    1f10:	80 91 a6 00 	lds	r24, 0x00A6
    1f14:	90 91 a7 00 	lds	r25, 0x00A7
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e9 5b       	subi	r30, 0xB9	; 185
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	82 0f       	add	r24, r18
    1f20:	80 83       	st	Z, r24
			LCD_voidSendNumber(Local_u8Num);
    1f22:	fe 01       	movw	r30, r28
    1f24:	e9 5b       	subi	r30, 0xB9	; 185
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendNumber>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ed 5b       	subi	r30, 0xBD	; 189
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e4       	ldi	r25, 0x40	; 64
    1f44:	ac e9       	ldi	r26, 0x9C	; 156
    1f46:	b5 e4       	ldi	r27, 0x45	; 69
    1f48:	80 83       	st	Z, r24
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	a2 83       	std	Z+2, r26	; 0x02
    1f4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	8e 01       	movw	r16, r28
    1f52:	01 5c       	subi	r16, 0xC1	; 193
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	fe 01       	movw	r30, r28
    1f58:	ed 5b       	subi	r30, 0xBD	; 189
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	f8 01       	movw	r30, r16
    1f76:	80 83       	st	Z, r24
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	a2 83       	std	Z+2, r26	; 0x02
    1f7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ff 96       	adiw	r30, 0x3f	; 63
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f96:	88 23       	and	r24, r24
    1f98:	2c f4       	brge	.+10     	; 0x1fa4 <main+0x20e>
		__ticks = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9e af       	std	Y+62, r25	; 0x3e
    1fa0:	8d af       	std	Y+61, r24	; 0x3d
    1fa2:	46 c0       	rjmp	.+140    	; 0x2030 <main+0x29a>
	else if (__tmp > 65535)
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ff 96       	adiw	r30, 0x3f	; 63
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	64 f5       	brge	.+88     	; 0x2018 <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ed 5b       	subi	r30, 0xBD	; 189
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e af       	std	Y+62, r25	; 0x3e
    1fec:	8d af       	std	Y+61, r24	; 0x3d
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <main+0x278>
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9c af       	std	Y+60, r25	; 0x3c
    1ff6:	8b af       	std	Y+59, r24	; 0x3b
    1ff8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ffa:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <main+0x266>
    2000:	9c af       	std	Y+60, r25	; 0x3c
    2002:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8d ad       	ldd	r24, Y+61	; 0x3d
    2006:	9e ad       	ldd	r25, Y+62	; 0x3e
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9e af       	std	Y+62, r25	; 0x3e
    200c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2010:	9e ad       	ldd	r25, Y+62	; 0x3e
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <main+0x25a>
    2016:	d0 ce       	rjmp	.-608    	; 0x1db8 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	fe 01       	movw	r30, r28
    201a:	ff 96       	adiw	r30, 0x3f	; 63
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e af       	std	Y+62, r25	; 0x3e
    202e:	8d af       	std	Y+61, r24	; 0x3d
    2030:	8d ad       	ldd	r24, Y+61	; 0x3d
    2032:	9e ad       	ldd	r25, Y+62	; 0x3e
    2034:	9a af       	std	Y+58, r25	; 0x3a
    2036:	89 af       	std	Y+57, r24	; 0x39
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	9a ad       	ldd	r25, Y+58	; 0x3a
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <main+0x2a6>
    2040:	9a af       	std	Y+58, r25	; 0x3a
    2042:	89 af       	std	Y+57, r24	; 0x39
    2044:	b9 ce       	rjmp	.-654    	; 0x1db8 <main+0x22>
			_delay_ms(5000);
			break;

		case '-':
			LCD_voidSendCommand(0x01);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>
			Local_u8Num=arr[0]-arr[2];
    2054:	80 91 a2 00 	lds	r24, 0x00A2
    2058:	90 91 a3 00 	lds	r25, 0x00A3
    205c:	28 2f       	mov	r18, r24
    205e:	80 91 a6 00 	lds	r24, 0x00A6
    2062:	90 91 a7 00 	lds	r25, 0x00A7
    2066:	fe 01       	movw	r30, r28
    2068:	e9 5b       	subi	r30, 0xB9	; 185
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	42 2f       	mov	r20, r18
    206e:	48 1b       	sub	r20, r24
    2070:	84 2f       	mov	r24, r20
    2072:	80 83       	st	Z, r24
			LCD_voidSendNumber(Local_u8Num);
    2074:	fe 01       	movw	r30, r28
    2076:	e9 5b       	subi	r30, 0xB9	; 185
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e0       	ldi	r26, 0x00	; 0
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendNumber>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e4       	ldi	r25, 0x40	; 64
    2090:	ac e9       	ldi	r26, 0x9C	; 156
    2092:	b5 e4       	ldi	r27, 0x45	; 69
    2094:	8d ab       	std	Y+53, r24	; 0x35
    2096:	9e ab       	std	Y+54, r25	; 0x36
    2098:	af ab       	std	Y+55, r26	; 0x37
    209a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	6d a9       	ldd	r22, Y+53	; 0x35
    209e:	7e a9       	ldd	r23, Y+54	; 0x36
    20a0:	8f a9       	ldd	r24, Y+55	; 0x37
    20a2:	98 ad       	ldd	r25, Y+56	; 0x38
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a ef       	ldi	r20, 0xFA	; 250
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 ab       	std	Y+49, r24	; 0x31
    20b6:	9a ab       	std	Y+50, r25	; 0x32
    20b8:	ab ab       	std	Y+51, r26	; 0x33
    20ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20bc:	69 a9       	ldd	r22, Y+49	; 0x31
    20be:	7a a9       	ldd	r23, Y+50	; 0x32
    20c0:	8b a9       	ldd	r24, Y+51	; 0x33
    20c2:	9c a9       	ldd	r25, Y+52	; 0x34
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <main+0x348>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	98 ab       	std	Y+48, r25	; 0x30
    20da:	8f a7       	std	Y+47, r24	; 0x2f
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <main+0x3c6>
	else if (__tmp > 65535)
    20de:	69 a9       	ldd	r22, Y+49	; 0x31
    20e0:	7a a9       	ldd	r23, Y+50	; 0x32
    20e2:	8b a9       	ldd	r24, Y+51	; 0x33
    20e4:	9c a9       	ldd	r25, Y+52	; 0x34
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	6d a9       	ldd	r22, Y+53	; 0x35
    20f8:	7e a9       	ldd	r23, Y+54	; 0x36
    20fa:	8f a9       	ldd	r24, Y+55	; 0x37
    20fc:	98 ad       	ldd	r25, Y+56	; 0x38
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	98 ab       	std	Y+48, r25	; 0x30
    211c:	8f a7       	std	Y+47, r24	; 0x2f
    211e:	0f c0       	rjmp	.+30     	; 0x213e <main+0x3a8>
    2120:	88 ec       	ldi	r24, 0xC8	; 200
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9e a7       	std	Y+46, r25	; 0x2e
    2126:	8d a7       	std	Y+45, r24	; 0x2d
    2128:	8d a5       	ldd	r24, Y+45	; 0x2d
    212a:	9e a5       	ldd	r25, Y+46	; 0x2e
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <main+0x396>
    2130:	9e a7       	std	Y+46, r25	; 0x2e
    2132:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8f a5       	ldd	r24, Y+47	; 0x2f
    2136:	98 a9       	ldd	r25, Y+48	; 0x30
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	98 ab       	std	Y+48, r25	; 0x30
    213c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2140:	98 a9       	ldd	r25, Y+48	; 0x30
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <main+0x38a>
    2146:	38 ce       	rjmp	.-912    	; 0x1db8 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	69 a9       	ldd	r22, Y+49	; 0x31
    214a:	7a a9       	ldd	r23, Y+50	; 0x32
    214c:	8b a9       	ldd	r24, Y+51	; 0x33
    214e:	9c a9       	ldd	r25, Y+52	; 0x34
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	98 ab       	std	Y+48, r25	; 0x30
    215a:	8f a7       	std	Y+47, r24	; 0x2f
    215c:	8f a5       	ldd	r24, Y+47	; 0x2f
    215e:	98 a9       	ldd	r25, Y+48	; 0x30
    2160:	9c a7       	std	Y+44, r25	; 0x2c
    2162:	8b a7       	std	Y+43, r24	; 0x2b
    2164:	8b a5       	ldd	r24, Y+43	; 0x2b
    2166:	9c a5       	ldd	r25, Y+44	; 0x2c
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <main+0x3d2>
    216c:	9c a7       	std	Y+44, r25	; 0x2c
    216e:	8b a7       	std	Y+43, r24	; 0x2b
    2170:	23 ce       	rjmp	.-954    	; 0x1db8 <main+0x22>
			_delay_ms(5000);
			break;

		case '*':
			LCD_voidSendCommand(0x01);
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>
			Local_u8Num=arr[0]*arr[2];
    2180:	20 91 a2 00 	lds	r18, 0x00A2
    2184:	30 91 a3 00 	lds	r19, 0x00A3
    2188:	80 91 a6 00 	lds	r24, 0x00A6
    218c:	90 91 a7 00 	lds	r25, 0x00A7
    2190:	fc 01       	movw	r30, r24
    2192:	2e 9f       	mul	r18, r30
    2194:	c0 01       	movw	r24, r0
    2196:	2f 9f       	mul	r18, r31
    2198:	90 0d       	add	r25, r0
    219a:	3e 9f       	mul	r19, r30
    219c:	90 0d       	add	r25, r0
    219e:	11 24       	eor	r1, r1
    21a0:	fe 01       	movw	r30, r28
    21a2:	e9 5b       	subi	r30, 0xB9	; 185
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 83       	st	Z, r24
			LCD_voidSendNumber(Local_u8Num);
    21a8:	fe 01       	movw	r30, r28
    21aa:	e9 5b       	subi	r30, 0xB9	; 185
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendNumber>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e4       	ldi	r25, 0x40	; 64
    21c4:	ac e9       	ldi	r26, 0x9C	; 156
    21c6:	b5 e4       	ldi	r27, 0x45	; 69
    21c8:	8f a3       	std	Y+39, r24	; 0x27
    21ca:	98 a7       	std	Y+40, r25	; 0x28
    21cc:	a9 a7       	std	Y+41, r26	; 0x29
    21ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	6f a1       	ldd	r22, Y+39	; 0x27
    21d2:	78 a5       	ldd	r23, Y+40	; 0x28
    21d4:	89 a5       	ldd	r24, Y+41	; 0x29
    21d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a ef       	ldi	r20, 0xFA	; 250
    21de:	54 e4       	ldi	r21, 0x44	; 68
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8b a3       	std	Y+35, r24	; 0x23
    21ea:	9c a3       	std	Y+36, r25	; 0x24
    21ec:	ad a3       	std	Y+37, r26	; 0x25
    21ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21f0:	6b a1       	ldd	r22, Y+35	; 0x23
    21f2:	7c a1       	ldd	r23, Y+36	; 0x24
    21f4:	8d a1       	ldd	r24, Y+37	; 0x25
    21f6:	9e a1       	ldd	r25, Y+38	; 0x26
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <main+0x47c>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9a a3       	std	Y+34, r25	; 0x22
    220e:	89 a3       	std	Y+33, r24	; 0x21
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <main+0x4fa>
	else if (__tmp > 65535)
    2212:	6b a1       	ldd	r22, Y+35	; 0x23
    2214:	7c a1       	ldd	r23, Y+36	; 0x24
    2216:	8d a1       	ldd	r24, Y+37	; 0x25
    2218:	9e a1       	ldd	r25, Y+38	; 0x26
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <main+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	6f a1       	ldd	r22, Y+39	; 0x27
    222c:	78 a5       	ldd	r23, Y+40	; 0x28
    222e:	89 a5       	ldd	r24, Y+41	; 0x29
    2230:	9a a5       	ldd	r25, Y+42	; 0x2a
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <main+0x4dc>
    2254:	88 ec       	ldi	r24, 0xC8	; 200
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	98 a3       	std	Y+32, r25	; 0x20
    225a:	8f 8f       	std	Y+31, r24	; 0x1f
    225c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    225e:	98 a1       	ldd	r25, Y+32	; 0x20
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <main+0x4ca>
    2264:	98 a3       	std	Y+32, r25	; 0x20
    2266:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	89 a1       	ldd	r24, Y+33	; 0x21
    226a:	9a a1       	ldd	r25, Y+34	; 0x22
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9a a3       	std	Y+34, r25	; 0x22
    2270:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	89 a1       	ldd	r24, Y+33	; 0x21
    2274:	9a a1       	ldd	r25, Y+34	; 0x22
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <main+0x4be>
    227a:	9e cd       	rjmp	.-1220   	; 0x1db8 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	6b a1       	ldd	r22, Y+35	; 0x23
    227e:	7c a1       	ldd	r23, Y+36	; 0x24
    2280:	8d a1       	ldd	r24, Y+37	; 0x25
    2282:	9e a1       	ldd	r25, Y+38	; 0x26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9a a3       	std	Y+34, r25	; 0x22
    228e:	89 a3       	std	Y+33, r24	; 0x21
    2290:	89 a1       	ldd	r24, Y+33	; 0x21
    2292:	9a a1       	ldd	r25, Y+34	; 0x22
    2294:	9e 8f       	std	Y+30, r25	; 0x1e
    2296:	8d 8f       	std	Y+29, r24	; 0x1d
    2298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <main+0x506>
    22a0:	9e 8f       	std	Y+30, r25	; 0x1e
    22a2:	8d 8f       	std	Y+29, r24	; 0x1d
    22a4:	89 cd       	rjmp	.-1262   	; 0x1db8 <main+0x22>
			_delay_ms(5000);
			break;

		case '/':
			LCD_voidSendCommand(0x01);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>
			Local_u8Num=arr[0]/arr[2];
    22b4:	80 91 a2 00 	lds	r24, 0x00A2
    22b8:	90 91 a3 00 	lds	r25, 0x00A3
    22bc:	20 91 a6 00 	lds	r18, 0x00A6
    22c0:	30 91 a7 00 	lds	r19, 0x00A7
    22c4:	b9 01       	movw	r22, r18
    22c6:	0e 94 67 12 	call	0x24ce	; 0x24ce <__udivmodhi4>
    22ca:	cb 01       	movw	r24, r22
    22cc:	fe 01       	movw	r30, r28
    22ce:	e9 5b       	subi	r30, 0xB9	; 185
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 83       	st	Z, r24
			LCD_voidSendNumber(Local_u8Num);
    22d4:	fe 01       	movw	r30, r28
    22d6:	e9 5b       	subi	r30, 0xB9	; 185
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_voidSendNumber>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e4       	ldi	r25, 0x40	; 64
    22f0:	ac e9       	ldi	r26, 0x9C	; 156
    22f2:	b5 e4       	ldi	r27, 0x45	; 69
    22f4:	89 8f       	std	Y+25, r24	; 0x19
    22f6:	9a 8f       	std	Y+26, r25	; 0x1a
    22f8:	ab 8f       	std	Y+27, r26	; 0x1b
    22fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	69 8d       	ldd	r22, Y+25	; 0x19
    22fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a ef       	ldi	r20, 0xFA	; 250
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8d 8b       	std	Y+21, r24	; 0x15
    2316:	9e 8b       	std	Y+22, r25	; 0x16
    2318:	af 8b       	std	Y+23, r26	; 0x17
    231a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <main+0x5a8>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9c 8b       	std	Y+20, r25	; 0x14
    233a:	8b 8b       	std	Y+19, r24	; 0x13
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <main+0x626>
	else if (__tmp > 65535)
    233e:	6d 89       	ldd	r22, Y+21	; 0x15
    2340:	7e 89       	ldd	r23, Y+22	; 0x16
    2342:	8f 89       	ldd	r24, Y+23	; 0x17
    2344:	98 8d       	ldd	r25, Y+24	; 0x18
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <main+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	69 8d       	ldd	r22, Y+25	; 0x19
    2358:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9c 8b       	std	Y+20, r25	; 0x14
    237c:	8b 8b       	std	Y+19, r24	; 0x13
    237e:	0f c0       	rjmp	.+30     	; 0x239e <main+0x608>
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9a 8b       	std	Y+18, r25	; 0x12
    2386:	89 8b       	std	Y+17, r24	; 0x11
    2388:	89 89       	ldd	r24, Y+17	; 0x11
    238a:	9a 89       	ldd	r25, Y+18	; 0x12
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0x5f6>
    2390:	9a 8b       	std	Y+18, r25	; 0x12
    2392:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	8b 89       	ldd	r24, Y+19	; 0x13
    2396:	9c 89       	ldd	r25, Y+20	; 0x14
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9c 8b       	std	Y+20, r25	; 0x14
    239c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	8b 89       	ldd	r24, Y+19	; 0x13
    23a0:	9c 89       	ldd	r25, Y+20	; 0x14
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	69 f7       	brne	.-38     	; 0x2380 <main+0x5ea>
    23a6:	08 cd       	rjmp	.-1520   	; 0x1db8 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6d 89       	ldd	r22, Y+21	; 0x15
    23aa:	7e 89       	ldd	r23, Y+22	; 0x16
    23ac:	8f 89       	ldd	r24, Y+23	; 0x17
    23ae:	98 8d       	ldd	r25, Y+24	; 0x18
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9c 8b       	std	Y+20, r25	; 0x14
    23ba:	8b 8b       	std	Y+19, r24	; 0x13
    23bc:	8b 89       	ldd	r24, Y+19	; 0x13
    23be:	9c 89       	ldd	r25, Y+20	; 0x14
    23c0:	98 8b       	std	Y+16, r25	; 0x10
    23c2:	8f 87       	std	Y+15, r24	; 0x0f
    23c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c6:	98 89       	ldd	r25, Y+16	; 0x10
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <main+0x632>
    23cc:	98 8b       	std	Y+16, r25	; 0x10
    23ce:	8f 87       	std	Y+15, r24	; 0x0f
    23d0:	f3 cc       	rjmp	.-1562   	; 0x1db8 <main+0x22>
			_delay_ms(5000);
			break;

		default:
			LCD_voidSendCommand(0x01);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	0e 94 10 08 	call	0x1020	; 0x1020 <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_voidGoToXY>
			LCD__voidSendString("wrong operation");
    23e0:	82 e7       	ldi	r24, 0x72	; 114
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD__voidSendString>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e4       	ldi	r25, 0x40	; 64
    23ec:	ac e9       	ldi	r26, 0x9C	; 156
    23ee:	b5 e4       	ldi	r27, 0x45	; 69
    23f0:	8b 87       	std	Y+11, r24	; 0x0b
    23f2:	9c 87       	std	Y+12, r25	; 0x0c
    23f4:	ad 87       	std	Y+13, r26	; 0x0d
    23f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a ef       	ldi	r20, 0xFA	; 250
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8f 83       	std	Y+7, r24	; 0x07
    2412:	98 87       	std	Y+8, r25	; 0x08
    2414:	a9 87       	std	Y+9, r26	; 0x09
    2416:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <main+0x6a4>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <main+0x722>
	else if (__tmp > 65535)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <main+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	0f c0       	rjmp	.+30     	; 0x249a <main+0x704>
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <main+0x6f2>
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <main+0x6e6>
    24a2:	8a cc       	rjmp	.-1772   	; 0x1db8 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <main+0x72e>
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	75 cc       	rjmp	.-1814   	; 0x1db8 <main+0x22>

000024ce <__udivmodhi4>:
    24ce:	aa 1b       	sub	r26, r26
    24d0:	bb 1b       	sub	r27, r27
    24d2:	51 e1       	ldi	r21, 0x11	; 17
    24d4:	07 c0       	rjmp	.+14     	; 0x24e4 <__udivmodhi4_ep>

000024d6 <__udivmodhi4_loop>:
    24d6:	aa 1f       	adc	r26, r26
    24d8:	bb 1f       	adc	r27, r27
    24da:	a6 17       	cp	r26, r22
    24dc:	b7 07       	cpc	r27, r23
    24de:	10 f0       	brcs	.+4      	; 0x24e4 <__udivmodhi4_ep>
    24e0:	a6 1b       	sub	r26, r22
    24e2:	b7 0b       	sbc	r27, r23

000024e4 <__udivmodhi4_ep>:
    24e4:	88 1f       	adc	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	5a 95       	dec	r21
    24ea:	a9 f7       	brne	.-22     	; 0x24d6 <__udivmodhi4_loop>
    24ec:	80 95       	com	r24
    24ee:	90 95       	com	r25
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	08 95       	ret

000024f6 <__udivmodsi4>:
    24f6:	a1 e2       	ldi	r26, 0x21	; 33
    24f8:	1a 2e       	mov	r1, r26
    24fa:	aa 1b       	sub	r26, r26
    24fc:	bb 1b       	sub	r27, r27
    24fe:	fd 01       	movw	r30, r26
    2500:	0d c0       	rjmp	.+26     	; 0x251c <__udivmodsi4_ep>

00002502 <__udivmodsi4_loop>:
    2502:	aa 1f       	adc	r26, r26
    2504:	bb 1f       	adc	r27, r27
    2506:	ee 1f       	adc	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	a2 17       	cp	r26, r18
    250c:	b3 07       	cpc	r27, r19
    250e:	e4 07       	cpc	r30, r20
    2510:	f5 07       	cpc	r31, r21
    2512:	20 f0       	brcs	.+8      	; 0x251c <__udivmodsi4_ep>
    2514:	a2 1b       	sub	r26, r18
    2516:	b3 0b       	sbc	r27, r19
    2518:	e4 0b       	sbc	r30, r20
    251a:	f5 0b       	sbc	r31, r21

0000251c <__udivmodsi4_ep>:
    251c:	66 1f       	adc	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	88 1f       	adc	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	1a 94       	dec	r1
    2526:	69 f7       	brne	.-38     	; 0x2502 <__udivmodsi4_loop>
    2528:	60 95       	com	r22
    252a:	70 95       	com	r23
    252c:	80 95       	com	r24
    252e:	90 95       	com	r25
    2530:	9b 01       	movw	r18, r22
    2532:	ac 01       	movw	r20, r24
    2534:	bd 01       	movw	r22, r26
    2536:	cf 01       	movw	r24, r30
    2538:	08 95       	ret

0000253a <__prologue_saves__>:
    253a:	2f 92       	push	r2
    253c:	3f 92       	push	r3
    253e:	4f 92       	push	r4
    2540:	5f 92       	push	r5
    2542:	6f 92       	push	r6
    2544:	7f 92       	push	r7
    2546:	8f 92       	push	r8
    2548:	9f 92       	push	r9
    254a:	af 92       	push	r10
    254c:	bf 92       	push	r11
    254e:	cf 92       	push	r12
    2550:	df 92       	push	r13
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	ca 1b       	sub	r28, r26
    2564:	db 0b       	sbc	r29, r27
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	09 94       	ijmp

00002572 <__epilogue_restores__>:
    2572:	2a 88       	ldd	r2, Y+18	; 0x12
    2574:	39 88       	ldd	r3, Y+17	; 0x11
    2576:	48 88       	ldd	r4, Y+16	; 0x10
    2578:	5f 84       	ldd	r5, Y+15	; 0x0f
    257a:	6e 84       	ldd	r6, Y+14	; 0x0e
    257c:	7d 84       	ldd	r7, Y+13	; 0x0d
    257e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2580:	9b 84       	ldd	r9, Y+11	; 0x0b
    2582:	aa 84       	ldd	r10, Y+10	; 0x0a
    2584:	b9 84       	ldd	r11, Y+9	; 0x09
    2586:	c8 84       	ldd	r12, Y+8	; 0x08
    2588:	df 80       	ldd	r13, Y+7	; 0x07
    258a:	ee 80       	ldd	r14, Y+6	; 0x06
    258c:	fd 80       	ldd	r15, Y+5	; 0x05
    258e:	0c 81       	ldd	r16, Y+4	; 0x04
    2590:	1b 81       	ldd	r17, Y+3	; 0x03
    2592:	aa 81       	ldd	r26, Y+2	; 0x02
    2594:	b9 81       	ldd	r27, Y+1	; 0x01
    2596:	ce 0f       	add	r28, r30
    2598:	d1 1d       	adc	r29, r1
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	ed 01       	movw	r28, r26
    25a6:	08 95       	ret

000025a8 <_exit>:
    25a8:	f8 94       	cli

000025aa <__stop_program>:
    25aa:	ff cf       	rjmp	.-2      	; 0x25aa <__stop_program>
