
Temp_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002252  000022e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  000022ee  2**0
                  ALLOC
  3 .stab         00001c68  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000daf  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e5       	ldi	r30, 0x52	; 82
      78:	f2 e2       	ldi	r31, 0x22	; 34
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 71 10 	call	0x20e2	; 0x20e2 <main>
      8a:	0c 94 27 11 	jmp	0x224e	; 0x224e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8 ADC_u8ISRSource;

u8 ADC_u8BusyState = IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set voltage refrence selection*/

	ADMUX &= 0b0011111;
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 71       	andi	r24, 0x1F	; 31
     b5a:	8c 93       	st	X, r24
	ADMUX|= ADC_Refrence_Seletion;
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 67       	ori	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

	/*set left agdjust result*/
#if (ADC_Resolution == Eight_Bits)
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#else
#error "set resolution error"
#endif

	/*set prescaler*/
	ADCSRA &= 0b11111000;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA |= ADC_Prescaler;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

	/*set conversion mode*/
#if (ADC_Conversion == Single_conversion)
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8c 93       	st	X, r24
#else
#error	"Converion set error"
#endif

	/*enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversion_Synch>:

u8 ADC_u8StartConversion_Synch(u8 Copy_u8Channel,u16* Copy_pu8Reading)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     bd0:	1a 82       	std	Y+2, r1	; 0x02
     bd2:	1b 82       	std	Y+3, r1	; 0x03
     bd4:	1c 82       	std	Y+4, r1	; 0x04
     bd6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState=OK;
     bd8:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     bda:	80 91 71 00 	lds	r24, 0x0071
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <ADC_u8StartConversion_Synch+0x2e>
     be2:	69 c0       	rjmp	.+210    	; 0xcb6 <ADC_u8StartConversion_Synch+0x100>
	{
		/*ADC is now busy*/
		ADC_u8BusyState = BUSY;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 71 00 	sts	0x0071, r24
		/*clear theMUX bits in ADMUX register*/
		ADMUX &= 0b11100000;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 7e       	andi	r24, 0xE0	; 224
     bf6:	8c 93       	st	X, r24

		/*set the required channel into the MUX bits*/
		ADMUX |= Copy_u8Channel;
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	8e 81       	ldd	r24, Y+6	; 0x06
     c04:	89 2b       	or	r24, r25
     c06:	8c 93       	st	X, r24

#if (ADC_Conversion == Single_conversion)
		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c08:	a6 e2       	ldi	r26, 0x26	; 38
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e6 e2       	ldi	r30, 0x26	; 38
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	8c 93       	st	X, r24
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <ADC_u8StartConversion_Synch+0x78>

		/*polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	9b 81       	ldd	r25, Y+3	; 0x03
     c1c:	ac 81       	ldd	r26, Y+4	; 0x04
     c1e:	bd 81       	ldd	r27, Y+5	; 0x05
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	a1 1d       	adc	r26, r1
     c24:	b1 1d       	adc	r27, r1
     c26:	8a 83       	std	Y+2, r24	; 0x02
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	ac 83       	std	Y+4, r26	; 0x04
     c2c:	bd 83       	std	Y+5, r27	; 0x05
#if (ADC_Conversion == Single_conversion)
		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*polling (busy waiting) until the conversion complete flag is set or counter reaching timeout value*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF)) == 0) && (Local_u32Counter != ADC_u32TIMEOUT))
     c2e:	e6 e2       	ldi	r30, 0x26	; 38
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	82 95       	swap	r24
     c36:	8f 70       	andi	r24, 0x0F	; 15
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	61 f4       	brne	.+24     	; 0xc5c <ADC_u8StartConversion_Synch+0xa6>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	ac 81       	ldd	r26, Y+4	; 0x04
     c4a:	bd 81       	ldd	r27, Y+5	; 0x05
     c4c:	88 38       	cpi	r24, 0x88	; 136
     c4e:	23 e1       	ldi	r18, 0x13	; 19
     c50:	92 07       	cpc	r25, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	a2 07       	cpc	r26, r18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	b2 07       	cpc	r27, r18
     c5a:	f1 f6       	brne	.-68     	; 0xc18 <ADC_u8StartConversion_Synch+0x62>
		{
			Local_u32Counter++;
		}
		if (Local_u32Counter== ADC_u32TIMEOUT)
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	ac 81       	ldd	r26, Y+4	; 0x04
     c62:	bd 81       	ldd	r27, Y+5	; 0x05
     c64:	88 38       	cpi	r24, 0x88	; 136
     c66:	23 e1       	ldi	r18, 0x13	; 19
     c68:	92 07       	cpc	r25, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	19 f4       	brne	.+6      	; 0xc7a <ADC_u8StartConversion_Synch+0xc4>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	12 c0       	rjmp	.+36     	; 0xc9e <ADC_u8StartConversion_Synch+0xe8>
		}
		else
		{
			/*Loop is broken because flag is raised*/
			/*clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     c7a:	a6 e2       	ldi	r26, 0x26	; 38
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 61       	ori	r24, 0x10	; 16
     c86:	8c 93       	st	X, r24

			/*return the reading*/
			/*ADC is finishied, return it to IDLE*/
#if 	(ADC_Resolution == Eight_Bits)
			*Copy_pu8Reading= ADCH;
     c88:	e5 e2       	ldi	r30, 0x25	; 37
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	ef 81       	ldd	r30, Y+7	; 0x07
     c94:	f8 85       	ldd	r31, Y+8	; 0x08
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
			ADC_u8BusyState = IDLE;
     c9a:	10 92 71 00 	sts	0x0071, r1
#endif

		/*return the reading*/
		/*ADC is finishied, return it to IDLE*/
#if 	(ADC_Resolution == Eight_Bits)
		*Copy_pu8Reading= ADCH;
     c9e:	e5 e2       	ldi	r30, 0x25	; 37
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	88 2f       	mov	r24, r24
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	ef 81       	ldd	r30, Y+7	; 0x07
     caa:	f8 85       	ldd	r31, Y+8	; 0x08
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
		ADC_u8BusyState = IDLE;
     cb0:	10 92 71 00 	sts	0x0071, r1
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <ADC_u8StartConversion_Synch+0x104>
#error "Resolution error"
#endif
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNCTION;
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
}
     cbc:	28 96       	adiw	r28, 0x08	; 8
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <ADC_u8StartConversion_A_Synch>:

u8 ADC_u8StartConversion_A_Synch(u8 Copy_u8Channel,u8* Copy_pu8Reading,void (*Copy_pvNotificationFunc)(void))
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <ADC_u8StartConversion_A_Synch+0x6>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <ADC_u8StartConversion_A_Synch+0x8>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <ADC_u8StartConversion_A_Synch+0xa>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	8a 83       	std	Y+2, r24	; 0x02
     cde:	7c 83       	std	Y+4, r23	; 0x04
     ce0:	6b 83       	std	Y+3, r22	; 0x03
     ce2:	5e 83       	std	Y+6, r21	; 0x06
     ce4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     ce6:	19 82       	std	Y+1, r1	; 0x01
	if (ADC_u8BusyState == IDLE)
     ce8:	80 91 71 00 	lds	r24, 0x0071
     cec:	88 23       	and	r24, r24
     cee:	d1 f5       	brne	.+116    	; 0xd64 <ADC_u8StartConversion_A_Synch+0x96>
	{
		if ((Copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL))
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	21 f0       	breq	.+8      	; 0xd00 <ADC_u8StartConversion_A_Synch+0x32>
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	19 f4       	brne	.+6      	; 0xd06 <ADC_u8StartConversion_A_Synch+0x38>
		{
			Local_u8ErrorState=NULL_POINTER;
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	31 c0       	rjmp	.+98     	; 0xd68 <ADC_u8StartConversion_A_Synch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being IDLE*/
			ADC_u8BusyState=BUSY;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 71 00 	sts	0x0071, r24

			/*make ISR source: Single channel asynchronous*/
			ADC_u8ISRSource = SINGLE_CHANNEL_ASYNCH;
     d0c:	10 92 73 00 	sts	0x0073, r1

			/*initialize the reading variable globally*/
			ADC_pu8Reading = Copy_pu8Reading;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	90 93 69 00 	sts	0x0069, r25
     d18:	80 93 68 00 	sts	0x0068, r24

			/*initialize the callback notification function globally*/
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	90 93 6b 00 	sts	0x006B, r25
     d24:	80 93 6a 00 	sts	0x006A, r24

			/*clear theMUX bits in ADMUX register*/
			ADMUX &= 0b11100000;
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 7e       	andi	r24, 0xE0	; 224
     d34:	8c 93       	st	X, r24

			/*set the required channel into the MUX bits*/
			ADMUX |= Copy_u8Channel;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	90 81       	ld	r25, Z
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	89 2b       	or	r24, r25
     d44:	8c 93       	st	X, r24
#if (ADC_Conversion == Single_conversion)
			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	8c 93       	st	X, r24
#endif
			/*ADC interrupt enable*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     d54:	a6 e2       	ldi	r26, 0x26	; 38
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e6 e2       	ldi	r30, 0x26	; 38
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	8c 93       	st	X, r24
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <ADC_u8StartConversion_A_Synch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNCTION;
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d68:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6a:	26 96       	adiw	r28, 0x06	; 6
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <ADC_u8StartChainAsynch+0x6>
     d82:	0f 92       	push	r0
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9b 83       	std	Y+3, r25	; 0x03
     d8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     d8c:	19 82       	std	Y+1, r1	; 0x01

	/*check NULL pointer*/
	if(Copy_Chain == NULL)
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	9b 81       	ldd	r25, Y+3	; 0x03
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	19 f4       	brne	.+6      	; 0xd9c <ADC_u8StartChainAsynch+0x20>
	{
		Local_u8ErrorState=NULL_POINTER;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	55 c0       	rjmp	.+170    	; 0xe46 <ADC_u8StartChainAsynch+0xca>
	}
	else
	{
		if(ADC_u8BusyState==IDLE)
     d9c:	80 91 71 00 	lds	r24, 0x0071
     da0:	88 23       	and	r24, r24
     da2:	09 f0       	breq	.+2      	; 0xda6 <ADC_u8StartChainAsynch+0x2a>
     da4:	4e c0       	rjmp	.+156    	; 0xe42 <ADC_u8StartChainAsynch+0xc6>
		{
			/*make ADC Busy*/
			ADC_u8BusyState= BUSY;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 71 00 	sts	0x0071, r24

			/*make ISR source: chain Asynchronus*/
			ADC_u8ISRSource = CHAIN_ASYNCH;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 73 00 	sts	0x0073, r24

			/*Initialize chain channel array*/
			ADC_pu8ChainChannelArr=Copy_Chain->Channel;
     db2:	ea 81       	ldd	r30, Y+2	; 0x02
     db4:	fb 81       	ldd	r31, Y+3	; 0x03
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	90 93 6d 00 	sts	0x006D, r25
     dbe:	80 93 6c 00 	sts	0x006C, r24

			/*Initialize result array*/
			ADC_pu16ChainResultArr=Copy_Chain->Result;
     dc2:	ea 81       	ldd	r30, Y+2	; 0x02
     dc4:	fb 81       	ldd	r31, Y+3	; 0x03
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	90 93 6f 00 	sts	0x006F, r25
     dce:	80 93 6e 00 	sts	0x006E, r24

			/*Initialize chain Size*/
			ADC_u8ChainSize=Copy_Chain->Size;
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	84 81       	ldd	r24, Z+4	; 0x04
     dd8:	80 93 72 00 	sts	0x0072, r24

			/*Initialize Notification Function*/
			ADC_pvCallBackNotificationFunc= Copy_Chain->NotificationFunc;
     ddc:	ea 81       	ldd	r30, Y+2	; 0x02
     dde:	fb 81       	ldd	r31, Y+3	; 0x03
     de0:	85 81       	ldd	r24, Z+5	; 0x05
     de2:	96 81       	ldd	r25, Z+6	; 0x06
     de4:	90 93 6b 00 	sts	0x006B, r25
     de8:	80 93 6a 00 	sts	0x006A, r24

			/*Initialize Current Conversion Index*/
			ADC_u8ChainConversionIndex=0;
     dec:	10 92 70 00 	sts	0x0070, r1

			/*Set required channel (First channel)*/
			ADMUX &= 0b11100000;
     df0:	a7 e2       	ldi	r26, 0x27	; 39
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e7 e2       	ldi	r30, 0x27	; 39
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 7e       	andi	r24, 0xE0	; 224
     dfc:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     dfe:	a7 e2       	ldi	r26, 0x27	; 39
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e7 e2       	ldi	r30, 0x27	; 39
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	40 81       	ld	r20, Z
     e08:	20 91 6c 00 	lds	r18, 0x006C
     e0c:	30 91 6d 00 	lds	r19, 0x006D
     e10:	80 91 70 00 	lds	r24, 0x0070
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	e8 0f       	add	r30, r24
     e1c:	f9 1f       	adc	r31, r25
     e1e:	80 81       	ld	r24, Z
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e24:	a6 e2       	ldi	r26, 0x26	; 38
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e2       	ldi	r30, 0x26	; 38
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 64       	ori	r24, 0x40	; 64
     e30:	8c 93       	st	X, r24

			/*Enable conversion complete interrupt*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e32:	a6 e2       	ldi	r26, 0x26	; 38
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e2       	ldi	r30, 0x26	; 38
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 60       	ori	r24, 0x08	; 8
     e3e:	8c 93       	st	X, r24
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <ADC_u8StartChainAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState=BUSY_FUNCTION;
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_u8ErrorState;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <__vector_16>:

void __vector_16 (void)     __attribute__((signal));
void __vector_16 (void)
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
     e7e:	80 91 73 00 	lds	r24, 0x0073
     e82:	88 23       	and	r24, r24
     e84:	b9 f4       	brne	.+46     	; 0xeb4 <__vector_16+0x60>
	{
		/*read ADC result*/
#if 	(ADC_Resolution == Eight_Bits)
		*ADC_pu8Reading= ADCH;
     e86:	a0 91 68 00 	lds	r26, 0x0068
     e8a:	b0 91 69 00 	lds	r27, 0x0069
     e8e:	e5 e2       	ldi	r30, 0x25	; 37
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8c 93       	st	X, r24
#else
#error "Resolution error"
#endif

		/*make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
     e96:	10 92 71 00 	sts	0x0071, r1

		/*Invoke the callback notification function*/
		ADC_pvCallBackNotificationFunc();
     e9a:	e0 91 6a 00 	lds	r30, 0x006A
     e9e:	f0 91 6b 00 	lds	r31, 0x006B
     ea2:	09 95       	icall

		/*disable ADC conversion complete interrupt*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     ea4:	a6 e2       	ldi	r26, 0x26	; 38
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e6 e2       	ldi	r30, 0x26	; 38
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	8c 93       	st	X, r24
     eb2:	55 c0       	rjmp	.+170    	; 0xf5e <__vector_16+0x10a>
	}
	else if(ADC_u8ISRSource == CHAIN_ASYNCH) /*ISR source is chain */
     eb4:	80 91 73 00 	lds	r24, 0x0073
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <__vector_16+0x6a>
     ebc:	50 c0       	rjmp	.+160    	; 0xf5e <__vector_16+0x10a>
	{
		/*Read the current conversion*/

#if 	(ADC_Resolution == Eight_Bits)
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex]= ADCH;
     ebe:	20 91 6e 00 	lds	r18, 0x006E
     ec2:	30 91 6f 00 	lds	r19, 0x006F
     ec6:	80 91 70 00 	lds	r24, 0x0070
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	d9 01       	movw	r26, r18
     ed4:	a8 0f       	add	r26, r24
     ed6:	b9 1f       	adc	r27, r25
     ed8:	e5 e2       	ldi	r30, 0x25	; 37
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	9c 93       	st	X, r25
     ee6:	8e 93       	st	-X, r24
#else
#error "Resolution error"
#endif

		/*increment chain index*/
		ADC_u8ChainConversionIndex++;
     ee8:	80 91 70 00 	lds	r24, 0x0070
     eec:	8f 5f       	subi	r24, 0xFF	; 255
     eee:	80 93 70 00 	sts	0x0070, r24

		/*Check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
     ef2:	90 91 70 00 	lds	r25, 0x0070
     ef6:	80 91 72 00 	lds	r24, 0x0072
     efa:	98 17       	cp	r25, r24
     efc:	79 f4       	brne	.+30     	; 0xf1c <__vector_16+0xc8>
		{
			/*chain is finished*/
			/*ADC is now IDLE*/
			ADC_u8BusyState=IDLE;
     efe:	10 92 71 00 	sts	0x0071, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
     f02:	e0 91 6a 00 	lds	r30, 0x006A
     f06:	f0 91 6b 00 	lds	r31, 0x006B
     f0a:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e6 e2       	ldi	r30, 0x26	; 38
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	87 7f       	andi	r24, 0xF7	; 247
     f18:	8c 93       	st	X, r24
     f1a:	21 c0       	rjmp	.+66     	; 0xf5e <__vector_16+0x10a>
		}
		else
		{
			/*chain is not finished*/
			/*set new required channel*/
			ADMUX &= 0b11100000;
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 7e       	andi	r24, 0xE0	; 224
     f28:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     f2a:	a7 e2       	ldi	r26, 0x27	; 39
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e2       	ldi	r30, 0x27	; 39
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	40 81       	ld	r20, Z
     f34:	20 91 6c 00 	lds	r18, 0x006C
     f38:	30 91 6d 00 	lds	r19, 0x006D
     f3c:	80 91 70 00 	lds	r24, 0x0070
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	e8 0f       	add	r30, r24
     f48:	f9 1f       	adc	r31, r25
     f4a:	80 81       	ld	r24, Z
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24

			/*start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     f50:	a6 e2       	ldi	r26, 0x26	; 38
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e6 e2       	ldi	r30, 0x26	; 38
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 64       	ori	r24, 0x40	; 64
     f5c:	8c 93       	st	X, r24
		}

	}
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	28 97       	sbiw	r28, 0x08	; 8
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	8a 83       	std	Y+2, r24	; 0x02
     f9a:	6b 83       	std	Y+3, r22	; 0x03
     f9c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f9e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <DIO_u8SetPinValue+0x24>
     fa6:	f4 c0       	rjmp	.+488    	; 0x1190 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	88 23       	and	r24, r24
     fac:	09 f0       	breq	.+2      	; 0xfb0 <DIO_u8SetPinValue+0x2c>
     fae:	77 c0       	rjmp	.+238    	; 0x109e <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	38 87       	std	Y+8, r19	; 0x08
     fb8:	2f 83       	std	Y+7, r18	; 0x07
     fba:	8f 81       	ldd	r24, Y+7	; 0x07
     fbc:	98 85       	ldd	r25, Y+8	; 0x08
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	59 f1       	breq	.+86     	; 0x101a <DIO_u8SetPinValue+0x96>
     fc4:	2f 81       	ldd	r18, Y+7	; 0x07
     fc6:	38 85       	ldd	r19, Y+8	; 0x08
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <DIO_u8SetPinValue+0x54>
     fce:	8f 81       	ldd	r24, Y+7	; 0x07
     fd0:	98 85       	ldd	r25, Y+8	; 0x08
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f0       	breq	.+26     	; 0xff0 <DIO_u8SetPinValue+0x6c>
     fd6:	60 c0       	rjmp	.+192    	; 0x1098 <DIO_u8SetPinValue+0x114>
     fd8:	2f 81       	ldd	r18, Y+7	; 0x07
     fda:	38 85       	ldd	r19, Y+8	; 0x08
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	89 f1       	breq	.+98     	; 0x1044 <DIO_u8SetPinValue+0xc0>
     fe2:	8f 81       	ldd	r24, Y+7	; 0x07
     fe4:	98 85       	ldd	r25, Y+8	; 0x08
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <DIO_u8SetPinValue+0x6a>
     fec:	40 c0       	rjmp	.+128    	; 0x106e <DIO_u8SetPinValue+0xea>
     fee:	54 c0       	rjmp	.+168    	; 0x1098 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     ff0:	ab e3       	ldi	r26, 0x3B	; 59
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	eb e3       	ldi	r30, 0x3B	; 59
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_u8SetPinValue+0x8a>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_u8SetPinValue+0x86>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	bd c0       	rjmp	.+378    	; 0x1194 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    101a:	a8 e3       	ldi	r26, 0x38	; 56
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e8 e3       	ldi	r30, 0x38	; 56
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8SetPinValue+0xb4>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_u8SetPinValue+0xb0>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	a8 c0       	rjmp	.+336    	; 0x1194 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1044:	a5 e3       	ldi	r26, 0x35	; 53
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e3       	ldi	r30, 0x35	; 53
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_u8SetPinValue+0xde>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_u8SetPinValue+0xda>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	93 c0       	rjmp	.+294    	; 0x1194 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    106e:	a2 e3       	ldi	r26, 0x32	; 50
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e2 e3       	ldi	r30, 0x32	; 50
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_u8SetPinValue+0x108>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_u8SetPinValue+0x104>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	7e c0       	rjmp	.+252    	; 0x1194 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	7b c0       	rjmp	.+246    	; 0x1194 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO_u8SetPinValue+0x122>
    10a4:	72 c0       	rjmp	.+228    	; 0x118a <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3e 83       	std	Y+6, r19	; 0x06
    10ae:	2d 83       	std	Y+5, r18	; 0x05
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	49 f1       	breq	.+82     	; 0x110c <DIO_u8SetPinValue+0x188>
    10ba:	2d 81       	ldd	r18, Y+5	; 0x05
    10bc:	3e 81       	ldd	r19, Y+6	; 0x06
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <DIO_u8SetPinValue+0x14a>
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <DIO_u8SetPinValue+0x160>
    10cc:	5b c0       	rjmp	.+182    	; 0x1184 <DIO_u8SetPinValue+0x200>
    10ce:	2d 81       	ldd	r18, Y+5	; 0x05
    10d0:	3e 81       	ldd	r19, Y+6	; 0x06
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <DIO_u8SetPinValue+0x1b0>
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	e9 f1       	breq	.+122    	; 0x115c <DIO_u8SetPinValue+0x1d8>
    10e2:	50 c0       	rjmp	.+160    	; 0x1184 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    10e4:	ab e3       	ldi	r26, 0x3B	; 59
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinValue+0x17e>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinValue+0x17a>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	44 c0       	rjmp	.+136    	; 0x1194 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8SetPinValue+0x1a6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8SetPinValue+0x1a2>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	30 c0       	rjmp	.+96     	; 0x1194 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1134:	a5 e3       	ldi	r26, 0x35	; 53
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_u8SetPinValue+0x1ce>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_u8SetPinValue+0x1ca>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	1c c0       	rjmp	.+56     	; 0x1194 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    115c:	a2 e3       	ldi	r26, 0x32	; 50
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_u8SetPinValue+0x1f6>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_u8SetPinValue+0x1f2>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
}
    1196:	28 96       	adiw	r28, 0x08	; 8
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <DIO_u8SetPortValue+0x6>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <DIO_u8SetPortValue+0x8>
    11b0:	0f 92       	push	r0
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    11ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	a8 f5       	brcc	.+106    	; 0x122c <DIO_u8SetPortValue+0x84>
	{
		switch(Copy_u8Port)
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3d 83       	std	Y+5, r19	; 0x05
    11ca:	2c 83       	std	Y+4, r18	; 0x04
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	d1 f0       	breq	.+52     	; 0x120a <DIO_u8SetPortValue+0x62>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_u8SetPortValue+0x42>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	61 f0       	breq	.+24     	; 0x1200 <DIO_u8SetPortValue+0x58>
    11e8:	1f c0       	rjmp	.+62     	; 0x1228 <DIO_u8SetPortValue+0x80>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <DIO_u8SetPortValue+0x6c>
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	81 f0       	breq	.+32     	; 0x121e <DIO_u8SetPortValue+0x76>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	80 83       	st	Z, r24
    1208:	11 c0       	rjmp	.+34     	; 0x122c <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	80 83       	st	Z, r24
    1212:	0c c0       	rjmp	.+24     	; 0x122c <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1214:	e5 e3       	ldi	r30, 0x35	; 53
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	80 83       	st	Z, r24
    121c:	07 c0       	rjmp	.+14     	; 0x122c <DIO_u8SetPortValue+0x84>
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    121e:	e2 e3       	ldi	r30, 0x32	; 50
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	80 83       	st	Z, r24
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8SetPortValue+0x84>
		default: Local_u8ErrorState=1; break;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	27 97       	sbiw	r28, 0x07	; 7
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	6b 83       	std	Y+3, r22	; 0x03
    1256:	5d 83       	std	Y+5, r21	; 0x05
    1258:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    125a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	09 f4       	brne	.+2      	; 0x1266 <DIO_u8GetPinValue+0x28>
    1264:	78 c0       	rjmp	.+240    	; 0x1356 <DIO_u8GetPinValue+0x118>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 30       	cpi	r24, 0x08	; 8
    126a:	08 f0       	brcs	.+2      	; 0x126e <DIO_u8GetPinValue+0x30>
    126c:	74 c0       	rjmp	.+232    	; 0x1356 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3f 83       	std	Y+7, r19	; 0x07
    1276:	2e 83       	std	Y+6, r18	; 0x06
    1278:	4e 81       	ldd	r20, Y+6	; 0x06
    127a:	5f 81       	ldd	r21, Y+7	; 0x07
    127c:	41 30       	cpi	r20, 0x01	; 1
    127e:	51 05       	cpc	r21, r1
    1280:	59 f1       	breq	.+86     	; 0x12d8 <DIO_u8GetPinValue+0x9a>
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	9f 81       	ldd	r25, Y+7	; 0x07
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	91 05       	cpc	r25, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <DIO_u8GetPinValue+0x5a>
    128c:	2e 81       	ldd	r18, Y+6	; 0x06
    128e:	3f 81       	ldd	r19, Y+7	; 0x07
    1290:	21 15       	cp	r18, r1
    1292:	31 05       	cpc	r19, r1
    1294:	69 f0       	breq	.+26     	; 0x12b0 <DIO_u8GetPinValue+0x72>
    1296:	5c c0       	rjmp	.+184    	; 0x1350 <DIO_u8GetPinValue+0x112>
    1298:	4e 81       	ldd	r20, Y+6	; 0x06
    129a:	5f 81       	ldd	r21, Y+7	; 0x07
    129c:	42 30       	cpi	r20, 0x02	; 2
    129e:	51 05       	cpc	r21, r1
    12a0:	79 f1       	breq	.+94     	; 0x1300 <DIO_u8GetPinValue+0xc2>
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <DIO_u8GetPinValue+0x70>
    12ac:	3d c0       	rjmp	.+122    	; 0x1328 <DIO_u8GetPinValue+0xea>
    12ae:	50 c0       	rjmp	.+160    	; 0x1350 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
    12b0:	e9 e3       	ldi	r30, 0x39	; 57
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8GetPinValue+0x8a>
    12c4:	55 95       	asr	r21
    12c6:	47 95       	ror	r20
    12c8:	8a 95       	dec	r24
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8GetPinValue+0x86>
    12cc:	ca 01       	movw	r24, r20
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	ec 81       	ldd	r30, Y+4	; 0x04
    12d2:	fd 81       	ldd	r31, Y+5	; 0x05
    12d4:	80 83       	st	Z, r24
    12d6:	41 c0       	rjmp	.+130    	; 0x135a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
    12d8:	e6 e3       	ldi	r30, 0x36	; 54
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 2f       	mov	r24, r24
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_u8GetPinValue+0xb2>
    12ec:	55 95       	asr	r21
    12ee:	47 95       	ror	r20
    12f0:	8a 95       	dec	r24
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_u8GetPinValue+0xae>
    12f4:	ca 01       	movw	r24, r20
    12f6:	81 70       	andi	r24, 0x01	; 1
    12f8:	ec 81       	ldd	r30, Y+4	; 0x04
    12fa:	fd 81       	ldd	r31, Y+5	; 0x05
    12fc:	80 83       	st	Z, r24
    12fe:	2d c0       	rjmp	.+90     	; 0x135a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
    1300:	e3 e3       	ldi	r30, 0x33	; 51
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_u8GetPinValue+0xda>
    1314:	55 95       	asr	r21
    1316:	47 95       	ror	r20
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_u8GetPinValue+0xd6>
    131c:	ca 01       	movw	r24, r20
    131e:	81 70       	andi	r24, 0x01	; 1
    1320:	ec 81       	ldd	r30, Y+4	; 0x04
    1322:	fd 81       	ldd	r31, Y+5	; 0x05
    1324:	80 83       	st	Z, r24
    1326:	19 c0       	rjmp	.+50     	; 0x135a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
    1328:	e0 e3       	ldi	r30, 0x30	; 48
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_u8GetPinValue+0x102>
    133c:	55 95       	asr	r21
    133e:	47 95       	ror	r20
    1340:	8a 95       	dec	r24
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_u8GetPinValue+0xfe>
    1344:	ca 01       	movw	r24, r20
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	ec 81       	ldd	r30, Y+4	; 0x04
    134a:	fd 81       	ldd	r31, Y+5	; 0x05
    134c:	80 83       	st	Z, r24
    134e:	05 c0       	rjmp	.+10     	; 0x135a <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1; break;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    135a:	89 81       	ldd	r24, Y+1	; 0x01

}
    135c:	27 96       	adiw	r28, 0x07	; 7
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <LCD_voidSendCommand>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	e9 97       	sbiw	r28, 0x39	; 57
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(LCD_CTRL_8_PORT,LCD_E_PIN,DIO_u8PIN_LOW);

#elif LCD_Bit_Mode == Four_Bits_Mode

	/* Set RS Pin to Low for Command */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RS,DIO_u8PIN_LOW);
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Set RW to Low for Write */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RW,DIO_u8PIN_LOW);
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Set Command to Data Pins */
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Command>>7)&1));
    1398:	89 ad       	ldd	r24, Y+57	; 0x39
    139a:	98 2f       	mov	r25, r24
    139c:	99 1f       	adc	r25, r25
    139e:	99 27       	eor	r25, r25
    13a0:	99 1f       	adc	r25, r25
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	67 e0       	ldi	r22, 0x07	; 7
    13a6:	49 2f       	mov	r20, r25
    13a8:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Command>>6)&1));
    13ac:	89 ad       	ldd	r24, Y+57	; 0x39
    13ae:	82 95       	swap	r24
    13b0:	86 95       	lsr	r24
    13b2:	86 95       	lsr	r24
    13b4:	83 70       	andi	r24, 0x03	; 3
    13b6:	98 2f       	mov	r25, r24
    13b8:	91 70       	andi	r25, 0x01	; 1
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	66 e0       	ldi	r22, 0x06	; 6
    13be:	49 2f       	mov	r20, r25
    13c0:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Command>>5)&1));
    13c4:	89 ad       	ldd	r24, Y+57	; 0x39
    13c6:	82 95       	swap	r24
    13c8:	86 95       	lsr	r24
    13ca:	87 70       	andi	r24, 0x07	; 7
    13cc:	98 2f       	mov	r25, r24
    13ce:	91 70       	andi	r25, 0x01	; 1
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	65 e0       	ldi	r22, 0x05	; 5
    13d4:	49 2f       	mov	r20, r25
    13d6:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Command>>4)&1));
    13da:	89 ad       	ldd	r24, Y+57	; 0x39
    13dc:	82 95       	swap	r24
    13de:	8f 70       	andi	r24, 0x0F	; 15
    13e0:	98 2f       	mov	r25, r24
    13e2:	91 70       	andi	r25, 0x01	; 1
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	64 e0       	ldi	r22, 0x04	; 4
    13e8:	49 2f       	mov	r20, r25
    13ea:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	62 e0       	ldi	r22, 0x02	; 2
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 ef       	ldi	r26, 0xF0	; 240
    13fe:	b1 e4       	ldi	r27, 0x41	; 65
    1400:	8d ab       	std	Y+53, r24	; 0x35
    1402:	9e ab       	std	Y+54, r25	; 0x36
    1404:	af ab       	std	Y+55, r26	; 0x37
    1406:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6d a9       	ldd	r22, Y+53	; 0x35
    140a:	7e a9       	ldd	r23, Y+54	; 0x36
    140c:	8f a9       	ldd	r24, Y+55	; 0x37
    140e:	98 ad       	ldd	r25, Y+56	; 0x38
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	89 ab       	std	Y+49, r24	; 0x31
    1422:	9a ab       	std	Y+50, r25	; 0x32
    1424:	ab ab       	std	Y+51, r26	; 0x33
    1426:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1428:	69 a9       	ldd	r22, Y+49	; 0x31
    142a:	7a a9       	ldd	r23, Y+50	; 0x32
    142c:	8b a9       	ldd	r24, Y+51	; 0x33
    142e:	9c a9       	ldd	r25, Y+52	; 0x34
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <LCD_voidSendCommand+0xdc>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	98 ab       	std	Y+48, r25	; 0x30
    1446:	8f a7       	std	Y+47, r24	; 0x2f
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <LCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
    144a:	69 a9       	ldd	r22, Y+49	; 0x31
    144c:	7a a9       	ldd	r23, Y+50	; 0x32
    144e:	8b a9       	ldd	r24, Y+51	; 0x33
    1450:	9c a9       	ldd	r25, Y+52	; 0x34
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <LCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6d a9       	ldd	r22, Y+53	; 0x35
    1464:	7e a9       	ldd	r23, Y+54	; 0x36
    1466:	8f a9       	ldd	r24, Y+55	; 0x37
    1468:	98 ad       	ldd	r25, Y+56	; 0x38
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	98 ab       	std	Y+48, r25	; 0x30
    1488:	8f a7       	std	Y+47, r24	; 0x2f
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <LCD_voidSendCommand+0x13c>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9e a7       	std	Y+46, r25	; 0x2e
    1492:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1494:	8d a5       	ldd	r24, Y+45	; 0x2d
    1496:	9e a5       	ldd	r25, Y+46	; 0x2e
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <LCD_voidSendCommand+0x12a>
    149c:	9e a7       	std	Y+46, r25	; 0x2e
    149e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a2:	98 a9       	ldd	r25, Y+48	; 0x30
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	98 ab       	std	Y+48, r25	; 0x30
    14a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ac:	98 a9       	ldd	r25, Y+48	; 0x30
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <LCD_voidSendCommand+0x11e>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <LCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	69 a9       	ldd	r22, Y+49	; 0x31
    14b6:	7a a9       	ldd	r23, Y+50	; 0x32
    14b8:	8b a9       	ldd	r24, Y+51	; 0x33
    14ba:	9c a9       	ldd	r25, Y+52	; 0x34
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	98 ab       	std	Y+48, r25	; 0x30
    14c6:	8f a7       	std	Y+47, r24	; 0x2f
    14c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ca:	98 a9       	ldd	r25, Y+48	; 0x30
    14cc:	9c a7       	std	Y+44, r25	; 0x2c
    14ce:	8b a7       	std	Y+43, r24	; 0x2b
    14d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCD_voidSendCommand+0x166>
    14d8:	9c a7       	std	Y+44, r25	; 0x2c
    14da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e0       	ldi	r26, 0x00	; 0
    14ec:	b0 e4       	ldi	r27, 0x40	; 64
    14ee:	8f a3       	std	Y+39, r24	; 0x27
    14f0:	98 a7       	std	Y+40, r25	; 0x28
    14f2:	a9 a7       	std	Y+41, r26	; 0x29
    14f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	6f a1       	ldd	r22, Y+39	; 0x27
    14f8:	78 a5       	ldd	r23, Y+40	; 0x28
    14fa:	89 a5       	ldd	r24, Y+41	; 0x29
    14fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a ef       	ldi	r20, 0xFA	; 250
    1504:	54 e4       	ldi	r21, 0x44	; 68
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8b a3       	std	Y+35, r24	; 0x23
    1510:	9c a3       	std	Y+36, r25	; 0x24
    1512:	ad a3       	std	Y+37, r26	; 0x25
    1514:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1516:	6b a1       	ldd	r22, Y+35	; 0x23
    1518:	7c a1       	ldd	r23, Y+36	; 0x24
    151a:	8d a1       	ldd	r24, Y+37	; 0x25
    151c:	9e a1       	ldd	r25, Y+38	; 0x26
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <LCD_voidSendCommand+0x1ca>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <LCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
    1538:	6b a1       	ldd	r22, Y+35	; 0x23
    153a:	7c a1       	ldd	r23, Y+36	; 0x24
    153c:	8d a1       	ldd	r24, Y+37	; 0x25
    153e:	9e a1       	ldd	r25, Y+38	; 0x26
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <LCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	6f a1       	ldd	r22, Y+39	; 0x27
    1552:	78 a5       	ldd	r23, Y+40	; 0x28
    1554:	89 a5       	ldd	r24, Y+41	; 0x29
    1556:	9a a5       	ldd	r25, Y+42	; 0x2a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9a a3       	std	Y+34, r25	; 0x22
    1576:	89 a3       	std	Y+33, r24	; 0x21
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <LCD_voidSendCommand+0x22a>
    157a:	88 ec       	ldi	r24, 0xC8	; 200
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	98 a3       	std	Y+32, r25	; 0x20
    1580:	8f 8f       	std	Y+31, r24	; 0x1f
    1582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1584:	98 a1       	ldd	r25, Y+32	; 0x20
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <LCD_voidSendCommand+0x218>
    158a:	98 a3       	std	Y+32, r25	; 0x20
    158c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	89 a1       	ldd	r24, Y+33	; 0x21
    1590:	9a a1       	ldd	r25, Y+34	; 0x22
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	89 a1       	ldd	r24, Y+33	; 0x21
    159a:	9a a1       	ldd	r25, Y+34	; 0x22
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <LCD_voidSendCommand+0x20c>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <LCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	6b a1       	ldd	r22, Y+35	; 0x23
    15a4:	7c a1       	ldd	r23, Y+36	; 0x24
    15a6:	8d a1       	ldd	r24, Y+37	; 0x25
    15a8:	9e a1       	ldd	r25, Y+38	; 0x26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9a a3       	std	Y+34, r25	; 0x22
    15b4:	89 a3       	std	Y+33, r24	; 0x21
    15b6:	89 a1       	ldd	r24, Y+33	; 0x21
    15b8:	9a a1       	ldd	r25, Y+34	; 0x22
    15ba:	9e 8f       	std	Y+30, r25	; 0x1e
    15bc:	8d 8f       	std	Y+29, r24	; 0x1d
    15be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <LCD_voidSendCommand+0x254>
    15c6:	9e 8f       	std	Y+30, r25	; 0x1e
    15c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Command>>3)&1));
    15ca:	89 ad       	ldd	r24, Y+57	; 0x39
    15cc:	86 95       	lsr	r24
    15ce:	86 95       	lsr	r24
    15d0:	86 95       	lsr	r24
    15d2:	98 2f       	mov	r25, r24
    15d4:	91 70       	andi	r25, 0x01	; 1
    15d6:	83 e0       	ldi	r24, 0x03	; 3
    15d8:	67 e0       	ldi	r22, 0x07	; 7
    15da:	49 2f       	mov	r20, r25
    15dc:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Command>>2)&1));
    15e0:	89 ad       	ldd	r24, Y+57	; 0x39
    15e2:	86 95       	lsr	r24
    15e4:	86 95       	lsr	r24
    15e6:	98 2f       	mov	r25, r24
    15e8:	91 70       	andi	r25, 0x01	; 1
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	66 e0       	ldi	r22, 0x06	; 6
    15ee:	49 2f       	mov	r20, r25
    15f0:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Command>>1)&1));
    15f4:	89 ad       	ldd	r24, Y+57	; 0x39
    15f6:	86 95       	lsr	r24
    15f8:	98 2f       	mov	r25, r24
    15fa:	91 70       	andi	r25, 0x01	; 1
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	65 e0       	ldi	r22, 0x05	; 5
    1600:	49 2f       	mov	r20, r25
    1602:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Command>>0)&1));
    1606:	89 ad       	ldd	r24, Y+57	; 0x39
    1608:	98 2f       	mov	r25, r24
    160a:	91 70       	andi	r25, 0x01	; 1
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	64 e0       	ldi	r22, 0x04	; 4
    1610:	49 2f       	mov	r20, r25
    1612:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	62 e0       	ldi	r22, 0x02	; 2
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 ef       	ldi	r26, 0xF0	; 240
    1626:	b1 e4       	ldi	r27, 0x41	; 65
    1628:	89 8f       	std	Y+25, r24	; 0x19
    162a:	9a 8f       	std	Y+26, r25	; 0x1a
    162c:	ab 8f       	std	Y+27, r26	; 0x1b
    162e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	69 8d       	ldd	r22, Y+25	; 0x19
    1632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a ef       	ldi	r20, 0xFA	; 250
    163e:	54 e4       	ldi	r21, 0x44	; 68
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8d 8b       	std	Y+21, r24	; 0x15
    164a:	9e 8b       	std	Y+22, r25	; 0x16
    164c:	af 8b       	std	Y+23, r26	; 0x17
    164e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1650:	6d 89       	ldd	r22, Y+21	; 0x15
    1652:	7e 89       	ldd	r23, Y+22	; 0x16
    1654:	8f 89       	ldd	r24, Y+23	; 0x17
    1656:	98 8d       	ldd	r25, Y+24	; 0x18
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <LCD_voidSendCommand+0x304>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9c 8b       	std	Y+20, r25	; 0x14
    166e:	8b 8b       	std	Y+19, r24	; 0x13
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <LCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    1672:	6d 89       	ldd	r22, Y+21	; 0x15
    1674:	7e 89       	ldd	r23, Y+22	; 0x16
    1676:	8f 89       	ldd	r24, Y+23	; 0x17
    1678:	98 8d       	ldd	r25, Y+24	; 0x18
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	3f ef       	ldi	r19, 0xFF	; 255
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	57 e4       	ldi	r21, 0x47	; 71
    1682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <LCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	69 8d       	ldd	r22, Y+25	; 0x19
    168c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9c 8b       	std	Y+20, r25	; 0x14
    16b0:	8b 8b       	std	Y+19, r24	; 0x13
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <LCD_voidSendCommand+0x364>
    16b4:	88 ec       	ldi	r24, 0xC8	; 200
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9a 8b       	std	Y+18, r25	; 0x12
    16ba:	89 8b       	std	Y+17, r24	; 0x11
    16bc:	89 89       	ldd	r24, Y+17	; 0x11
    16be:	9a 89       	ldd	r25, Y+18	; 0x12
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_voidSendCommand+0x352>
    16c4:	9a 8b       	std	Y+18, r25	; 0x12
    16c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ca:	9c 89       	ldd	r25, Y+20	; 0x14
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9c 8b       	std	Y+20, r25	; 0x14
    16d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8b 89       	ldd	r24, Y+19	; 0x13
    16d4:	9c 89       	ldd	r25, Y+20	; 0x14
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <LCD_voidSendCommand+0x346>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <LCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	6d 89       	ldd	r22, Y+21	; 0x15
    16de:	7e 89       	ldd	r23, Y+22	; 0x16
    16e0:	8f 89       	ldd	r24, Y+23	; 0x17
    16e2:	98 8d       	ldd	r25, Y+24	; 0x18
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9c 8b       	std	Y+20, r25	; 0x14
    16ee:	8b 8b       	std	Y+19, r24	; 0x13
    16f0:	8b 89       	ldd	r24, Y+19	; 0x13
    16f2:	9c 89       	ldd	r25, Y+20	; 0x14
    16f4:	98 8b       	std	Y+16, r25	; 0x10
    16f6:	8f 87       	std	Y+15, r24	; 0x0f
    16f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fa:	98 89       	ldd	r25, Y+16	; 0x10
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_voidSendCommand+0x38e>
    1700:	98 8b       	std	Y+16, r25	; 0x10
    1702:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e4       	ldi	r27, 0x40	; 64
    1716:	8b 87       	std	Y+11, r24	; 0x0b
    1718:	9c 87       	std	Y+12, r25	; 0x0c
    171a:	ad 87       	std	Y+13, r26	; 0x0d
    171c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1720:	7c 85       	ldd	r23, Y+12	; 0x0c
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a ef       	ldi	r20, 0xFA	; 250
    172c:	54 e4       	ldi	r21, 0x44	; 68
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8f 83       	std	Y+7, r24	; 0x07
    1738:	98 87       	std	Y+8, r25	; 0x08
    173a:	a9 87       	std	Y+9, r26	; 0x09
    173c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_voidSendCommand+0x3f2>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	3f c0       	rjmp	.+126    	; 0x17de <LCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <LCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCD_voidSendCommand+0x452>
    17a2:	88 ec       	ldi	r24, 0xC8	; 200
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_voidSendCommand+0x440>
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCD_voidSendCommand+0x434>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <LCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_voidSendCommand+0x47c>
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#else
#error "Wrong LCD mode configration"
#endif
}
    17f2:	e9 96       	adiw	r28, 0x39	; 57
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	de bf       	out	0x3e, r29	; 62
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	e9 97       	sbiw	r28, 0x39	; 57
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPinValue(LCD_CTRL_8_PORT,LCD_E_PIN,DIO_u8PIN_LOW);

#elif LCD_Bit_Mode == Four_Bits_Mode
	/* Set RS Pin to High for Data */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RS,DIO_u8PIN_HIGH);
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	41 e0       	ldi	r20, 0x01	; 1
    1820:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Set RW to Low for Write */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_RW,DIO_u8PIN_LOW);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	/* Set Data to Data Pins */
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Data>>7)&1));
    182e:	89 ad       	ldd	r24, Y+57	; 0x39
    1830:	98 2f       	mov	r25, r24
    1832:	99 1f       	adc	r25, r25
    1834:	99 27       	eor	r25, r25
    1836:	99 1f       	adc	r25, r25
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	67 e0       	ldi	r22, 0x07	; 7
    183c:	49 2f       	mov	r20, r25
    183e:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Data>>6)&1));
    1842:	89 ad       	ldd	r24, Y+57	; 0x39
    1844:	82 95       	swap	r24
    1846:	86 95       	lsr	r24
    1848:	86 95       	lsr	r24
    184a:	83 70       	andi	r24, 0x03	; 3
    184c:	98 2f       	mov	r25, r24
    184e:	91 70       	andi	r25, 0x01	; 1
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	66 e0       	ldi	r22, 0x06	; 6
    1854:	49 2f       	mov	r20, r25
    1856:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Data>>5)&1));
    185a:	89 ad       	ldd	r24, Y+57	; 0x39
    185c:	82 95       	swap	r24
    185e:	86 95       	lsr	r24
    1860:	87 70       	andi	r24, 0x07	; 7
    1862:	98 2f       	mov	r25, r24
    1864:	91 70       	andi	r25, 0x01	; 1
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	65 e0       	ldi	r22, 0x05	; 5
    186a:	49 2f       	mov	r20, r25
    186c:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Data>>4)&1));
    1870:	89 ad       	ldd	r24, Y+57	; 0x39
    1872:	82 95       	swap	r24
    1874:	8f 70       	andi	r24, 0x0F	; 15
    1876:	98 2f       	mov	r25, r24
    1878:	91 70       	andi	r25, 0x01	; 1
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	49 2f       	mov	r20, r25
    1880:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 ef       	ldi	r26, 0xF0	; 240
    1894:	b1 e4       	ldi	r27, 0x41	; 65
    1896:	8d ab       	std	Y+53, r24	; 0x35
    1898:	9e ab       	std	Y+54, r25	; 0x36
    189a:	af ab       	std	Y+55, r26	; 0x37
    189c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6d a9       	ldd	r22, Y+53	; 0x35
    18a0:	7e a9       	ldd	r23, Y+54	; 0x36
    18a2:	8f a9       	ldd	r24, Y+55	; 0x37
    18a4:	98 ad       	ldd	r25, Y+56	; 0x38
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a ef       	ldi	r20, 0xFA	; 250
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	89 ab       	std	Y+49, r24	; 0x31
    18b8:	9a ab       	std	Y+50, r25	; 0x32
    18ba:	ab ab       	std	Y+51, r26	; 0x33
    18bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18be:	69 a9       	ldd	r22, Y+49	; 0x31
    18c0:	7a a9       	ldd	r23, Y+50	; 0x32
    18c2:	8b a9       	ldd	r24, Y+51	; 0x33
    18c4:	9c a9       	ldd	r25, Y+52	; 0x34
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <LCD_voidSendData+0xdc>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	3f c0       	rjmp	.+126    	; 0x195e <LCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    18e0:	69 a9       	ldd	r22, Y+49	; 0x31
    18e2:	7a a9       	ldd	r23, Y+50	; 0x32
    18e4:	8b a9       	ldd	r24, Y+51	; 0x33
    18e6:	9c a9       	ldd	r25, Y+52	; 0x34
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <LCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6d a9       	ldd	r22, Y+53	; 0x35
    18fa:	7e a9       	ldd	r23, Y+54	; 0x36
    18fc:	8f a9       	ldd	r24, Y+55	; 0x37
    18fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	98 ab       	std	Y+48, r25	; 0x30
    191e:	8f a7       	std	Y+47, r24	; 0x2f
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_voidSendData+0x13c>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
    192a:	8d a5       	ldd	r24, Y+45	; 0x2d
    192c:	9e a5       	ldd	r25, Y+46	; 0x2e
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_voidSendData+0x12a>
    1932:	9e a7       	std	Y+46, r25	; 0x2e
    1934:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8f a5       	ldd	r24, Y+47	; 0x2f
    1938:	98 a9       	ldd	r25, Y+48	; 0x30
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	98 ab       	std	Y+48, r25	; 0x30
    193e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8f a5       	ldd	r24, Y+47	; 0x2f
    1942:	98 a9       	ldd	r25, Y+48	; 0x30
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_voidSendData+0x11e>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <LCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	69 a9       	ldd	r22, Y+49	; 0x31
    194c:	7a a9       	ldd	r23, Y+50	; 0x32
    194e:	8b a9       	ldd	r24, Y+51	; 0x33
    1950:	9c a9       	ldd	r25, Y+52	; 0x34
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	98 ab       	std	Y+48, r25	; 0x30
    195c:	8f a7       	std	Y+47, r24	; 0x2f
    195e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1960:	98 a9       	ldd	r25, Y+48	; 0x30
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
    1966:	8b a5       	ldd	r24, Y+43	; 0x2b
    1968:	9c a5       	ldd	r25, Y+44	; 0x2c
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_voidSendData+0x166>
    196e:	9c a7       	std	Y+44, r25	; 0x2c
    1970:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e4       	ldi	r27, 0x40	; 64
    1984:	8f a3       	std	Y+39, r24	; 0x27
    1986:	98 a7       	std	Y+40, r25	; 0x28
    1988:	a9 a7       	std	Y+41, r26	; 0x29
    198a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6f a1       	ldd	r22, Y+39	; 0x27
    198e:	78 a5       	ldd	r23, Y+40	; 0x28
    1990:	89 a5       	ldd	r24, Y+41	; 0x29
    1992:	9a a5       	ldd	r25, Y+42	; 0x2a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8b a3       	std	Y+35, r24	; 0x23
    19a6:	9c a3       	std	Y+36, r25	; 0x24
    19a8:	ad a3       	std	Y+37, r26	; 0x25
    19aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_voidSendData+0x1ca>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9a a3       	std	Y+34, r25	; 0x22
    19ca:	89 a3       	std	Y+33, r24	; 0x21
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_voidSendData+0x248>
	else if (__tmp > 65535)
    19ce:	6b a1       	ldd	r22, Y+35	; 0x23
    19d0:	7c a1       	ldd	r23, Y+36	; 0x24
    19d2:	8d a1       	ldd	r24, Y+37	; 0x25
    19d4:	9e a1       	ldd	r25, Y+38	; 0x26
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_voidSendData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6f a1       	ldd	r22, Y+39	; 0x27
    19e8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ea:	89 a5       	ldd	r24, Y+41	; 0x29
    19ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_voidSendData+0x22a>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	98 a3       	std	Y+32, r25	; 0x20
    1a16:	8f 8f       	std	Y+31, r24	; 0x1f
    1a18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_voidSendData+0x218>
    1a20:	98 a3       	std	Y+32, r25	; 0x20
    1a22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	89 a1       	ldd	r24, Y+33	; 0x21
    1a26:	9a a1       	ldd	r25, Y+34	; 0x22
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	9a a3       	std	Y+34, r25	; 0x22
    1a2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a30:	9a a1       	ldd	r25, Y+34	; 0x22
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_voidSendData+0x20c>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_voidSendData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9a a3       	std	Y+34, r25	; 0x22
    1a4a:	89 a3       	std	Y+33, r24	; 0x21
    1a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	8d 8f       	std	Y+29, r24	; 0x1d
    1a54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_voidSendData+0x254>
    1a5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);


	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_7,((Copy_u8Data>>3)&1));
    1a60:	89 ad       	ldd	r24, Y+57	; 0x39
    1a62:	86 95       	lsr	r24
    1a64:	86 95       	lsr	r24
    1a66:	86 95       	lsr	r24
    1a68:	98 2f       	mov	r25, r24
    1a6a:	91 70       	andi	r25, 0x01	; 1
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	67 e0       	ldi	r22, 0x07	; 7
    1a70:	49 2f       	mov	r20, r25
    1a72:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_6,((Copy_u8Data>>2)&1));
    1a76:	89 ad       	ldd	r24, Y+57	; 0x39
    1a78:	86 95       	lsr	r24
    1a7a:	86 95       	lsr	r24
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	91 70       	andi	r25, 0x01	; 1
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	66 e0       	ldi	r22, 0x06	; 6
    1a84:	49 2f       	mov	r20, r25
    1a86:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_5,((Copy_u8Data>>1)&1));
    1a8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8c:	86 95       	lsr	r24
    1a8e:	98 2f       	mov	r25, r24
    1a90:	91 70       	andi	r25, 0x01	; 1
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	65 e0       	ldi	r22, 0x05	; 5
    1a96:	49 2f       	mov	r20, r25
    1a98:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_4_PORT,LCD_DATA_4,((Copy_u8Data>>0)&1));
    1a9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	91 70       	andi	r25, 0x01	; 1
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	64 e0       	ldi	r22, 0x04	; 4
    1aa6:	49 2f       	mov	r20, r25
    1aa8:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>

	/* Send Enable Pulse */
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_HIGH);
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 ef       	ldi	r26, 0xF0	; 240
    1abc:	b1 e4       	ldi	r27, 0x41	; 65
    1abe:	89 8f       	std	Y+25, r24	; 0x19
    1ac0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a ef       	ldi	r20, 0xFA	; 250
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8d 8b       	std	Y+21, r24	; 0x15
    1ae0:	9e 8b       	std	Y+22, r25	; 0x16
    1ae2:	af 8b       	std	Y+23, r26	; 0x17
    1ae4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	98 8d       	ldd	r25, Y+24	; 0x18
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <LCD_voidSendData+0x304>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9c 8b       	std	Y+20, r25	; 0x14
    1b04:	8b 8b       	std	Y+19, r24	; 0x13
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <LCD_voidSendData+0x382>
	else if (__tmp > 65535)
    1b08:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <LCD_voidSendData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	69 8d       	ldd	r22, Y+25	; 0x19
    1b22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9c 8b       	std	Y+20, r25	; 0x14
    1b46:	8b 8b       	std	Y+19, r24	; 0x13
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <LCD_voidSendData+0x364>
    1b4a:	88 ec       	ldi	r24, 0xC8	; 200
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	89 8b       	std	Y+17, r24	; 0x11
    1b52:	89 89       	ldd	r24, Y+17	; 0x11
    1b54:	9a 89       	ldd	r25, Y+18	; 0x12
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_voidSendData+0x352>
    1b5a:	9a 8b       	std	Y+18, r25	; 0x12
    1b5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	9c 8b       	std	Y+20, r25	; 0x14
    1b66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <LCD_voidSendData+0x346>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <LCD_voidSendData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	6d 89       	ldd	r22, Y+21	; 0x15
    1b74:	7e 89       	ldd	r23, Y+22	; 0x16
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9c 8b       	std	Y+20, r25	; 0x14
    1b84:	8b 8b       	std	Y+19, r24	; 0x13
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	98 8b       	std	Y+16, r25	; 0x10
    1b8c:	8f 87       	std	Y+15, r24	; 0x0f
    1b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b90:	98 89       	ldd	r25, Y+16	; 0x10
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_voidSendData+0x38e>
    1b96:	98 8b       	std	Y+16, r25	; 0x10
    1b98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	DIO_u8SetPinValue(LCD_CTRL_4_PORT,LCD_CTRL_4_E,DIO_u8PIN_LOW);
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	62 e0       	ldi	r22, 0x02	; 2
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_u8SetPinValue>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 e0       	ldi	r26, 0x00	; 0
    1baa:	b0 e4       	ldi	r27, 0x40	; 64
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	ad 87       	std	Y+13, r26	; 0x0d
    1bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8f 83       	std	Y+7, r24	; 0x07
    1bce:	98 87       	std	Y+8, r25	; 0x08
    1bd0:	a9 87       	std	Y+9, r26	; 0x09
    1bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <LCD_voidSendData+0x3f2>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <LCD_voidSendData+0x470>
	else if (__tmp > 65535)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <LCD_voidSendData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_voidSendData+0x452>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_voidSendData+0x440>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_voidSendData+0x434>
    1c5e:	14 c0       	rjmp	.+40     	; 0x1c88 <LCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_voidSendData+0x47c>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

#else
#error "Wrong LCD mode configration"
#endif
}
    1c88:	e9 96       	adiw	r28, 0x39	; 57
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <LCD_voidInit>:

void LCD_voidInit(void)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	6c 97       	sbiw	r28, 0x1c	; 28
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 ef       	ldi	r26, 0xF0	; 240
    1cb4:	b1 e4       	ldi	r27, 0x41	; 65
    1cb6:	89 8f       	std	Y+25, r24	; 0x19
    1cb8:	9a 8f       	std	Y+26, r25	; 0x1a
    1cba:	ab 8f       	std	Y+27, r26	; 0x1b
    1cbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a ef       	ldi	r20, 0xFA	; 250
    1ccc:	54 e4       	ldi	r21, 0x44	; 68
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8d 8b       	std	Y+21, r24	; 0x15
    1cd8:	9e 8b       	std	Y+22, r25	; 0x16
    1cda:	af 8b       	std	Y+23, r26	; 0x17
    1cdc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cde:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <LCD_voidInit+0x66>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9c 8b       	std	Y+20, r25	; 0x14
    1cfc:	8b 8b       	std	Y+19, r24	; 0x13
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	4c f5       	brge	.+82     	; 0x1d6a <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9c 8b       	std	Y+20, r25	; 0x14
    1d3e:	8b 8b       	std	Y+19, r24	; 0x13
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <LCD_voidInit+0xc6>
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
    1d4a:	89 89       	ldd	r24, Y+17	; 0x11
    1d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_voidInit+0xb4>
    1d52:	9a 8b       	std	Y+18, r25	; 0x12
    1d54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	8b 89       	ldd	r24, Y+19	; 0x13
    1d58:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <LCD_voidInit+0xa8>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9c 8b       	std	Y+20, r25	; 0x14
    1d7c:	8b 8b       	std	Y+19, r24	; 0x13
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	98 8b       	std	Y+16, r25	; 0x10
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	98 89       	ldd	r25, Y+16	; 0x10
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_voidInit+0xf0>
    1d8e:	98 8b       	std	Y+16, r25	; 0x10
    1d90:	8f 87       	std	Y+15, r24	; 0x0f

	// Wait for More Than 30 ms
	_delay_ms(30);

	// Function Set Command: 2 Lines, 5*8 Font Size
	LCD_voidSendCommand(0x02);
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>
	LCD_voidSendCommand(0x28);
    1d98:	88 e2       	ldi	r24, 0x28	; 40
    1d9a:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0C);
    1d9e:	8c e0       	ldi	r24, 0x0C	; 12
    1da0:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e8       	ldi	r26, 0x80	; 128
    1daa:	bf e3       	ldi	r27, 0x3F	; 63
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
    1dae:	9c 87       	std	Y+12, r25	; 0x0c
    1db0:	ad 87       	std	Y+13, r26	; 0x0d
    1db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a ef       	ldi	r20, 0xFA	; 250
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8f 83       	std	Y+7, r24	; 0x07
    1dce:	98 87       	std	Y+8, r25	; 0x08
    1dd0:	a9 87       	std	Y+9, r26	; 0x09
    1dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <LCD_voidInit+0x15c>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <LCD_voidInit+0x1da>
	else if (__tmp > 65535)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <LCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_voidInit+0x1bc>
    1e38:	88 ec       	ldi	r24, 0xC8	; 200
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_voidInit+0x1aa>
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <LCD_voidInit+0x19e>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <LCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_voidInit+0x1e6>
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01

	// Wait for More Than 30 us
	_delay_ms(1);

	// Display On Off Control: Display Enable, Disable cursor, No blink Curser
	LCD_voidSendCommand(0x06);  //shift Cursor to right
    1e88:	86 e0       	ldi	r24, 0x06	; 6
    1e8a:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);   // clear
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>


#else
#error "Wrong LCD mode configration"
#endif
}
    1e94:	6c 96       	adiw	r28, 0x1c	; 28
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LCD__voidSendString>:

void LCD__voidSendString(const char* Copy_pcString)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <LCD__voidSendString+0x6>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <LCD__voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		LCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	80 81       	ld	r24, Z
    1ecc:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendData>
		Local_u8Counter++;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD__voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e2 0f       	add	r30, r18
    1ee4:	f3 1f       	adc	r31, r19
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 23       	and	r24, r24
    1eea:	39 f7       	brne	.-50     	; 0x1eba <LCD__voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <LCD_voidGoToXY+0x6>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	88 23       	and	r24, r24
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <LCD_voidGoToXY+0x1c>
	{
		/*location is at first line*/
		Local_u8Address=Copy_u8YPos;
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <LCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	19 f4       	brne	.+6      	; 0x1f20 <LCD_voidGoToXY+0x28>
	{
		/*location is at second line*/
		Local_u8Address=Copy_u8YPos+0x40;
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	80 5c       	subi	r24, 0xC0	; 192
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM address command then send the command*/
	LCD_voidSendCommand(Local_u8Address+128);
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	80 58       	subi	r24, 0x80	; 128
    1f24:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	27 97       	sbiw	r28, 0x07	; 7
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	6d 83       	std	Y+5, r22	; 0x05
    1f4e:	4e 83       	std	Y+6, r20	; 0x06
    1f50:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0, Local_u8Iterator;
    1f52:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate CGRAM address whose each block is 9 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM address command to LCD, with setting bit 6, clearing bit 7*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	80 5c       	subi	r24, 0xC0	; 192
    1f6c:	0e 94 b7 09 	call	0x136e	; 0x136e <LCD_voidSendCommand>

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1f70:	19 82       	std	Y+1, r1	; 0x01
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	80 81       	ld	r24, Z
    1f86:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendData>
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;

	/*send CGRAM address command to LCD, with setting bit 6, clearing bit 7*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	88 30       	cpi	r24, 0x08	; 8
    1f94:	78 f3       	brcs	.-34     	; 0x1f74 <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*go back to DDRAM to display the pattern*/
	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1f96:	8e 81       	ldd	r24, Y+6	; 0x06
    1f98:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_voidGoToXY>
	/*display the pattern written in the CGRAM*/
	LCD_voidSendData(Copy_u8PatternNumber);
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendData>
}
    1fa4:	27 96       	adiw	r28, 0x07	; 7
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_Number)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	2a 97       	sbiw	r28, 0x0a	; 10
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	6f 83       	std	Y+7, r22	; 0x07
    1fcc:	78 87       	std	Y+8, r23	; 0x08
    1fce:	89 87       	std	Y+9, r24	; 0x09
    1fd0:	9a 87       	std	Y+10, r25	; 0x0a
	u8 Local_u8Number,Local_u8FirstNum=0;
    1fd2:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Loop;
	if(Copy_Number==0)
    1fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd6:	98 85       	ldd	r25, Y+8	; 0x08
    1fd8:	a9 85       	ldd	r26, Y+9	; 0x09
    1fda:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	a1 05       	cpc	r26, r1
    1fe0:	b1 05       	cpc	r27, r1
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <LCD_voidSendNumber+0x36>
	{
		LCD_voidSendData(48);
    1fe4:	80 e3       	ldi	r24, 0x30	; 48
    1fe6:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendData>
    1fea:	51 c0       	rjmp	.+162    	; 0x208e <LCD_voidSendNumber+0xd8>
	}
	else
	{
		for(Local_u32Loop=1000000;Local_u32Loop>0;Local_u32Loop/=10)
    1fec:	80 e4       	ldi	r24, 0x40	; 64
    1fee:	92 e4       	ldi	r25, 0x42	; 66
    1ff0:	af e0       	ldi	r26, 0x0F	; 15
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	ab 83       	std	Y+3, r26	; 0x03
    1ffa:	bc 83       	std	Y+4, r27	; 0x04
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_voidSendNumber+0xc6>
		{
			Local_u8Number=Copy_Number/Local_u32Loop;
    1ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    2000:	98 85       	ldd	r25, Y+8	; 0x08
    2002:	a9 85       	ldd	r26, Y+9	; 0x09
    2004:	ba 85       	ldd	r27, Y+10	; 0x0a
    2006:	29 81       	ldd	r18, Y+1	; 0x01
    2008:	3a 81       	ldd	r19, Y+2	; 0x02
    200a:	4b 81       	ldd	r20, Y+3	; 0x03
    200c:	5c 81       	ldd	r21, Y+4	; 0x04
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    2016:	da 01       	movw	r26, r20
    2018:	c9 01       	movw	r24, r18
    201a:	8e 83       	std	Y+6, r24	; 0x06
			if(Local_u8Number==0 && Local_u8FirstNum==0)
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	88 23       	and	r24, r24
    2020:	19 f4       	brne	.+6      	; 0x2028 <LCD_voidSendNumber+0x72>
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	88 23       	and	r24, r24
    2026:	c1 f0       	breq	.+48     	; 0x2058 <LCD_voidSendNumber+0xa2>
			{
				continue;
			}
			else
			{
				LCD_voidSendData(Local_u8Number+48);
    2028:	8e 81       	ldd	r24, Y+6	; 0x06
    202a:	80 5d       	subi	r24, 0xD0	; 208
    202c:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendData>
				Copy_Number=Copy_Number%Local_u32Loop;
    2030:	8f 81       	ldd	r24, Y+7	; 0x07
    2032:	98 85       	ldd	r25, Y+8	; 0x08
    2034:	a9 85       	ldd	r26, Y+9	; 0x09
    2036:	ba 85       	ldd	r27, Y+10	; 0x0a
    2038:	29 81       	ldd	r18, Y+1	; 0x01
    203a:	3a 81       	ldd	r19, Y+2	; 0x02
    203c:	4b 81       	ldd	r20, Y+3	; 0x03
    203e:	5c 81       	ldd	r21, Y+4	; 0x04
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8f 83       	std	Y+7, r24	; 0x07
    204e:	98 87       	std	Y+8, r25	; 0x08
    2050:	a9 87       	std	Y+9, r26	; 0x09
    2052:	ba 87       	std	Y+10, r27	; 0x0a
				Local_u8FirstNum=1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	8d 83       	std	Y+5, r24	; 0x05
	{
		LCD_voidSendData(48);
	}
	else
	{
		for(Local_u32Loop=1000000;Local_u32Loop>0;Local_u32Loop/=10)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	ab 81       	ldd	r26, Y+3	; 0x03
    205e:	bc 81       	ldd	r27, Y+4	; 0x04
    2060:	2a e0       	ldi	r18, 0x0A	; 10
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 ce 10 	call	0x219c	; 0x219c <__udivmodsi4>
    2070:	da 01       	movw	r26, r20
    2072:	c9 01       	movw	r24, r18
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	ab 83       	std	Y+3, r26	; 0x03
    207a:	bc 83       	std	Y+4, r27	; 0x04
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	ab 81       	ldd	r26, Y+3	; 0x03
    2082:	bc 81       	ldd	r27, Y+4	; 0x04
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	a1 05       	cpc	r26, r1
    2088:	b1 05       	cpc	r27, r1
    208a:	09 f0       	breq	.+2      	; 0x208e <LCD_voidSendNumber+0xd8>
    208c:	b8 cf       	rjmp	.-144    	; 0x1ffe <LCD_voidSendNumber+0x48>
				Copy_Number=Copy_Number%Local_u32Loop;
				Local_u8FirstNum=1;
			}
		}
	}
}
    208e:	2a 96       	adiw	r28, 0x0a	; 10
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    DDRA=PORTA_DIR;
    20a8:	ea e3       	ldi	r30, 0x3A	; 58
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	10 82       	st	Z, r1
    DDRB=PORTB_DIR;
    20ae:	e7 e3       	ldi	r30, 0x37	; 55
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	10 82       	st	Z, r1
    DDRC=PORTC_DIR;
    20b4:	e4 e3       	ldi	r30, 0x34	; 52
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	87 e0       	ldi	r24, 0x07	; 7
    20ba:	80 83       	st	Z, r24
    DDRD=PORTD_DIR;
    20bc:	e1 e3       	ldi	r30, 0x31	; 49
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 ef       	ldi	r24, 0xF0	; 240
    20c2:	80 83       	st	Z, r24

    PORTA=PORTA_INITIAL_VALUE;
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	10 82       	st	Z, r1
    PORTB=PORTB_INITIAL_VALUE;
    20ca:	e8 e3       	ldi	r30, 0x38	; 56
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	10 82       	st	Z, r1
    PORTC=PORTC_INITIAL_VALUE;
    20d0:	e5 e3       	ldi	r30, 0x35	; 53
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	10 82       	st	Z, r1
    PORTD=PORTD_INITIAL_VALUE;
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	10 82       	st	Z, r1
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <main>:
#include <util/delay.h>

static u16 Global_u8Read=0;
static u16 Millivolt;
void main(void)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    20ec:	0e 94 50 10 	call	0x20a0	; 0x20a0 <PORT_voidInit>
	ADC_voidInit();
    20f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	LCD_voidInit();
    20f4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <LCD_voidInit>

	u8 Local_u8Temp=0;
    20f8:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{


		ADC_u8StartConversion_Synch(0,&Global_u8Read);
    20fa:	24 e7       	ldi	r18, 0x74	; 116
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	b9 01       	movw	r22, r18
    2102:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversion_Synch>
		Millivolt=(u16)((u32)Global_u8Read*5000UL)/256UL;
    2106:	80 91 74 00 	lds	r24, 0x0074
    210a:	90 91 75 00 	lds	r25, 0x0075
    210e:	cc 01       	movw	r24, r24
    2110:	a0 e0       	ldi	r26, 0x00	; 0
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	28 e8       	ldi	r18, 0x88	; 136
    2116:	33 e1       	ldi	r19, 0x13	; 19
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 af 10 	call	0x215e	; 0x215e <__mulsi3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	89 2f       	mov	r24, r25
    212a:	99 27       	eor	r25, r25
    212c:	90 93 77 00 	sts	0x0077, r25
    2130:	80 93 76 00 	sts	0x0076, r24
		Local_u8Temp=Millivolt;
    2134:	80 91 76 00 	lds	r24, 0x0076
    2138:	90 91 77 00 	lds	r25, 0x0077
    213c:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidGoToXY(0,0);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_voidGoToXY>
		//LCD_voidSendCommand(0x01);
		//LCD__voidSendString("Temp:");
		LCD_voidSendNumber(Millivolt);
    2146:	80 91 76 00 	lds	r24, 0x0076
    214a:	90 91 77 00 	lds	r25, 0x0077
    214e:	cc 01       	movw	r24, r24
    2150:	a0 e0       	ldi	r26, 0x00	; 0
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_voidSendNumber>
    215c:	ce cf       	rjmp	.-100    	; 0x20fa <main+0x18>

0000215e <__mulsi3>:
    215e:	62 9f       	mul	r22, r18
    2160:	d0 01       	movw	r26, r0
    2162:	73 9f       	mul	r23, r19
    2164:	f0 01       	movw	r30, r0
    2166:	82 9f       	mul	r24, r18
    2168:	e0 0d       	add	r30, r0
    216a:	f1 1d       	adc	r31, r1
    216c:	64 9f       	mul	r22, r20
    216e:	e0 0d       	add	r30, r0
    2170:	f1 1d       	adc	r31, r1
    2172:	92 9f       	mul	r25, r18
    2174:	f0 0d       	add	r31, r0
    2176:	83 9f       	mul	r24, r19
    2178:	f0 0d       	add	r31, r0
    217a:	74 9f       	mul	r23, r20
    217c:	f0 0d       	add	r31, r0
    217e:	65 9f       	mul	r22, r21
    2180:	f0 0d       	add	r31, r0
    2182:	99 27       	eor	r25, r25
    2184:	72 9f       	mul	r23, r18
    2186:	b0 0d       	add	r27, r0
    2188:	e1 1d       	adc	r30, r1
    218a:	f9 1f       	adc	r31, r25
    218c:	63 9f       	mul	r22, r19
    218e:	b0 0d       	add	r27, r0
    2190:	e1 1d       	adc	r30, r1
    2192:	f9 1f       	adc	r31, r25
    2194:	bd 01       	movw	r22, r26
    2196:	cf 01       	movw	r24, r30
    2198:	11 24       	eor	r1, r1
    219a:	08 95       	ret

0000219c <__udivmodsi4>:
    219c:	a1 e2       	ldi	r26, 0x21	; 33
    219e:	1a 2e       	mov	r1, r26
    21a0:	aa 1b       	sub	r26, r26
    21a2:	bb 1b       	sub	r27, r27
    21a4:	fd 01       	movw	r30, r26
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <__udivmodsi4_ep>

000021a8 <__udivmodsi4_loop>:
    21a8:	aa 1f       	adc	r26, r26
    21aa:	bb 1f       	adc	r27, r27
    21ac:	ee 1f       	adc	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	a2 17       	cp	r26, r18
    21b2:	b3 07       	cpc	r27, r19
    21b4:	e4 07       	cpc	r30, r20
    21b6:	f5 07       	cpc	r31, r21
    21b8:	20 f0       	brcs	.+8      	; 0x21c2 <__udivmodsi4_ep>
    21ba:	a2 1b       	sub	r26, r18
    21bc:	b3 0b       	sbc	r27, r19
    21be:	e4 0b       	sbc	r30, r20
    21c0:	f5 0b       	sbc	r31, r21

000021c2 <__udivmodsi4_ep>:
    21c2:	66 1f       	adc	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	88 1f       	adc	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	1a 94       	dec	r1
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <__udivmodsi4_loop>
    21ce:	60 95       	com	r22
    21d0:	70 95       	com	r23
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	bd 01       	movw	r22, r26
    21dc:	cf 01       	movw	r24, r30
    21de:	08 95       	ret

000021e0 <__prologue_saves__>:
    21e0:	2f 92       	push	r2
    21e2:	3f 92       	push	r3
    21e4:	4f 92       	push	r4
    21e6:	5f 92       	push	r5
    21e8:	6f 92       	push	r6
    21ea:	7f 92       	push	r7
    21ec:	8f 92       	push	r8
    21ee:	9f 92       	push	r9
    21f0:	af 92       	push	r10
    21f2:	bf 92       	push	r11
    21f4:	cf 92       	push	r12
    21f6:	df 92       	push	r13
    21f8:	ef 92       	push	r14
    21fa:	ff 92       	push	r15
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	ca 1b       	sub	r28, r26
    220a:	db 0b       	sbc	r29, r27
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	09 94       	ijmp

00002218 <__epilogue_restores__>:
    2218:	2a 88       	ldd	r2, Y+18	; 0x12
    221a:	39 88       	ldd	r3, Y+17	; 0x11
    221c:	48 88       	ldd	r4, Y+16	; 0x10
    221e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2220:	6e 84       	ldd	r6, Y+14	; 0x0e
    2222:	7d 84       	ldd	r7, Y+13	; 0x0d
    2224:	8c 84       	ldd	r8, Y+12	; 0x0c
    2226:	9b 84       	ldd	r9, Y+11	; 0x0b
    2228:	aa 84       	ldd	r10, Y+10	; 0x0a
    222a:	b9 84       	ldd	r11, Y+9	; 0x09
    222c:	c8 84       	ldd	r12, Y+8	; 0x08
    222e:	df 80       	ldd	r13, Y+7	; 0x07
    2230:	ee 80       	ldd	r14, Y+6	; 0x06
    2232:	fd 80       	ldd	r15, Y+5	; 0x05
    2234:	0c 81       	ldd	r16, Y+4	; 0x04
    2236:	1b 81       	ldd	r17, Y+3	; 0x03
    2238:	aa 81       	ldd	r26, Y+2	; 0x02
    223a:	b9 81       	ldd	r27, Y+1	; 0x01
    223c:	ce 0f       	add	r28, r30
    223e:	d1 1d       	adc	r29, r1
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	ed 01       	movw	r28, r26
    224c:	08 95       	ret

0000224e <_exit>:
    224e:	f8 94       	cli

00002250 <__stop_program>:
    2250:	ff cf       	rjmp	.-2      	; 0x2250 <__stop_program>
